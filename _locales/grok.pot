# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-22 16:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../grok.rst:3
msgid "Grok"
msgstr ""

#: ../grok.rst:5
msgid "Grok is an alternative declaration language for declaring your components. It is compatible with the Zope Component Architecture, it used just an alternative syntax."
msgstr ""

#: ../grok.rst:7
msgid "Instead of writing separate zcml files, you annotate your code and you create content conforming to specific file names so that they are automatically found. There has been discussions whether grok should be used in the plone core. The plone community decided against it, because it increases the technology stack without adding functionality."
msgstr ""

#: ../grok.rst:10
msgid "Some people are even against using it in Add Ons, because there would not be just one way to declare components, but two. Then there is onle last disadvantage, grok components cannot be overridden by z3c.jbot. I would not be surprised if this could be fixed though."
msgstr ""

#: ../grok.rst:12
msgid "After all these negative things let us tell you why we still like it: We like to write as few lines of code and configuration as possible."
msgstr ""

#: ../grok.rst:14
msgid "So, we will write our browser view as a grok view. From the component architecture side, nothing changes. We still need to write a multi adapter. All the details like which template to use or for which browser layer the view shall be used is declared with a single line annotation or deduced from file names."
msgstr ""

#: ../grok.rst:18
msgid "http://docs.plone.org/4/en/appendices/five-grok/index.html"
msgstr ""

#: ../grok.rst:20
msgid "Grok is not part of plone. We have to add it as a dependency to our egg."
msgstr ""

#: ../grok.rst:22
msgid "Open setup.py, and add ``five.grok`` to the list off addons in ``install_requires``::"
msgstr ""

#: ../grok.rst:31
msgid "You need to run buildout now."
msgstr ""

#: ../grok.rst:33
msgid "Grok nearly magicaly does find all its annotations. Since its not complete magic, you have to tell grok where to look for grok code. This requires a single line of zcml, that line ensures that your complete package is `grokked`."
msgstr ""

#: ../grok.rst:53
msgid "This new grok statement takes care of finding everything grok related."
msgstr ""

#: ../grok.rst:55
msgid "Now we can add a grok view in a new file ``views.py``:"
msgstr ""

#: ../grok.rst:69
msgid "By convention the template must be in a subdirectory called ``views_templates`` and it must be named `talkview.pt`"
msgstr ""

