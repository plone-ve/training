# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-05 05:00-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../zpt_2.rst:4
msgid "Customizing Existing Templates"
msgstr ""

#: ../zpt_2.rst:0
msgid "Get the code!"
msgstr ""

#: ../zpt_2.rst:8
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout directory:"
msgstr ""

#: ../zpt_2.rst:14
msgid "In this part you will:"
msgstr ""

#: ../zpt_2.rst:16
msgid "Customize existing templates"
msgstr ""

#: ../zpt_2.rst:18
msgid "Topics covered:"
msgstr ""

#: ../zpt_2.rst:20
msgid "omelette/packages"
msgstr ""

#: ../zpt_2.rst:21
msgid "z3c.jbot"
msgstr ""

#: ../zpt_2.rst:22
msgid "moment pattern"
msgstr ""

#: ../zpt_2.rst:23
msgid "listings"
msgstr ""

#: ../zpt_2.rst:24
msgid "skins"
msgstr ""

#: ../zpt_2.rst:26
msgid "To dive deeper into real plone data we now look at some existing templates and customize them."
msgstr ""

#: ../zpt_2.rst:32
msgid "The view for News Items"
msgstr ""

#: ../zpt_2.rst:34
msgid "We want to show the date a News Item is published. This way people can see at a glance it they are looking at current or old news."
msgstr ""

#: ../zpt_2.rst:36
msgid "To do this we will customize the template that is used to render News Items."
msgstr ""

#: ../zpt_2.rst:38
msgid "We use ``z3c.jbot`` for overriding templates. The package already has the necessary configuration in ``browser/configure.zcml``."
msgstr ""

#: ../zpt_2.rst:40
msgid "Find the file ``newsitem.pt`` in ``packages/plone/app/contenttypes/browser/templates/`` (in vagrant this directory is in ``/home/vagrant/packages``, otherwise it is in your buildout directory)."
msgstr ""

#: ../zpt_2.rst:41
msgid "Copy that file into the folder ``browser/overrides/`` of our package. If you use vagrant you'd have to use::"
msgstr ""

#: ../zpt_2.rst:45
msgid "Rename the new file from ``newsitem.pt`` to ``plone.app.contenttypes.browser.templates.newsitem.pt``."
msgstr ""

#: ../zpt_2.rst:46
msgid "Restart Plone"
msgstr ""

#: ../zpt_2.rst:48
msgid "Now Plone will use the new file to override the original one."
msgstr ""

#: ../zpt_2.rst:50
msgid "Edit the new file ``plone.app.contenttypes.browser.templates.newsitem.pt`` and insert the following before the ``<div id=\"parent-fieldname-text\"``...:"
msgstr ""

#: ../zpt_2.rst:58
msgid "Since we use Plone 5 and Chameleon we could also write:"
msgstr ""

#: ../zpt_2.rst:66
msgid "Open an existing news item in the browser"
msgstr ""

#: ../zpt_2.rst:68
msgid "This will show something like: ``2015-02-21T12:01:31+01:00``. Not very user-friendly. Let's extend the code and use one of many helpers plone offers."
msgstr ""

#: ../zpt_2.rst:76
msgid "This will render ``Feb 21, 2015``."
msgstr ""

#: ../zpt_2.rst:78
msgid "``plone_view`` is the BrowserView ``Products.CMFPlone.browser.ploneview.Plone`` and it is defined in the ``main_template`` (Products/CMFPlone/browser/templates/main_template.pt) of Plone 5 like this ``plone_view context/@@plone;`` and thus always avaiable."
msgstr ""

#: ../zpt_2.rst:79
msgid "The method ``toLocalizedTime`` runs a date object through Plone's ``translation_service`` and returns the Date in the current locales format, thus transforming ``2015-02-21T12:01:31+01:00`` to ``Feb 21, 2015``."
msgstr ""

#: ../zpt_2.rst:80
msgid "With ``nocall:`` we prevent the method ``toLocalizedTime`` from being called, since we only want to make it available for use."
msgstr ""

#: ../zpt_2.rst:82
msgid "The same in a slightly different style:"
msgstr ""

#: ../zpt_2.rst:92
msgid "Here we first get the plone view and then the method ``toLocalizedTime`` and we use ``nocall:`` to prevent the method toLocalizedTime from being called, since we only want to make it available for later use."
msgstr ""

#: ../zpt_2.rst:96
msgid "On older Plone versions (using Archetypes) we used ``python:context.toLocalizedTime(context.Date(), longFormat=False)``. That called the python script ``toLocalizedTime.py`` in the Folder ``Products/CMFPlone/skins/plone_scripts/``."
msgstr ""

#: ../zpt_2.rst:98
msgid "That folder ``plone_scripts`` holds a multitude of useful scripts that are still widely used. But they are all deprecated and most of thme are gone in Plone 5 and replaced by proper python methods in browserviews."
msgstr ""

#: ../zpt_2.rst:101
msgid "We could also leave the formatting to the frontend. Plone 5 comes with the `moment pattern <http://plone.github.io/mockup/dev/#pattern/moment>`_ that uses the library `moment.js <http://plone.github.io/mockup/dev/#pattern/moment>`_ to format dates. Try the relative calendar format:"
msgstr ""

#: ../zpt_2.rst:110
msgid "Now we should see the date in a user-friendly format like ``Today at 12:01 PM``."
msgstr ""

#: ../zpt_2.rst:114
msgid "The moment pattern does not yet respect locales at the time of this writing, so you'd always get the US Format. That will hopefully change soon. See https://github.com/plone/mockup/issues/464#issuecomment-74671684"
msgstr ""

#: ../zpt_2.rst:120
msgid "The Summary View"
msgstr ""

#: ../zpt_2.rst:122
msgid "We use the view \"Summary View\" to list news releases. They should also have the date. The template associated with that view is ``listing_summary.pt``."
msgstr ""

#: ../zpt_2.rst:124
msgid "Let's look for the template folder_summary_view.pt::"
msgstr ""

#: ../zpt_2.rst:129
msgid "Copy it to ``browser/overrides/`` and rename it to ``plone.app.contenttypes.browser.templates.listing_summary.pt``."
msgstr ""

#: ../zpt_2.rst:131
msgid "Add the following after line 28:"
msgstr ""

#: ../zpt_2.rst:139
msgid "After you restart the instance and look at the new folder again you'll see the dates."
msgstr ""

#: ../zpt_2.rst:141
msgid "Our addition renders the date of the respective objects that the template iterates over (thus ``item`` instead of ``context`` since ``context`` would be either a collection aggregating the news items or a folder containing a news item)."
msgstr ""

#: ../zpt_2.rst:143
msgid "The date is only displayed if the variable ``item_type`` is ``News Item``."
msgstr ""

#: ../zpt_2.rst:145
msgid "Let's take a closer look at that template. How does it know that ``item_type`` is the name of the content type?"
msgstr ""

#: ../zpt_2.rst:147
msgid "The first step to uncovering that secret is line 12 of ``listing_summary.pt``:"
msgstr ""

#: ../zpt_2.rst:153
msgid "``use-macro`` tells Plone to reuse the macro ``entries`` from the view ``folder_listing``, and if that is not found use the same macro from the view ``standard_view``. Both views are defined in ``plone.app.contenttypes/plone/app/contenttypes/browser/configure.zcml``"
msgstr ""

#: ../zpt_2.rst:155
msgid "Both use different view classes and are allowed for different content types. The first is for folders the second for collections. But both use the same template ``plone/app/contenttypes/browser/templates/listing.pt``. That makes overriding that much easier :-)"
msgstr ""

#: ../zpt_2.rst:157
msgid "That template ``listing.pt`` defines the slot ``entries`` like this:"
msgstr ""

#: ../zpt_2.rst:184
msgid "Here the ``item_type`` is defined as ``item_type item/PortalType``. Let's dig a little deeper and find out what ``Ã¬tem`` and  ``PortalType`` are."
msgstr ""

#: ../zpt_2.rst:186
msgid "``tal:repeat=\"item batch\"`` tells the template to iterate over an iterable ``batch`` which is defined as ``batch view/batch``."
msgstr ""

#: ../zpt_2.rst:188
msgid "``view`` is always the BrowserView for which the template is registered. In our case this is either ``plone.app.contenttypes.browser.collection.CollectionView`` if you called that view on a collection, or ``plone.app.contenttypes.browser.folder.FolderView`` for folders. You might remember that both are defined in ``configure.zcml``"
msgstr ""

#: ../zpt_2.rst:190
msgid "Luckily the first is a class that inherits from the second:"
msgstr ""

#: ../zpt_2.rst:196
msgid "``batch`` is a method in ``FolderView`` that turns ``results`` into batches. ``results`` exists in both classes. This means, in case the item we are looking at is a collection the method ``results`` of ``CollectionView``, will be used and in case it's a folder the one in ``FolderView``."
msgstr ""

#: ../zpt_2.rst:198
msgid "To be continued..."
msgstr ""

#: ../zpt_2.rst:203
msgid "In Plone 4 without ``plone.app.contenttypes`` the template to customize would be ``folder_summary_view.pt``, a skin template for Archetypes that can be found in the folder ``Products/CMFPlone/skins/plone_content/``. The customzed template would be ``Products.CMFPlone.skins.plone_content.folder_summary_view.pt``."
msgstr ""

#: ../zpt_2.rst:205
msgid "The Archetypes template for News Items is ``newsitems_view.pt`` from the same folder. The customized template would then have to be named ``Products.CMFPlone.skins.plone_content.folder_summary_view.pt``."
msgstr ""

#: ../zpt_2.rst:207
msgid "Keep in mind that not only the names and locations have changed but also the content!"
msgstr ""

#: ../zpt_2.rst:213
msgid "Finding the right template"
msgstr ""

#: ../zpt_2.rst:215
msgid "We changed the display of the listing of news items at http://localhost:8080/Plone/news. But how do we know which template to customize?"
msgstr ""

#: ../zpt_2.rst:217
msgid "If you don't know which template is used by the page you're looking at you can make an educated guess, start a debug session or use ``plone.app.debugtoolbar``."
msgstr ""

#: ../zpt_2.rst:219
msgid "We could check the html with firebug and look for a structure in the content area that looks unique. We could also look for the css class of the body"
msgstr ""

#: ../zpt_2.rst:225
msgid "The class ``template-summary_view`` tells us that the name of the view (but not necessarily the name of the template) is ``summary_view``. So we could search all ``*.zcml``-Files for ``name=\"summary_view\"`` or search all templates calls ``summary_view.pt`` and probably find the view and also the corresponding template. But only probably because it would not tell us if the template is already being overridden."
msgstr ""

#: ../zpt_2.rst:227
msgid "The safest method is using ``plone.app.debugtoolbar``.  We already have it in our buildout and only need to install it. It adds a \"Debug\"-Dropdown on top of the page. The Section \"Published\" shows the complete path to the template that is used to render the page you are seeing."
msgstr ""

#: ../zpt_2.rst:231
msgid "plone.app.debugtoolbar is not yet compatible with Plone 5. It kind of works but looks really ugly..."
msgstr ""

#: ../zpt_2.rst:233
msgid "The debug session to find the template is a little more complicated. Since we have ``Products.PDBDebugMode`` in our buildout we can call ``/pdb`` on our page."
msgstr ""

#: ../zpt_2.rst:235
msgid "The object that the url points to is by default ``self.context``. But the first problem is that the url we're seeing is not the url of the collection where we want to modify since the collection is the default page of the folder ``news``."
msgstr ""

#: ../zpt_2.rst:254
msgid "Now we see that we already customized the template."
msgstr ""

#: ../zpt_2.rst:256
msgid "Here is a method that could be used in a view or viewlet to display that path :"
msgstr ""

#: ../zpt_2.rst:273
msgid "skin templates"
msgstr ""

#: ../zpt_2.rst:277
msgid "Why don't we always only use templates? Because we might want to do something more complicated than get an attribute from the context and render its value in some html tag."
msgstr ""

#: ../zpt_2.rst:279
msgid "There is a deprecated technology called 'skin templates' that allows you to simply add some page template (e.g. 'old_style_template.pt') to a certain folder in the ZMI or your egg and you can access it in the browser by opening a url like http://localhost:8080/Plone/old_style_template and it will be rendered. But we don't use it and you too should not, even though these skin templates are still all over Plone."
msgstr ""

#: ../zpt_2.rst:281
msgid "Since we use ``plone.app.contenttypes`` we do not encounter many skin templates when dealing with content any more. But more often than not you'll have to customize an old site that still uses skin templates."
msgstr ""

#: ../zpt_2.rst:283
msgid "Skin templates and python scripts in portal_skins are deprecated because:"
msgstr ""

#: ../zpt_2.rst:285
msgid "they use restricted python"
msgstr ""

#: ../zpt_2.rst:286
msgid "they have no nice way to attach python code to them"
msgstr ""

#: ../zpt_2.rst:287
msgid "they are always callable for everything (they can't easily be bound to an interface)"
msgstr ""

