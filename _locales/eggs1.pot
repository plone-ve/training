# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-05 05:00-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../eggs1.rst:4
msgid "Write Your Own Add-Ons to Customize Plone"
msgstr ""

#: ../eggs1.rst:0
msgid "Get the code!"
msgstr ""

#: ../eggs1.rst:8
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout directory:"
msgstr ""

#: ../eggs1.rst:17
msgid "In this part you will:"
msgstr ""

#: ../eggs1.rst:19
msgid "Create a custom python package ``ploneconf.site`` to hold all the code"
msgstr ""

#: ../eggs1.rst:20
msgid "Modify buildout to install that package"
msgstr ""

#: ../eggs1.rst:23
msgid "Topics covered:"
msgstr ""

#: ../eggs1.rst:25
msgid "mr.bob and bobtemplates.plone"
msgstr ""

#: ../eggs1.rst:26
msgid "the structure of eggs"
msgstr ""

#: ../eggs1.rst:30
msgid "Creating the package"
msgstr ""

#: ../eggs1.rst:32
msgid "Our own code has to be organised as a python package, also called *egg*. An egg is a zip file or a directory that follows certain conventions. We are going to use `bobtemplates.plone <https://pypi.python.org/pypi/bobtemplates.plone>`_ to create a skeleton project. We only need to fill in the blanks."
msgstr ""

#: ../eggs1.rst:36
msgid "``bobtemplates.plone`` is still under heavy development. Questions and the package it creates might change significantly until Plone 5 is finished. For this training use the current master at https://github.com/plone/bobtemplates.plone/tree/b09362f"
msgstr ""

#: ../eggs1.rst:38
msgid "We create and enter the ``src`` directory (*src* is short for *sources*) and call a script called ``mrbob`` from our buildout's bin directory:"
msgstr ""

#: ../eggs1.rst:46
msgid "We have to answer some questions about the addon. We will press :kbd:`Enter` (i.e. choosing the default value) for all questions except 3 (where you enter your github username if you have one) and 5 (Plone version), where we enter :kbd:`5.0`."
msgstr ""

#: ../eggs1.rst:66
msgid "If this is your first egg, this is a very special moment. We are going to create the egg with a script that generates a lot of necessary files. They all are necessary, but sometimes in a subtle way. It takes a while to understand their full meaning. Only last year I learnt and understood why I should have a ``manifest.in`` file. You can get along without one, but trust me, you get along better with a proper manifest file."
msgstr ""

#: ../eggs1.rst:72
msgid "Inspecting the package"
msgstr ""

#: ../eggs1.rst:74
msgid "In ``src`` there is now a new folder ``ploneconf.site`` and in there is the new package. Let's have a look at some of the files:"
msgstr ""

#: ../eggs1.rst:77
msgid "bootstrap-buildout.py, buildout.cfg, travis.cfg, .travis.yml, .coveragerc"
msgstr ""

#: ../eggs1.rst:77
msgid "You can ignore these files for now. They are here to create a buildout only for this egg to make testing it easier. Once we start writing tests for this package we will have another look at them."
msgstr ""

#: ../eggs1.rst:80
msgid "README.txt, CHANGES, CONTRIBUTORS, docs/"
msgstr ""

#: ../eggs1.rst:80
msgid "The documentation, changelog, the list of contributors and the license of your egg goes in there."
msgstr ""

#: ../eggs1.rst:83
msgid "setup.py"
msgstr ""

#: ../eggs1.rst:83
msgid "This file configures the package, its name, dependencies and some metadata like the author's name and email adress. The dependencies listed here are automatically downloaded when running buildout."
msgstr ""

#: ../eggs1.rst:88
msgid "src/ploneconf/site/"
msgstr ""

#: ../eggs1.rst:86
msgid "The package itself lives inside a special folder stucture. That seems confusing but is necessary for good testability. Our package is a `namespace package <https://www.python.org/dev/peps/pep-0420/>`_ called *ploneconf.site* and because of this there is a folder ``ploneconf`` with a ``__init__.py`` and in there another folder ``site`` and in there finally is our code. From the buildout's perspective our code is in ``<your buildout directory>/src/ploneconf.site/src/ploneconf/site/<real code>``"
msgstr ""

#: ../eggs1.rst:92
msgid "Unless discussing the buildout we will from now on silently omit these folders when describing files and assume that ``<your buildout directory>/src/ploneconf.site/src/ploneconf/site/`` is the root of our package!"
msgstr ""

#: ../eggs1.rst:96
msgid "configure.zcml (src/ploneconf/site/configure.zcml)"
msgstr ""

#: ../eggs1.rst:96
msgid "The phone book of the packages. By reading it you can find out which functionality is registered though the component architecture."
msgstr ""

#: ../eggs1.rst:99
msgid "setuphandlers.py (src/ploneconf/site/setuphandlers.py)"
msgstr ""

#: ../eggs1.rst:99
msgid "This holds code that is automatically run when installing and uninstalling our addon."
msgstr ""

#: ../eggs1.rst:102
msgid "interfaces.py (src/ploneconf/site/interfaces.py)"
msgstr ""

#: ../eggs1.rst:102
msgid "Here a browserlayer is defined in a straightforward python class. We will need it later."
msgstr ""

#: ../eggs1.rst:105
msgid "testing.py"
msgstr ""

#: ../eggs1.rst:105
msgid "This holds the setup for running tests."
msgstr ""

#: ../eggs1.rst:108
msgid "tests/"
msgstr ""

#: ../eggs1.rst:108
msgid "This holds the tests."
msgstr ""

#: ../eggs1.rst:111
msgid "browser/"
msgstr ""

#: ../eggs1.rst:111
msgid "This directory is a python package (because it has a ``__init__.py``) and will by convention hold most things that are visible in the browser."
msgstr ""

#: ../eggs1.rst:114
msgid "browser/configure.zcml"
msgstr ""

#: ../eggs1.rst:114
msgid "The phonebook of the browser directory. Here views, resources and overrides are registered."
msgstr ""

#: ../eggs1.rst:117
msgid "browser/views.py"
msgstr ""

#: ../eggs1.rst:117
#: ../eggs1.rst:120
msgid "xxx"
msgstr ""

#: ../eggs1.rst:120
msgid "browser/templates/demoview.pt"
msgstr ""

#: ../eggs1.rst:123
msgid "static/"
msgstr ""

#: ../eggs1.rst:123
msgid "A directory that holds static resources (images/css/js). The files in there will be accessible through URLs like ``++resource++ploneconf.site/myawesome.css``"
msgstr ""

#: ../eggs1.rst:126
msgid "profiles/default/"
msgstr ""

#: ../eggs1.rst:126
msgid "The folder contains the GenericSetup profile. During the training will put some xml files there that hold configuration for the site."
msgstr ""

#: ../eggs1.rst:129
msgid "profiles/default/metadata.xml"
msgstr ""

#: ../eggs1.rst:129
msgid "Version number and dependencies that are auto-installed when installing our addon."
msgstr ""

#: ../eggs1.rst:138
msgid "Including the package in Plone"
msgstr ""

#: ../eggs1.rst:140
msgid "Before we can use our new package we have to tell Plone about it. Edit ``buildout.cfg`` and uncomment ``ploneconf.site`` in the sections `auto-checkout`, `eggs` and `test`:"
msgstr ""

#: ../eggs1.rst:187
msgid "This tells Buildout to add the egg ``ploneconf.site``. Since it is also in the `sources` section buildout will not try to download it from pypi but will expect it in ``src/ploneconf.site``. *fs* allows you to add packages on the filesystem without a version control system, or with an unsupported one."
msgstr ""

#: ../eggs1.rst:189
msgid "Now run buildout to reconfigure Plone with the updated configuration:"
msgstr ""

#: ../eggs1.rst:195
msgid "After restarting Plone with ``./bin/instance fg`` the new addon `ploneconf.site` is available for install like PloneFormGen or Plone True Gallery."
msgstr ""

#: ../eggs1.rst:197
msgid "We will not install it now since we did not add any of our own code or configuration yet. Let's do that."
msgstr ""

