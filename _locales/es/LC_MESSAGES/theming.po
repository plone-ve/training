# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Plone Training package.
# 
# Translators:
# Leonardo J. Caballero G. <leonardocaballero@gmail.com>, 2014-2015
msgid ""
msgstr ""
"Project-Id-Version: Plone 5 Training\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-02 12:20-0400\n"
"PO-Revision-Date: 2016-11-05 17:16+0000\n"
"Last-Translator: Leonardo J. Caballero G. <leonardocaballero@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/plone/plone5-training/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../theming/adv-diazo.rst:3
msgid "Advanced Diazo"
msgstr ""

#: ../theming/adv-diazo.rst:5
msgid ""
"**\"Diazo allows you to apply a theme contained in a static HTML web page to"
" a dynamic website created using any server-side technology.\"**"
msgstr ""

#: ../theming/adv-diazo.rst:7
msgid ""
"To do this, Diazo does some real complicated stuff on your behalf: it writes"
" XSLT!"
msgstr ""

#: ../theming/adv-diazo.rst:9
msgid ""
"But sometimes basic rules are not enough and you need to write a bit of XLST"
" yourself."
msgstr ""

#: ../theming/adv-diazo.rst:13
msgid "Modify the theme and the content on the fly"
msgstr ""

#: ../theming/adv-diazo.rst:15
msgid ""
"Let's look at some examples from the `official diazo docs "
"<http://docs.diazo.org/en/latest/advanced.html#modifying-the-theme-on-the-"
"fly>`_."
msgstr ""

#: ../theming/adv-diazo.rst:19
msgid "Extend rules"
msgstr ""

#: ../theming/adv-diazo.rst:21
msgid ""
"You can `re-use or extend rules "
"<http://docs.diazo.org/en/latest/advanced.html#xinclude>`_ from another "
"theme or from another file in your theme."
msgstr ""

#: ../theming/adv-diazo.rst:24
msgid ""
"A good example of a use case is the one described by `Asko Soukka "
"<https://twitter.com/datakurre>`_  (thanks!!!) in this blog post about `how "
"to  Customize Plone 5 default theme on the fly "
"<http://datakurre.pandala.org/2015/05/customize-plone-5-default-theme-on-"
"fly.html>`_."
msgstr ""

#: ../theming/adv-diazo.rst:30
msgid "Include external content"
msgstr ""

#: ../theming/adv-diazo.rst:32
msgid ""
"You can `include external content "
"<http://docs.diazo.org/en/latest/advanced.html#including-external-content>`_"
" from another website or from a custom view."
msgstr ""

#: ../theming/adv-diazo.rst:37
msgid "Recipes and snippets"
msgstr ""

#: ../theming/adv-diazo.rst:39
msgid ""
"The docs provide `a basic recipe set "
"<http://docs.diazo.org/en/latest/recipes/index.html>`_ and you can have your"
" own, but how to remember and re-use them?"
msgstr ""

#: ../theming/adv-diazo.rst:42
msgid ""
"`David Bain introduces a \"diazo snippets library\" "
"<http://blog.dbain.com/2014/12/introducing-diazo-snippets-library.html>`_ "
"that allows you to get snippets from a chrome extensions. `All the snippets "
"are available here <http://pigeonflight.github.io/lessArcane/>`_."
msgstr ""

#: ../theming/adv-diazo.rst:48
msgid "More snippets"
msgstr ""

#: ../theming/adv-diazo.rst:51
msgid "Make some links open in new window"
msgstr ""

#: ../theming/adv-diazo.rst:60
msgid ""
"At diazo.org is another way described in the recipes: "
"http://docs.diazo.org/en/latest/recipes/adding-an-attribute/index.html"
msgstr ""

#: ../theming/adv-diazo.rst:63
msgid "Add CSS marker classes depending on existing ``portal-columns``"
msgstr ""

#: ../theming/adv-diazo.rst:65
msgid ""
"This adds a CSS class for every existing ``portal-column`` to the ``body`` "
"tag. If ``portal-column-one`` exists, we add ``col-one``; if ``portal-"
"column-content`` exists, we add ``col-content``; and if ``portal-column-"
"two`` exists, we add ``col-two``."
msgstr ""

#: ../theming/adv-diazo.rst:81
msgid ""
"Now, one can use these markers to define the grid in a semantic way like "
"this:"
msgstr ""

#: ../theming/adv-diazo.rst:112
msgid ""
"This way, you don't need the xsl-rules Barceloneta uses to create the main "
"content area. It's more flexible than Barceloneta's approach. Another way "
"could be, to change Plone to provide these classes already ;)."
msgstr ""

#: ../theming/adv-diazo.rst:116
msgid "Move Plone elements around"
msgstr ""

#: ../theming/adv-diazo.rst:118
msgid ""
"Sometimes one needs to move Plone elements from one place to another or "
"merge some elements together. In the following example we merge the language"
" flags together with the document actions."
msgstr ""

#: ../theming/adv-diazo.rst:134
msgid "Taking over specific portlets"
msgstr ""

#: ../theming/adv-resource-registry.rst:3
msgid "Advanced resources registry usage"
msgstr ""

#: ../theming/adv-resource-registry.rst:5
msgid ""
"For theming in general you don't need to use the ``resource registry``. The "
"following infos stay here only as an example usage of the ``resource "
"registry``."
msgstr ""

#: ../theming/adv-resource-registry.rst:7
msgid ""
"In the Plone ``resource registry`` we can register our static resources, "
"like CSS and LESS files and also JavaScript resources. In fact even our "
"resources we defined in the manifest.xml are registered here automatically, "
"but hidden. We will cover here only CSS and LESS, but you can also do nice "
"things with your JavaScript resources (for example using ``requirejs`` to do"
" the import correctly without worrying about import order). For details "
"about this, look into the documentation of the ``resource registry`` and in "
"the JavaScript part of the training."
msgstr ""

#: ../theming/adv-resource-registry.rst:18
msgid "Registering CSS/Less resources in the registry"
msgstr ""

#: ../theming/adv-resource-registry.rst:20
msgid ""
"Because of the flexibility of Less over CSS we will use only Less files "
"here, but static CSS files can be registered in the same way. Less files "
"have the advantage that we can use imports, and with ``reference-imports`` "
"we can even import only the parts of the files which we are really using."
msgstr ""

#: ../theming/adv-resource-registry.rst:25
msgid ""
"Let's see how we can register a resource in the resource registry. To do "
"that, we add an ``IResourceRegistry`` entry into the :file:`registry.xml` in"
" our :file:`profiles/default` folder:"
msgstr ""

#: ../theming/adv-resource-registry.rst:41
msgid ""
"This registers a file named :file:`main.less` (from our theme package named "
":file:`plonetheme.tango`) as a *resource* named ``tango-main``. We can now "
"add this resource to a *resource bundle* like the existing ``plone`` bundle:"
msgstr ""

#: ../theming/adv-resource-registry.rst:64
msgid ""
"This has the advantage of reducing the number of bundles, which also means "
"reducing the amount of files which are loaded for the site, because every "
"bundle will result in *one* compiled CSS file and *one* compiled JavaScript "
"file. So if we have multiple LESS resources in the same bundle, they will be"
" merged into one compiled CSS file."
msgstr ""

#: ../theming/adv-resource-registry.rst:69
msgid "We can also create our own custom bundle which contains our resource:"
msgstr ""

#: ../theming/adv-resource-registry.rst:95
msgid ""
"This can make sense if we only want to load that bundle under certain "
"conditions, like in a specific context. This could lead to a smaller size of"
" loaded static resources, when they are not all needed."
msgstr ""

#: ../theming/adv-resource-registry.rst:99
msgid ""
"After making changes to the registry, like adding resources to a bundle, you"
" have to reload the registry configuration via an upgrade step, or via a "
"uninstall/install of the package."
msgstr ""

#: ../theming/adv-resource-registry.rst:102
msgid ""
"If you change a bundle, it has to be built or rebuilt. You can do this in "
"the ``@@resourceregistry-controlpanel`` by clicking on *Build* for the "
"bundle involved."
msgstr ""

#: ../theming/basic.rst:3
msgid "Basic: Customizing logo and CSS of default theme"
msgstr ""

#: ../theming/basic.rst:5 ../theming/ttw-advanced.rst:5
#: ../theming/ttw-advanced_2.rst:5
msgid "In this section you will:"
msgstr ""

#: ../theming/basic.rst:7
msgid "Use the Site control panel to add a custom logo"
msgstr ""

#: ../theming/basic.rst:8
msgid "Customize the look of a Plone site by adjusting Less Variables"
msgstr ""

#: ../theming/basic.rst:9
msgid "Add a custom toolbar logo"
msgstr ""

#: ../theming/basic.rst:11 ../theming/ttw-advanced.rst:11
#: ../theming/ttw-advanced_2.rst:13
msgid "Topics covered:"
msgstr ""

#: ../theming/basic.rst:13
msgid "The \"Site\" control panel"
msgstr ""

#: ../theming/basic.rst:14
msgid "The \"Resource Registries\" Control Panel"
msgstr ""

#: ../theming/basic.rst:15
msgid "Resource Registries > Development Mode"
msgstr ""

#: ../theming/basic.rst:18
msgid "Customize logo"
msgstr ""

#: ../theming/basic.rst:20
msgid ""
"Go to the Plone Control Panel: :menuselection:`toolbar --> admin --> Site "
"Setup`"
msgstr ""

#: ../theming/basic.rst:21
msgid "Go to the \"Site\" control panel."
msgstr ""

#: ../theming/basic.rst:22
msgid "You will see this form:"
msgstr ""

#: ../theming/basic.rst:26
msgid "You can now add / remove your custom logo"
msgstr ""

#: ../theming/basic.rst:28
msgid ""
"See the `official docs <http://docs.plone.org/adapt-and-extend/change-the-"
"logo.html>`_."
msgstr ""

#: ../theming/basic.rst:32
msgid "Customize CSS/Less variables"
msgstr ""

#: ../theming/basic.rst:34
msgid "Go back to the Control Panel."
msgstr ""

#: ../theming/basic.rst:35
msgid "Go to the :guilabel:`Resource Registries` control panel."
msgstr ""

#: ../theming/basic.rst:36
msgid "On the first tab: enable :guilabel:`Development Mode`."
msgstr ""

#: ../theming/basic.rst:37
msgid "In the \"plone\" bundle below, click on \"develop CSS\"."
msgstr ""

#: ../theming/basic.rst:39
msgid "Your panel should now look like this:"
msgstr ""

#: ../theming/basic.rst:45
msgid "Now we can play with some Less variables:"
msgstr ""

#: ../theming/basic.rst:47
msgid "Go to the :guilabel:`Less Variables` tab."
msgstr ""

#: ../theming/basic.rst:48
msgid "Find the variable ``plone-left-toolbar-expanded`` and set it to 400px."
msgstr ""

#: ../theming/basic.rst:54
msgid ""
"Hit the :guilabel:`Save` button in the upper right and reload the page."
msgstr ""

#: ../theming/basic.rst:55
msgid "Click on the toolbar logo to expand the toolbar: voilá!"
msgstr ""

#: ../theming/basic.rst:57
msgid "You can play around with some other variables, if you want."
msgstr ""

#: ../theming/basic.rst:61
msgid ""
"\"Development Mode\" is really expensive for the browser. Depending on the "
"browser and on the system, you might encounter extreme slowness while "
"rendering the page. You could see an unthemed page for a while. Remember to "
"switch it off as soon as you finished tweaking."
msgstr ""

#: ../theming/collective-jbot.rst:3
msgid "Customize template on the fly: collective.jbot"
msgstr ""

#: ../theming/collective-jbot.rst:7
msgid "Not yet compatible with Plone 5!"
msgstr ""

#: ../theming/collective-jbot.rst:10
msgid ""
"Back in the old days we used to customize views' templates from the tool "
"`portal_view_customizations` from the ZMI."
msgstr ""

#: ../theming/collective-jbot.rst:12
msgid "This tool has no UI and could beat you whenever you don't expect it."
msgstr ""

#: ../theming/collective-jbot.rst:14
msgid ""
"So, `Nathan Van Gheem <https://twitter.com/vangheezy>`_ has created this "
"package that unfortunately is not (yet!) part of the core: `collective.jbot "
"<https://github.com/collective/collective.jbot>`_."
msgstr ""

#: ../theming/collective-jbot.rst:16
msgid ""
"This package uses the well-known `z3c.jbot` under the hood and allows you to"
" customize templates TTW from the control panel."
msgstr ""

#: ../theming/collective-jbot.rst:19 ../theming/ttw-advanced.rst:21
msgid "Installation"
msgstr "Instalación"

#: ../theming/collective-jbot.rst:21 ../theming/collective-jbot.rst:27
msgid "TODO"
msgstr "TODO"

#: ../theming/collective-jbot.rst:25
msgid "Usage"
msgstr ""

#: ../theming/collective-jbot.rst:29
msgid "SCREENSHOTS"
msgstr ""

#: ../theming/collective-jbot.rst:32
msgid "Additional goodie"
msgstr ""

#: ../theming/collective-jbot.rst:34
msgid ""
"Overrides are stored on the filesystem and you can version / backup them as "
"you like!"
msgstr ""

#: ../theming/creating-customizing-templates.rst:3
msgid "Creating and customizing Plone templates"
msgstr ""

#: ../theming/creating-customizing-templates.rst:6
msgid "Overriding a Plone template"
msgstr ""

#: ../theming/creating-customizing-templates.rst:8
msgid ""
"A large part of the Plone UI is provided by BrowserView and Viewlet "
"templates."
msgstr ""

#: ../theming/creating-customizing-templates.rst:10
msgid ""
"You can see all viewlets and their managers (sortable containers) when you "
"view the URL ``./@@manage-viewlets``)."
msgstr ""

#: ../theming/creating-customizing-templates.rst:15
msgid ""
"To override them from the ZMI, you can go to "
"``./portal_view_customizations``. But this is very limited and does not work"
" for all views."
msgstr ""

#: ../theming/creating-customizing-templates.rst:18
msgid ""
"To override them from your theme product, the easiest way is to use "
"``z3c.jbot`` (Just a Bunch of Templates)."
msgstr ""

#: ../theming/creating-customizing-templates.rst:21
msgid ""
"Since jbot is already included in the ``bobtemplates.plone`` theme skeleton "
"via ``plone.app.themingplugins``, you can start using it immediately by "
"adding all the templates you want to override in the "
"``src/plonetheme/tango/theme/template-overrides`` directory."
msgstr ""

#: ../theming/creating-customizing-templates.rst:26
msgid ""
"In order for jbot to match the override to the template which is being "
"overridden, the name of the *new* template needs to include the complete "
"path to the original template as a prefix (with every ``/`` replaced by "
"``.``)."
msgstr ""

#: ../theming/creating-customizing-templates.rst:31
msgid ""
"For instance, to override ``path_bar.pt`` (the breadcrumbs) from "
"``plone.app.layout``, knowing that this template is found in a sub folder "
"named ``viewlets``, you need to name the overriding template "
"``plone.app.layout.viewlets.path_bar.pt``."
msgstr ""

#: ../theming/creating-customizing-templates.rst:35
msgid ""
"Clicking the template in ZMI > portal_view_customizations is a handy way to "
"find the template path. You can also copy the original template's code here."
msgstr ""

#: ../theming/creating-customizing-templates.rst:37
msgid ""
"When a new override has been added, the Plone instance needs to be "
"restarted. After this, you can just refresh the page to see any changes to "
"the template."
msgstr ""

#: ../theming/creating-customizing-templates.rst:42
msgid "Overriding Event Item template"
msgstr ""

#: ../theming/creating-customizing-templates.rst:44
msgid ""
"The path to the original template is "
":file:`plone/app/event/browser/event_view.pt`, so the full dotted name for "
"our replacement template should be: "
"``plone.app.event.browser.event_view.pt``. Create a new file with this "
"dotted name into the ``template-overrides`` folder."
msgstr ""

#: ../theming/creating-customizing-templates.rst:49
msgid ""
"Let's say we want to move the full text of the event item to appear before "
"the event details block. To do this, we copy over the original template code"
" and change the order of the two blocks:"
msgstr ""

#: ../theming/creating-customizing-templates.rst:54
msgid ""
"If your buildout is using ``omelette``, you can find the original template "
"in ``buildout/parts/omelette/plone/app/event/browser``."
msgstr ""

#: ../theming/creating-customizing-templates.rst:96
msgid "You can now restart Plone and view an event to see the effect."
msgstr ""

#: ../theming/creating-customizing-templates.rst:99
msgid "Creating a new Plone template"
msgstr ""

#: ../theming/creating-customizing-templates.rst:104
msgid "Create dynamic slider content in Plone"
msgstr ""

#: ../theming/creating-customizing-templates.rst:106
msgid ""
"To render our dynamic content for the slider we need a custom view in Plone."
" There are various ways to create Views. For now, we will use a very simple "
"template-only-view via jbot and ``themingplugins``. The "
"``bobtemplates.plone`` skeleton includes everything you need."
msgstr ""

#: ../theming/creating-customizing-templates.rst:112
msgid ""
"The only thing we need to do, is to add a template file in the "
"``theme/views`` folder. Here we create a template file named ``slider-"
"images.pt``. Luckily we already have this file as an example. So the only "
"thing we need to do is, to rename the file ``slider-images.pt.examle```to "
"``slider-images.pt``."
msgstr ""

#: ../theming/creating-customizing-templates.rst:121
msgid "The template code looks like this:"
msgstr ""

#: ../theming/creating-customizing-templates.rst:152
msgid ""
"This is all that's required to create a very simple template-only View. You "
"can test the view after restarting your Plone instance. For the View to show"
" up, it needs some images to display. To supply the images, we have to "
"create a folder in Plone named ``slider-images`` and add some images there."
msgstr ""

#: ../theming/creating-customizing-templates.rst:158
msgid ""
"we will show you later how to :ref:`creating-initial-content-for-the-theme`"
msgstr ""

#: ../theming/creating-customizing-templates.rst:160
msgid ""
"Now we can browse to the View on this folder by visiting: "
"http://localhost:8080/Plone/slider-images/@@slider-images This will render "
"the markup required to render the slider."
msgstr ""

#: ../theming/creating-customizing-templates.rst:166
msgid "Take over the dynamic slider content from Plone"
msgstr ""

#: ../theming/creating-customizing-templates.rst:168
msgid ""
"Now that we have our ``slider-images`` View which renders our HTML markup "
"for the slider, we need to include that on the front page. For that, we use "
"Diazo's ability to load the content from other URLs, using the ``href`` "
"attribute in our ``rules.xml``:"
msgstr ""

#: ../theming/creating-initial-content-for-the-theme.rst:5
msgid "Creating initial content for the theme"
msgstr ""

#: ../theming/creating-initial-content-for-the-theme.rst:7
msgid ""
"Our theme relies on some initial content structure, specifically the :file"
":`slider-images` folder with some images inside. Let's improve our theme "
"package to create this content on install."
msgstr ""

#: ../theming/creating-initial-content-for-the-theme.rst:11
msgid ""
"To do that we create the :file:`slider-images` folder in our "
":file:`setuphandlers.py` and load also some example images into that folder."
msgstr ""

#: ../theming/creating-initial-content-for-the-theme.rst:14
msgid ""
"We have the needed images inside ``theme/img`` folder. To create the folder "
"and the immages put the following code in your setuphandlers.py."
msgstr ""

#: ../theming/creating-initial-content-for-the-theme.rst:82
msgid ""
"After adding this code to the setuphandlers.py, we need to restart Plone and"
" uninstall/install our theme package."
msgstr ""

#: ../theming/custom-components.rst:3
msgid "Creating custom components"
msgstr ""

#: ../theming/custom-components.rst:5
msgid ""
"Plone is a very powerful system and it provides many interesting things for "
"you. To dive into this, we recommend to go thru the ``Mastering Plone 5: "
"Development`` of the training."
msgstr ""

#: ../theming/custom-components.rst:8
msgid ""
"For theming the most relevant part are the following components, which "
"render some parts of Plone, you may want to customize or build new once."
msgstr ""

#: ../theming/custom-components.rst:11
msgid "Views"
msgstr "Vistas"

#: ../theming/custom-components.rst:13
msgid ""
"In Plone a view usually consists of multiple components, a Python class "
"based on BrowserView and a template which renders the markup. You as you "
"have already seen, you can also have template only iews. It is also possible"
" to have a view which has no template, but renders the output by it self, as"
" JSON for example."
msgstr ""

#: ../theming/custom-components.rst:16
msgid ""
"For more details about views and there possibilities see the view sections "
"of the ``Mastering Plone 5: Development`` chapters."
msgstr ""

#: ../theming/custom-components.rst:19
msgid "Viewlets"
msgstr "Viewlets"

#: ../theming/custom-components.rst:21
msgid ""
"Viewlets are small pieces which are rendered inside a view. The are "
"registered for a ordered ViewletManager, which renders all Viewlets in the "
"given order. You can change the order even TTW or via configuration. A "
"Viewlet consists of a Viewlet Python class and a template. Plone many "
"default Viewlets and ViewletManagers like ContentAbove and BelowContent "
"which you can use to register small pieces of functionality."
msgstr ""

#: ../theming/custom-components.rst:24
msgid ""
"For an overview of existing Viewlets and ViewletManagers look at the "
"``/@@manage-viewlets`` view."
msgstr ""

#: ../theming/custom-components.rst:26
msgid ""
"For more details about Viewlets/ViewletManagers and there possibilities see "
"the Viewlets sections of the ``Mastering Plone 5: Development`` chapters."
msgstr ""

#: ../theming/custom-components.rst:29
msgid "Portlets"
msgstr "Portlets"

#: ../theming/custom-components.rst:31
msgid ""
"Portlets are a very flexible way of providing context related information in"
" the right, left or footer area."
msgstr ""

#: ../theming/custom-components.rst:33
msgid ""
"For details on how to use, configure and create Portlets, look into the "
"Plone docs `Plone docs Portlet sections "
"<http://docs.plone.org/develop/plone/functionality/portlets.html>`_"
msgstr ""

#: ../theming/index.rst:4
msgid "Mastering Plone Theming"
msgstr ""

#: ../theming/index.rst:25
msgid ":ref:`ttw-label`"
msgstr ""

#: ../theming/index.rst:26
msgid "http://docs.plone.org/adapt-and-extend/theming/index.html"
msgstr "http://docs.plone.org/adapt-and-extend/theming/index.html"

#: ../theming/static-theme.rst:3
msgid "Make it reproducible: static theme"
msgstr ""

#: ../theming/static-theme.rst:5
msgid "You just created your shiny brand new theme TTW."
msgstr ""

#: ../theming/static-theme.rst:7
msgid "For more TTW configuring and customizing options, see :ref:`ttw-label`"
msgstr ""

#: ../theming/static-theme.rst:9
msgid "Now, let's see how you can reuse it in another Plone site."
msgstr ""

#: ../theming/static-theme.rst:11
msgid "go back to \"Theming\" control panel"
msgstr ""

#: ../theming/static-theme.rst:12
msgid "click the \"Download\" button in the box of your theme"
msgstr ""

#: ../theming/static-theme.rst:13
msgid "the browser will download a zip file"
msgstr ""

#: ../theming/static-theme.rst:14
msgid "go to the ZMI root"
msgstr ""

#: ../theming/static-theme.rst:15
msgid "create a new plone site"
msgstr ""

#: ../theming/static-theme.rst:16
msgid "go to \"Theming\" control panel"
msgstr ""

#: ../theming/static-theme.rst:17
msgid "click on \"Upload zip file\" and select your theme"
msgstr ""

#: ../theming/static-theme.rst:18
msgid "tick \"Immediately enable new theme\" and click on \"import\""
msgstr ""

#: ../theming/static-theme.rst:19
msgid "go back to your plone site: voilá!"
msgstr ""

#: ../theming/theme-package.rst:3
msgid "Create a Plone Theme python package"
msgstr ""

#: ../theming/theme-package.rst:5
msgid ""
"Creating a theme product with the Diazo inline editor is an easy way to "
"start and to test, but it is not a solid long term solution and you are also"
" limited in what you can do that way."
msgstr ""

#: ../theming/theme-package.rst:9
msgid ""
"Even if :py:mod:`plone.app.theming` allows importing and exporting of a "
"Diazo theme as a ZIP archive, it might be preferable to manage your theme as"
" an actual Plone product."
msgstr ""

#: ../theming/theme-package.rst:13
msgid ""
"One of the most obvious reasons is that it will allow you to override Plone "
"elements that are not accessible via pure Diazo features (such as "
"overloading content view templates, viewlets, configuration settings, etc.)."
msgstr ""

#: ../theming/theme-package.rst:19
msgid "Preparing your setup"
msgstr ""

#: ../theming/theme-package.rst:22
msgid "Install npm"
msgstr ""

#: ../theming/theme-package.rst:24
msgid ""
"If you don't have already installed ``npm`` on your system please do it. Npm"
" comes with nodejs, we just need to install ``npm``. On Debian/Ubuntu for "
"example you can do this with apt:"
msgstr ""

#: ../theming/theme-package.rst:32
msgid ""
"If you need a newer version of ``ǹpm`` just update your version with ``npm``"
" it self:"
msgstr ""

#: ../theming/theme-package.rst:40
msgid "Installing Grunt"
msgstr ""

#: ../theming/theme-package.rst:42
msgid ""
"We also need to install ``grunt-cli`` globaly. If you already have it, you "
"can skip this step."
msgstr ""

#: ../theming/theme-package.rst:49
msgid ""
"If you get an error with node on Debian/Ubuntu, please check if you already "
"have /usr/bin/node if not create a symlink like: ``ln -s /usr/bin/nodejs "
"/usr/bin/node``."
msgstr ""

#: ../theming/theme-package.rst:52
msgid "virtualenv and mr.bob"
msgstr ""

#: ../theming/theme-package.rst:54
msgid "First let's create a Python virtualenv:"
msgstr ""

#: ../theming/theme-package.rst:60
msgid "Then we enable the virtualenv:"
msgstr ""

#: ../theming/theme-package.rst:69
msgid "Create a product to handle your Diazo theme"
msgstr ""

#: ../theming/theme-package.rst:71
msgid ""
"To create a Plone 5 theme skeleton, you will use mr.bob's templates for "
"Plone."
msgstr ""

#: ../theming/theme-package.rst:75
msgid "Install mr.bob and bobtemplates.plone"
msgstr ""

#: ../theming/theme-package.rst:77
msgid "To install :py:mod:`mr.bob`, you can use :command:`pip`:"
msgstr ""

#: ../theming/theme-package.rst:83
msgid "and to install the required bobtemplates for Plone, do:"
msgstr ""

#: ../theming/theme-package.rst:89
msgid "after bobtemplates.plone >= 1.0.5 is released do:"
msgstr ""

#: ../theming/theme-package.rst:95
msgid "Create a Plone 5 theme product skeleton with :command:`mrbob`:"
msgstr ""

#: ../theming/theme-package.rst:101
msgid "It will ask you some question::"
msgstr ""

#: ../theming/theme-package.rst:105
msgid ""
"Here, choose \"Theme\" and fill out the rest of the questions however you "
"like::"
msgstr ""

#: ../theming/theme-package.rst:121
msgid "Now you have a new Python package in your current folder:"
msgstr ""

#: ../theming/theme-package.rst:130
msgid "Deactivate mrbob virtualenv:"
msgstr ""

#: ../theming/theme-package.rst:138
msgid "Install Buildout and boostrap your development environment"
msgstr ""

#: ../theming/theme-package.rst:140
msgid ""
"You can install Buildout globally or on a virtualenv. To install zc.buildout"
" globally:"
msgstr ""

#: ../theming/theme-package.rst:151
msgid "Now you have everything in place and you can run buildout:"
msgstr ""

#: ../theming/theme-package.rst:157
msgid "This will create the whole development environment for your package:"
msgstr ""

#: ../theming/theme-package.rst:176
msgid "Inspect your package source"
msgstr ""

#: ../theming/theme-package.rst:178
msgid "Your package source code is in the ``src`` folder:"
msgstr ""

#: ../theming/theme-package.rst:336
msgid ""
"As you can see, the package already contains a Diazo theme including "
"Barceloneta resources:"
msgstr ""

#: ../theming/theme-package.rst:374
msgid ""
"This theme basically provides you with a copy of the Plone 5 default theme "
"(Barceloneta), and you can change everything you need to create your own "
"theme. The Barceloneta resources are in the folder barceloneta. This is "
"basically a copy of the theme folder of plonetheme.barceloneta. We removed "
"some unneeded files there, because we only need the LESS part for partially "
"including it in our theme.less. We also have the icons and the backend.xml "
"from Barceloneta in our them folder."
msgstr ""

#: ../theming/theme-package.rst:376
msgid ""
"In ``theme/less`` we have our CSS/LESS files. Our own CSS goes into "
"custom.less. You can also add more LESS files and include them in "
"``theme.less``, if you have a loot of custom CSS."
msgstr ""

#: ../theming/theme-package.rst:378
msgid ""
"The ``theme.less`` is our main LESS file. Here we include all other files we"
" need. It already has some includes of Barceloneta, Bootstrap and our "
"``custom.less`` at the bottom."
msgstr ""

#: ../theming/theme-package.rst:381
msgid ""
"We also have a package.json, in which we can define external dependencies "
"like Bootstrap or other CSS/JS packages we want to use in our theme, see "
":ref:`install-ext-packages-with-npm`."
msgstr ""

#: ../theming/theme-package.rst:385
msgid "Start Plone and install your theme product"
msgstr ""

#: ../theming/theme-package.rst:387
msgid "To start the Plone instance, run:"
msgstr ""

#: ../theming/theme-package.rst:393
msgid ""
"The Plone instance will then run on http://localhost:8080. The default "
"username and password is ``admin / admin``. Add a Plone site ``Plone``. Then"
" activate/install your theme product on "
"http://localhost:8080/Plone/prefs_install_products_form. The theme will be "
"automatically enabled. If something is wrong with the theme, you can always "
"go to http://localhost:8080/Plone/@@theming-controlpanel and disable it. "
"This control panel will never be themed, so it works even if the theme might"
" be broken."
msgstr ""

#: ../theming/theme-package.rst:403
msgid "Build your Diazo-based theme"
msgstr ""

#: ../theming/theme-package.rst:405
msgid ""
"You can start with the example files in the theme folder and just change the"
" index.html and custom.less file to customize the default theme to your "
"needs. As stated above it's the Plone 5 default ``Barceloneta`` theme plus "
"some custom files you can use to to override or write css/less."
msgstr ""

#: ../theming/theme-package.rst:409
msgid "Use your own static mockup"
msgstr ""

#: ../theming/theme-package.rst:411
msgid ""
"If you got a static mockup from your designer or from a website like "
"http://startbootstrap.com (where the example theme came from), you can use "
"this without customization and just apply the Diazo rules to it."
msgstr ""

#: ../theming/theme-package.rst:415
msgid ""
"Another way is to change the static mockup a little bit is to use mostly the"
" same CSS ids and classes. This way it is easier to reuse CSS/LESS from "
"Barceloneta theme and Plone add-ons if needed."
msgstr ""

#: ../theming/theme-package.rst:421
msgid "Download and prepare a static theme"
msgstr ""

#: ../theming/theme-package.rst:423
msgid ""
"Let's start with an untouched static theme, such as this bootstrap theme: "
"http://startbootstrap.com/template-overviews/business-casual/. Just download"
" it and extract it into the theme folder. Replace the ``index.html`` with "
"the one in the downloaded theme:"
msgstr ""

#: ../theming/theme-package.rst:492
msgid "Preparing the template"
msgstr ""

#: ../theming/theme-package.rst:494
msgid ""
"To make the given ``index.html`` more useful, we customize it a little bit. "
"Right before the second box which contains:"
msgstr ""

#: ../theming/theme-package.rst:507
msgid "Add this:"
msgstr ""

#: ../theming/theme-package.rst:519
msgid ""
"And then move the main content (the box 2 and box 3 including the parent row"
" ``div``) into the ``content-container``."
msgstr ""

#: ../theming/theme-package.rst:522
msgid "It should look like this:"
msgstr ""

#: ../theming/theme-package.rst:565
msgid "Include theme CSS"
msgstr ""

#: ../theming/theme-package.rst:567
msgid ""
"We need to include the CSS from the theme into our ``theme.less`` file:"
msgstr ""

#: ../theming/theme-package.rst:668
msgid ""
"Here we mainly add the include of the css the theme provides us in "
"``theme/css/business-casual.css`` after the END OF UTILS marker, but before "
"the custom.less include. We include the CSS file here as a LESS file. This "
"way we can extend parts of the CSS in our theme, like we will do with the "
"``.box`` below."
msgstr ""

#: ../theming/theme-package.rst:670
msgid ""
"Don't forget to run ``grunt compile`` in your package root, after you "
"changed the LESS files or use ``grunt watch`` to do this automatically after"
" every change!"
msgstr ""

#: ../theming/theme-package.rst:673
msgid "Using Diazo rules to map the theme with Plone content"
msgstr ""

#: ../theming/theme-package.rst:675
msgid ""
"Now that we have the static theme, we need to apply the Diazo rules in "
":file:`rules.xml` to map the Plone content elements to the theme."
msgstr ""

#: ../theming/theme-package.rst:679
msgid ""
"First let me explain what we mean when we talk about *content* and *theme*. "
"*Content* is usually the dynamic generated content on the Plone site, and "
"the *theme* is the static template site."
msgstr ""

#: ../theming/theme-package.rst:683
msgid "For example:"
msgstr ""

#: ../theming/theme-package.rst:689
msgid ""
"This means that the element ``#headline`` in the theme should be replaced by"
" the ``#firstHeading`` element from the generated Plone content."
msgstr ""

#: ../theming/theme-package.rst:692
msgid ""
"To inspect the content side, you can open another Browser tab, but instead "
"of http://localhost:8080/Plone, use http://127.0.0.1:8080/Plone. In this tab"
" Diazo is disabled, allowing you to use your browser's Inspector or "
"Developer tools to view the DOM structure of default Plone. This 'unthemed "
"host name' is managed in the Theming control panel > Advanced Settings, "
"where more domains can be added."
msgstr ""

#: ../theming/theme-package.rst:696
msgid ""
"For more details on how to use Diazo rules, look at "
"http://docs.diazo.org/en/latest/ and "
"http://docs.plone.org/external/plone.app.theming/docs/index.html."
msgstr ""

#: ../theming/theme-package.rst:701
msgid ""
"We already have a fully functional rule set based on the Plone 5 default "
"Theme:"
msgstr ""

#: ../theming/theme-package.rst:808
msgid ""
"As you probably noticed, the theme does not look like it should and is "
"missing some important parts like the toolbar. That is because we are using "
"an HTML template, which has different HTML structure, than the one Plone's "
"default theme is using."
msgstr ""

#: ../theming/theme-package.rst:810
msgid ""
"We can either change our theme's template to use the same structure and "
"naming for classes and ids, or we can change our rule set to work with the "
"theme template like it is. We will mainly go the second way and customize "
"our rule set to work with the provided theme template. In fact if you use a "
"better theme template then this, where more useful CSS classes and ids used "
"and the grid is defined in CSS/LESS and not in the HTML markup it self, it "
"is a lot easier to work with touching the theme. But we use this popular "
"example theme and therefor need also to make changes to the template it self"
" a bit."
msgstr ""

#: ../theming/theme-package.rst:813
msgid "Customize the rule set"
msgstr ""

#: ../theming/theme-package.rst:815
msgid ""
"The most important part of Plone is the toolbar. So let's first make sure we"
" have it in our theme template."
msgstr ""

#: ../theming/theme-package.rst:818
msgid "Plone Toolbar"
msgstr ""

#: ../theming/theme-package.rst:820
msgid "We already have the needed Diazo rules in our rules.xml:"
msgstr ""

#: ../theming/theme-package.rst:827
msgid "The only thing we need is a placeholder in our theme template:"
msgstr ""

#: ../theming/theme-package.rst:834
msgid "You can put it right after the opening body tag in your index.html"
msgstr ""

#: ../theming/theme-package.rst:839
msgid "Login link & co"
msgstr ""

#: ../theming/theme-package.rst:841
msgid ""
"If you want to have a login link for your users, you can put this "
"placeholder in your theme template where you want the link to display. You "
"can always log in by adding ``/login`` to the Plone url, so it's optional."
msgstr ""

#: ../theming/theme-package.rst:849
msgid ""
"The necessary rule to fill this with the Plone login link is already in our "
"rules.xml:"
msgstr ""

#: ../theming/theme-package.rst:855
msgid ""
"This will replace your placeholder with ``#portal-personaltools-wrapper`` "
"from Plone (for example the login link). The link will only be inserted if "
"the user is not already logged in."
msgstr ""

#: ../theming/theme-package.rst:859
msgid "Top-navigation"
msgstr ""

#: ../theming/theme-package.rst:861
msgid ""
"Replace the placeholder with the real Plone top-navigation links. To do this"
" we replace this rule from Barceloneta:"
msgstr ""

#: ../theming/theme-package.rst:869
msgid "with our new rule:"
msgstr ""

#: ../theming/theme-package.rst:878
msgid ""
"Here we take the list of links from Plone and replace the placeholder links "
"in the theme with it. The Barceloneta rule copies the whole navigation "
"container into the theme, but only need to copy the links over."
msgstr ""

#: ../theming/theme-package.rst:883
msgid "Breadcrumb & co"
msgstr ""

#: ../theming/theme-package.rst:885
msgid ""
"Plone provides some viewlets like the breadcrumbs (the current path) above "
"the content area."
msgstr ""

#: ../theming/theme-package.rst:887
msgid ""
"We already have the needed rule to insert the Plone above-content stuff into"
" the theme:"
msgstr ""

#: ../theming/theme-package.rst:894
msgid ""
"To get this into the theme layout, we add a placeholder with the CSS id "
"``#above-content`` to the theme's ``index.html``. This is the place where we"
" want to insert Plone's \"above-content\" stuff."
msgstr ""

#: ../theming/theme-package.rst:897
msgid "For example, at the top of the ``div.container`` after:"
msgstr ""

#: ../theming/theme-package.rst:910
msgid "goes this before the row/box:"
msgstr ""

#: ../theming/theme-package.rst:919
msgid ""
"This will bring over everything from the ``viewlet-above-content`` block "
"from Plone."
msgstr ""

#: ../theming/theme-package.rst:922
msgid ""
"This also includes the Breadcrumb bar. Because our current theme does not "
"provide a breadcrumb bar, we can just drop it from the Plone content, like "
"this:"
msgstr ""

#: ../theming/theme-package.rst:928
msgid ""
"If you only want to drop this for non-administrators, you can do it like "
"this:"
msgstr ""

#: ../theming/theme-package.rst:937
msgid "Or for anonymous users only:"
msgstr ""

#: ../theming/theme-package.rst:948
msgid ""
"The classes like *userrole-anonymous* are provided by Plone in the ``body`` "
"tag."
msgstr ""

#: ../theming/theme-package.rst:952
msgid "Slider only on Front-page"
msgstr ""

#: ../theming/theme-package.rst:954
msgid ""
"We want the slider in the template only on the front page, and we don't want"
" it when we are editing the front page. To make this easier, we add "
"``#front-page-slider`` to the outer row ``div``-tag which contains the "
"slider:"
msgstr ""

#: ../theming/theme-package.rst:1006
msgid ""
"Now we can drop it if we are not on the front page and also in some other "
"situations:"
msgstr ""

#: ../theming/theme-package.rst:1014
msgid ""
"Currently the slider is still static, but we will change that later in :ref"
":`create-dynamic-slider-content-in-plone`."
msgstr ""

#: ../theming/theme-package.rst:1017
msgid "Title and Description"
msgstr ""

#: ../theming/theme-package.rst:1019
msgid ""
"Let's delete the tag with the id ``brand-before`` from the theme template."
msgstr ""

#: ../theming/theme-package.rst:1027
msgid ""
"Now let's put the necessary rules for the Title and Description in our "
"rules.xml:"
msgstr ""

#: ../theming/theme-package.rst:1048
msgid ""
"If we have the slider on the front page, the Plone title will be placed "
"inside the tag with the class ``brand-name``. If we don't have the slider, "
"we see the title inside the tag with the class ``documentFirstHeading``."
msgstr ""

#: ../theming/theme-package.rst:1052
msgid "Status messages"
msgstr ""

#: ../theming/theme-package.rst:1054
msgid ""
"Plone will render status messages in the ``#global_statusmessage`` element. "
"We want to bring these messages across to the theme. For this, we add "
"another placeholder into our theme template:"
msgstr ""

#: ../theming/theme-package.rst:1065
msgid "and we already have this rule to bring the messages across:"
msgstr ""

#: ../theming/theme-package.rst:1072
msgid ""
"To test that, just edit the front page. You should see a confirmation "
"message from Plone."
msgstr ""

#: ../theming/theme-package.rst:1075
msgid "Main content area 1"
msgstr ""

#: ../theming/theme-package.rst:1077
msgid ""
"To make the Plone content area flexible and containing the correct bootstrap"
" grid classes, we use an inline XSL snippet. This is already in our "
"rules.xml, but needs some customization for our theme:"
msgstr ""

#: ../theming/theme-package.rst:1114
msgid ""
"This will add the right grid classes to the content columns depending on "
"one-column-, two-column- or three-column-layout. We need to wrap these "
"elements in a div with the class ``box``."
msgstr ""

#: ../theming/theme-package.rst:1119
msgid "Left and right columns"
msgstr ""

#: ../theming/theme-package.rst:1121
msgid ""
"We have already added the ``column1-container`` and ``column2-container`` "
"ids to our template. The following rules will incorporate the left and the "
"right columns from Plone into the theme, and also change their markup to be "
"an ``aside`` instead of a normal ``div``. That is the reason to use inline "
"XSL here, but we already have it in our rules:"
msgstr ""

#: ../theming/theme-package.rst:1150
msgid "So nothing more to do here."
msgstr ""

#: ../theming/theme-package.rst:1153
msgid "Footer"
msgstr ""

#: ../theming/theme-package.rst:1155
msgid "Bring across the footer from Plone:"
msgstr ""

#: ../theming/theme-package.rst:1164
msgid ""
"That was basically all to bring the theme together with the dynamic elements"
" from Plone. The rest is more or less CSS. Later we will :ref:`create-"
"dynamic-slider-content-in-plone` to make the slider dynamic and let users "
"change the pictures for the slider."
msgstr ""

#: ../theming/theme-package.rst:1168
msgid "Understanding and using the Grunt build system"
msgstr ""

#: ../theming/theme-package.rst:1170
msgid ""
"We already have a ``Gruntfile.js`` in the top level directory of our theme "
"package:"
msgstr ""

#: ../theming/theme-package.rst:1275
msgid ""
"At the end, we can see some registered ``Grunt`` tasks. We can use these "
"tasks to control what happens when we run ``Grunt``."
msgstr ""

#: ../theming/theme-package.rst:1278
msgid ""
"By default ``Grunt`` will just run the ``compile task``, which means the "
"less files are getting compiled and the postcss task is run:"
msgstr ""

#: ../theming/theme-package.rst:1292
msgid ""
"If we want ``grunt`` to watch for changes in our less files and let them "
"compile it automatically after every change, we can run ``grunt watch``, and"
" it will run the ``compile`` task after every change of a LESS file:"
msgstr ""

#: ../theming/theme-package.rst:1300
msgid "If some LESS file has changed, you will see something like this:"
msgstr ""

#: ../theming/theme-package.rst:1320
msgid ""
"They are also other useful tasks like ``plone-bsync``, which we can use to "
"also update the Browser after changes."
msgstr ""

#: ../theming/theme-package.rst:1340
msgid ""
"You will now see an open browser window, which is automatically reloaded any"
" time a LESS file has changed and the CSS was recompiled."
msgstr ""

#: ../theming/theme-package.rst:1344
msgid ""
"If you use other ports or IP's for your Plone backend, you have to set up "
"the proxy in the Gruntfile.js to the Plone backend address:port."
msgstr ""

#: ../theming/theme-package.rst:1348
msgid "Theme manifest.xml"
msgstr ""

#: ../theming/theme-package.rst:1350
msgid ""
"Now let's have a look at our theme's ``manifest.cfg`` which declares "
"``development-css``, ``production-css`` and optionally ``tinymce-content-"
"css``, like this:"
msgstr ""

#: ../theming/theme-package.rst:1376
msgid ""
"The ``development-css`` file is used when Plone is running in development "
"mode, otherwise the file under ``production-css`` will be used."
msgstr ""

#: ../theming/theme-package.rst:1378
msgid ""
"The last one ``tinymce-content-css`` tells Plone to load that particular CSS"
" file inside TinyMCE, wherever a TinyMCE rich text field is displayed."
msgstr ""

#: ../theming/theme-package.rst:1382
msgid ""
"After making manifest changes, we need to deactivate/activate the theme for "
"them to take effect. Just go to ``/@@theming-controlpanel`` and do it."
msgstr ""

#: ../theming/theme-package.rst:1387
msgid "Final CSS customization"
msgstr ""

#: ../theming/theme-package.rst:1389
msgid ""
"To make our theme look nicer, we add some CSS as follows to our "
"``custom.less`` file:"
msgstr ""

#: ../theming/theme-package.rst:1478
msgid ""
"Install external CSS and JavaScript with npm and use them in your theme"
msgstr ""

#: ../theming/theme-package.rst:1480
msgid ""
"As our theme is based on ``Bootstrap``, we want to install ``Bootstrap`` "
"with ``npm`` to have more flexibility, for example to use the LESS file of "
"Bootstrap. To do that, we use ``npm``, which you should already have "
"globally installed on your system."
msgstr ""

#: ../theming/theme-package.rst:1484
msgid ""
"The following steps are already included in bobtemplates.plone template, "
"they are here only for documentation reasons, to show how to install and use"
" external packages like ``Bootstrap``."
msgstr ""

#: ../theming/theme-package.rst:1486
msgid ""
"To install ``Bootstrap`` with ``npm`` run the following command inside the "
"theme folder:"
msgstr ""

#: ../theming/theme-package.rst:1492
msgid ""
"The ``--save`` option will add the package to ``package.json`` in the theme "
"folder for us. Now, we can install all dependencies on any other system by "
"running the following command from inside of our theme folder:"
msgstr ""

#: ../theming/theme-package.rst:1500
msgid ""
"Now that we have installed bootstrap using npm, we have all bootstrap "
"components available in the subfolder called ``node_modules``:"
msgstr ""

#: ../theming/theme-package.rst:1630
msgid ""
"To include the needed \"carousel\" part and some other bootstrap components "
"which our downloaded theme uses, we change our ``theme.less`` to look like "
"this:"
msgstr ""

#: ../theming/theme-package.rst:1730
msgid ""
"Here you can see how we include the resources like ``@import "
"\"@{bootstrap_path}/carousel.less\";`` in our LESS file."
msgstr ""

#: ../theming/theme-package.rst:1732
msgid "Also take notice of the definition:"
msgstr ""

#: ../theming/theme-package.rst:1738
msgid ""
"here we define the bootstrap path, so that we can use it in all bootstrap "
"includes."
msgstr ""

#: ../theming/theme-package.rst:1740
msgid ""
"Don't forget to run ``grunt compile`` after you changed the LESS files or "
"use ``grunt watch`` to do this automatically after every change!"
msgstr ""

#: ../theming/theme-package.rst:1744
msgid "More Diazo and plone.app.theming details"
msgstr ""

#: ../theming/theme-package.rst:1746
msgid ""
"For more details how to build a Diazo based theme, look at "
"http://docs.diazo.org/en/latest/ and "
"http://docs.plone.org/external/plone.app.theming/docs/index.html."
msgstr ""

#: ../theming/tinymce-templates.rst:3
msgid "Using TinyMCE templates"
msgstr ""

#: ../theming/tinymce-templates.rst:5
msgid ""
"TinyMCE has a *templates* plugin which provides an easy way to create "
"complex content in TinyMCE. You can use that to help users to add complex "
"content structures like predefined tables or content. The users then only "
"need to customize this content to their needs."
msgstr ""

#: ../theming/tinymce-templates.rst:12
msgid "Create your own TinyMCE templates"
msgstr ""

#: ../theming/tinymce-templates.rst:14
msgid ""
"We already have a folder named ``tinymce-templates`` in our theme folder. So"
" we just need to add a file named ``content-box.html`` into the this folder:"
msgstr ""

#: ../theming/tinymce-templates.rst:23
msgid ""
"In the file :file:`content-box.html` we put this HTML template content:"
msgstr ""

#: ../theming/tinymce-templates.rst:45
msgid ""
"This is the template content we will get in TinyMCE when we use this "
"template."
msgstr ""

#: ../theming/tinymce-templates.rst:49
msgid "Activate TinyMCE templates plugin"
msgstr ""

#: ../theming/tinymce-templates.rst:51
msgid ""
"The activation of the TinyMCE template plugin is already provided by "
"bobtemplates.plone, the only thing you have to do is to add your template "
"tothe registry, like described below."
msgstr ""

#: ../theming/tinymce-templates.rst:53
msgid ""
"If the -plugin is not already activated, you can activate the template "
"plugin (the ``custom_plugins`` record) and register this template for "
"TinyMCE (the ``template`` record):"
msgstr ""

#: ../theming/tinymce-templates.rst:90
msgid ""
"As we already have the configuration already in place and even a TinyMCE "
"template already exists, we only need to extend the following list with our "
"template file."
msgstr ""

#: ../theming/tinymce-templates.rst:102
msgid ""
"Now you need to uninstall/install (or import the registry profile from "
"``portal_setup``) your package to update the registry configuration."
msgstr ""

#: ../theming/tinymce-templates.rst:104
msgid ""
"You can also add the template TTW in the TinyMCE control panel by updating "
"the following snippet:"
msgstr ""

#: ../theming/tinymce-templates.rst:119
msgid "Just remember to activate the plugin from the toolbar/plugins tab."
msgstr ""

#: ../theming/tinymce-templates.rst:123
msgid "Use TinyMCE templates for content creation"
msgstr ""

#: ../theming/tinymce-templates.rst:125
msgid ""
"We can add template-based content from the *Insert* menu > *Insert "
"template*:"
msgstr ""

#: ../theming/tinymce-templates.rst:129
msgid "Now we can choose one of the existing TinyMCE templates:"
msgstr ""

#: ../theming/tinymce-templates.rst:133
msgid ""
"After we have chosen our template and then clicked on *OK*, we have our "
"template-based content in the editor:"
msgstr ""

#: ../theming/tinymce-templates.rst:138
msgid "We can now customize it or use more templates to create more content."
msgstr ""

#: ../theming/ttw-advanced.rst:3
msgid "TTW Theming I: Introduction to Diazo Theming"
msgstr ""

#: ../theming/ttw-advanced.rst:7
msgid ""
"Use the \"Theming\" control panel to make a copy of Plone's default theme "
"(barceloneta)"
msgstr ""

#: ../theming/ttw-advanced.rst:8
msgid "Customize a theme using Diazo rules"
msgstr ""

#: ../theming/ttw-advanced.rst:9
msgid "Customize a theme by editing and compiling Less files"
msgstr ""

#: ../theming/ttw-advanced.rst:13
msgid "Diazo and plone.app.theming"
msgstr ""

#: ../theming/ttw-advanced.rst:14
msgid "\"Barceloneta\" - The Default Plone Theme"
msgstr ""

#: ../theming/ttw-advanced.rst:15
msgid "The \"Theming tool\""
msgstr ""

#: ../theming/ttw-advanced.rst:16
msgid "Building CSS in the \"Theming tool\""
msgstr ""

#: ../theming/ttw-advanced.rst:17
msgid "``<body>`` element CSS classes"
msgstr ""

#: ../theming/ttw-advanced.rst:18
msgid "Conditionally activating rules"
msgstr ""

#: ../theming/ttw-advanced.rst:23
msgid ""
"We will use a `Plone pre-configured Heroku instance "
"<https://github.com/collective/training-sandbox>`_."
msgstr ""

#: ../theming/ttw-advanced.rst:25
msgid "Once deployed, create a Plone site."
msgstr ""

#: ../theming/ttw-advanced.rst:28
msgid "Two approaches to theming"
msgstr ""

#: ../theming/ttw-advanced.rst:30
msgid "There are two main approaches to creating a custom theme:"
msgstr ""

#: ../theming/ttw-advanced.rst:32
msgid "Copying the default Barceloneta theme"
msgstr ""

#: ../theming/ttw-advanced.rst:33
msgid "Inheriting from the default Barceloneta theme."
msgstr ""

#: ../theming/ttw-advanced.rst:35
msgid ""
"In this section we'll look at the first approach, part II will explore the "
"second approach."
msgstr ""

#: ../theming/ttw-advanced.rst:38
msgid "What is Diazo?"
msgstr ""

#: ../theming/ttw-advanced.rst:40
msgid ""
":program:`Diazo` is a theming engine used by Plone to make theming a site "
"easier. At its core, a Diazo theme consists of an HTML page and "
":file:`rules.xml` file containing directives."
msgstr ""

#: ../theming/ttw-advanced.rst:45
msgid ""
"You can find extended information about Diazo and its integration package "
":py:mod:`plone.app.theming` in the official docs: `Diazo docs "
"<http://docs.diazo.org/en/latest/>`_ and `plone.app.theming docs "
"<http://docs.plone.org/external/plone.app.theming/docs/index.html#what-is-a"
"-diazo-theme>`_."
msgstr ""

#: ../theming/ttw-advanced.rst:48
msgid "Principles"
msgstr ""

#: ../theming/ttw-advanced.rst:50
msgid ""
"For this part of the training you just need to know the basic principles of "
"a Diazo theme:"
msgstr ""

#: ../theming/ttw-advanced.rst:52
msgid "Plone renders the content of the page;"
msgstr ""

#: ../theming/ttw-advanced.rst:53
msgid "Diazo rules inject the content into any static theme;"
msgstr ""

#: ../theming/ttw-advanced.rst:56
msgid "Copy barceloneta theme"
msgstr ""

#: ../theming/ttw-advanced.rst:58
msgid "To create our playground we will copy the existing Barceloneta theme."
msgstr ""

#: ../theming/ttw-advanced.rst:60
msgid "go to the :guilabel:`Theming` control panel"
msgstr ""

#: ../theming/ttw-advanced.rst:61
msgid ""
"you will see the available themes. In a bare new Plone site, you will see "
"something like this:"
msgstr ""

#: ../theming/ttw-advanced.rst:66
msgid "click on the :guilabel:`Copy` button and get to the copy form"
msgstr ""

#: ../theming/ttw-advanced.rst:67
msgid "insert \"My theme\" as the name and activate it by default"
msgstr ""

#: ../theming/ttw-advanced.rst:72
msgid ""
"click on :guilabel:`Create` and you get redirected to your new theme's "
"inspector:"
msgstr ""

#: ../theming/ttw-advanced.rst:79
msgid "Anatomy of a Diazo theme"
msgstr ""

#: ../theming/ttw-advanced.rst:81
msgid "The most important files:"
msgstr ""

#: ../theming/ttw-advanced.rst:83
msgid ""
":file:`manifest.cfg`: contains metadata about the theme (`manifest reference"
" <http://docs.plone.org/external/plone.app.theming/docs/index.html#the-"
"manifest-file>`_);"
msgstr ""

#: ../theming/ttw-advanced.rst:84
msgid ""
":file:`rules.xml`: contains the theme rules (`rules reference "
"<http://docs.plone.org/external/plone.app.theming/docs/index.html#rules-"
"syntax>`_);"
msgstr ""

#: ../theming/ttw-advanced.rst:85
msgid ":file:`index.html`: the static HTML of the theme."
msgstr ""

#: ../theming/ttw-advanced.rst:88
msgid "Exercise 1 - Inspecting the :file:`manifest.cfg`"
msgstr ""

#: ../theming/ttw-advanced.rst:90
msgid ""
"To better understand how your theme is arranged start by reading the "
":file:`manifest.cfg` file."
msgstr ""

#: ../theming/ttw-advanced.rst:92
msgid ""
"In the theming tool, open the :file:`manifest.cfg` spend a minute or two "
"looking through it, then see if you can answer the questions below."
msgstr ""

#: ../theming/ttw-advanced.rst:95
msgid "Where are the main rules located for your theme?"
msgstr ""

#: ../theming/ttw-advanced.rst:97
msgid ""
"What property in the :file:`manifest.cfg` file defines the source CSS/Less "
"file used by the theme?"
msgstr ""

#: ../theming/ttw-advanced.rst:99
msgid "What do you think is the purpose of the ``prefix`` property?"
msgstr ""

#: ../theming/ttw-advanced.rst:101 ../theming/ttw-advanced.rst:178
#: ../theming/ttw-advanced_2.rst:175
msgid "Solution"
msgstr "Solución"

#: ../theming/ttw-advanced.rst:104
msgid ""
"The main rules are defined by the ``rules`` property (you could point this "
"anywhere, however the accepted convention is to use a file named "
":file:`rules.xml`."
msgstr ""

#: ../theming/ttw-advanced.rst:106
msgid ""
"The ``development-css`` property points at the main Less file, when compiled"
" to CSS it is placed in the location defined by the ``production-css`` "
"property."
msgstr ""

#: ../theming/ttw-advanced.rst:109
msgid ""
"The ``prefix`` property defines the default location to look for non "
"prefixed files, for example if your prefix is set to ``/++theme++mytheme`` "
"then a file like index.html will be expected at "
"``/++theme++mytheme/index.html``"
msgstr ""

#: ../theming/ttw-advanced.rst:115
msgid "``<body>`` CSS classes"
msgstr ""

#: ../theming/ttw-advanced.rst:117
msgid ""
"As you browse a Plone site, Plone adds rich information about your current "
"context. This information is represented as special classes in the "
"``<body>`` element. Information represented by the ``<body>`` classes "
"includes:"
msgstr ""

#: ../theming/ttw-advanced.rst:121
msgid "the current user role, and permissions,"
msgstr ""

#: ../theming/ttw-advanced.rst:122
msgid "the current content-type and its template,"
msgstr ""

#: ../theming/ttw-advanced.rst:123
msgid "the site section and sub section,"
msgstr ""

#: ../theming/ttw-advanced.rst:124
msgid "the current subsite (if any),"
msgstr ""

#: ../theming/ttw-advanced.rst:125
msgid "whether this is a frontend view,"
msgstr ""

#: ../theming/ttw-advanced.rst:126
msgid "whether icons are enabled."
msgstr ""

#: ../theming/ttw-advanced.rst:129
msgid "``<body>`` classes for an anonymous visitor"
msgstr ""

#: ../theming/ttw-advanced.rst:131
msgid ""
"Below you can see an example of the body classes for a page named \"front-"
"page\", located in the root of a typical Plone site called \"acme\":"
msgstr ""

#: ../theming/ttw-advanced.rst:146
msgid "``<body>`` classes for a manager"
msgstr ""

#: ../theming/ttw-advanced.rst:148
msgid ""
"And here is what the classes for the same page look like when viewed by a "
"manager that has logged in:"
msgstr ""

#: ../theming/ttw-advanced.rst:167
msgid "Notice the addition of ``userrole-manager``."
msgstr ""

#: ../theming/ttw-advanced.rst:170
msgid "Exercise 2 - Discussion about the ``<body>`` classes"
msgstr ""

#: ../theming/ttw-advanced.rst:172
msgid ""
"Look back at the ``<body>`` classes for a manager then see if you can answer"
" the following questions."
msgstr ""

#: ../theming/ttw-advanced.rst:174
msgid "What other roles does the manager have?"
msgstr ""

#: ../theming/ttw-advanced.rst:175
msgid "Can you see other differences?"
msgstr ""

#: ../theming/ttw-advanced.rst:176
msgid "What do you think the ``plone-toolbar-expanded`` class does?"
msgstr ""

#: ../theming/ttw-advanced.rst:181
msgid "The manager also has the role \"member\" and \"authenticated\""
msgstr ""

#: ../theming/ttw-advanced.rst:183
msgid ""
"There are ``plone-toolbar`` classes added to the ``<body>`` element, these "
"control the display of the toolbar"
msgstr ""

#: ../theming/ttw-advanced.rst:185
msgid ""
"The ``plone-toolbar-expanded`` class is used to control styles used by the "
"expanded version of the toolbar."
msgstr ""

#: ../theming/ttw-advanced.rst:189
msgid "Custom rules"
msgstr ""

#: ../theming/ttw-advanced.rst:190
msgid ""
"Let's open :file:`rules.xml`. You will see all the rules that are used in "
"the Barceloneta theme right now. For the time being let's concentrate on how"
" to hack these rules."
msgstr ""

#: ../theming/ttw-advanced.rst:193
msgid "Conditionally showing content"
msgstr ""

#: ../theming/ttw-advanced.rst:198
msgid ""
"Suppose that we want to make the \"above content\" block (the one that "
"contains breadcrumbs) conditional, and show it only for authenticated users."
msgstr ""

#: ../theming/ttw-advanced.rst:200
msgid "In the :file:`rules.xml` find this line:"
msgstr ""

#: ../theming/ttw-advanced.rst:206
msgid ""
"This rule states that the element that comes from the content (Plone) with "
"the id ``#viewlet-above-content`` must replace the element with the id "
"``#above-content`` in the static theme."
msgstr ""

#: ../theming/ttw-advanced.rst:208
msgid ""
"We want to hide it for anonymous users  (hint: We'll use the ``<body>`` "
"classses discussed above)."
msgstr ""

#: ../theming/ttw-advanced.rst:210
msgid ""
"The class we are looking for is ``userrole-authenticated``. Add another "
"property to the rule so that we produce this code:"
msgstr ""

#: ../theming/ttw-advanced.rst:219
msgid ""
"The attribute ``css:if-content`` allows us to put a condition on the rules "
"based on a CSS selector that acts on the content. In this way the rule will "
"be applied only if the body element has the class ``.userrole-"
"authenticated``."
msgstr ""

#: ../theming/ttw-advanced.rst:221
msgid "We will learn more about Diazo rules in :doc:`./ttw-advanced_2`."
msgstr ""

#: ../theming/ttw-advanced.rst:225
msgid "Customize CSS"
msgstr ""

#: ../theming/ttw-advanced.rst:227
msgid ""
"from theming tool open the file :file:`less/barceloneta.plone.less`, that is"
" the main Less file as specified in the manifest;"
msgstr ""

#: ../theming/ttw-advanced.rst:228
msgid "add your own customization at the bottom, like:"
msgstr ""

#: ../theming/ttw-advanced.rst:234
msgid ""
"Normally you would place this in a separate file to keep the main one clean "
"but for this example it is enough."
msgstr ""

#: ../theming/ttw-advanced.rst:236
msgid "push the buttons :guilabel:`Save` and :guilabel:`Build CSS`"
msgstr ""

#: ../theming/ttw-advanced.rst:241
msgid "go back to the Plone site and reload the page: voilá!"
msgstr ""

#: ../theming/ttw-advanced.rst:246
msgid ""
"At the moment you need to \"Build CSS\" from the main file, the one declared"
" in the manifest (in this case :file:`less/barceloneta.plone.less`). So, "
"whatever Less file you edit, go back to the main one to compile. This "
"behavior will be improved but for now, just remember this simple rule ;)"
msgstr ""

#: ../theming/ttw-advanced_2.rst:3
msgid "TTW Theming II: Creating a custom theme based on Barceloneta"
msgstr ""

#: ../theming/ttw-advanced_2.rst:7
msgid "Create a theme by inheriting from the Barceloneta theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:8
msgid "Using the :file:`manifest.cfg`, register a production CSS file."
msgstr ""

#: ../theming/ttw-advanced_2.rst:9
msgid "Use an XInclude to incorporate rules from the Barceloneta theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:10
msgid "Use ``?diazo.off=1`` to view unthemed versions."
msgstr ""

#: ../theming/ttw-advanced_2.rst:11
msgid ""
"Use conditional rules to have a different backend theme from the anonymous "
"visitors theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:15
msgid "Inheriting from Barceloneta."
msgstr ""

#: ../theming/ttw-advanced_2.rst:16
msgid "Diazo rule directives and attributes."
msgstr ""

#: ../theming/ttw-advanced_2.rst:17
msgid "Viewing the unthemed version of a Plone item."
msgstr ""

#: ../theming/ttw-advanced_2.rst:18
msgid "Creating a visitor-only theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:22
msgid "Inheriting from Barceloneta"
msgstr ""

#: ../theming/ttw-advanced_2.rst:0
msgid "Key Ideas"
msgstr ""

#: ../theming/ttw-advanced_2.rst:25
msgid "When inheriting from the Barceloneta theme keep the following in mind:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:27
msgid "The theme provides styles and assets used by Plone's backend tools."
msgstr ""

#: ../theming/ttw-advanced_2.rst:28
msgid ""
"Inheritance involves including the Barceloneta :file:`rules.xml` "
"(``++theme++barceloneta/rules.xml``) and styles."
msgstr ""

#: ../theming/ttw-advanced_2.rst:29
msgid ""
"The prefix/unique path to the Barceloneta theme is ``++theme++barceloneta``."
msgstr ""

#: ../theming/ttw-advanced_2.rst:30
msgid ""
"It is necessary to include a copy of Barceloneta's :file:`index.html` in the"
" root of your custom theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:31
msgid ""
"The three key files involved are :file:`manifest.cfg`, :file:`rules.xml` and"
" a Less file defined in the manifest which we will call :file:`styles.less`."
msgstr ""

#: ../theming/ttw-advanced_2.rst:33
msgid "Use \"Build CSS\" to generate a CSS file from your custom Less file."
msgstr ""

#: ../theming/ttw-advanced_2.rst:35
msgid ""
"Copying Barceloneta makes your theme heavier and will likely make upgrading "
"more difficult."
msgstr ""

#: ../theming/ttw-advanced_2.rst:37
msgid ""
"The Barceloneta theme provides many assets used by Plone's utilities that "
"you do not need to duplicate. Additionally new releases of the theme may "
"introduce optimizations or bug fixes. By referencing the Barceloneta rules "
"and styles, instead of copying them, you automatically benefit from any "
"updates to the Barceloneta theme while also keeping your custom theme "
"relatively small."
msgstr ""

#: ../theming/ttw-advanced_2.rst:44
msgid "Exercise 1 - Create a new theme that inherits from Barceloneta"
msgstr ""

#: ../theming/ttw-advanced_2.rst:46
msgid ""
"In this exercise we will create a new theme that inherits the Barceloneta "
"rules and styles."
msgstr ""

#: ../theming/ttw-advanced_2.rst:48
msgid "Create a new theme"
msgstr ""

#: ../theming/ttw-advanced_2.rst:53
msgid "and name it \"Custom\""
msgstr ""

#: ../theming/ttw-advanced_2.rst:57
msgid ""
"In the theming editor, ensure that your new theme contains the files "
":file:`manifest.cfg`, :file:`rules.xml`, :file:`index.html` (from "
"Barceloneta) and :file:`styles.less`."
msgstr ""

#: ../theming/ttw-advanced_2.rst:61
msgid ":file:`manifest.cfg`, declaring your theme:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:71
msgid ":file:`rules.xml`, including the Barceloneta rules:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:91
msgid ""
"a copy of :file:`index.html` from Barceloneta (this one cannot be imported "
"or inherited, it must be local to your theme)."
msgstr ""

#: ../theming/ttw-advanced_2.rst:93
msgid ":file:`styles.less`, importing Barceloneta styles:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:107
msgid ""
"Then generate the :file:`styles.css` file using :file:`styles.less` and the "
"\"Build CSS\" button."
msgstr ""

#: ../theming/ttw-advanced_2.rst:109
msgid "Your theme is ready."
msgstr ""

#: ../theming/ttw-advanced_2.rst:113
msgid "Diazo rule directives and attributes"
msgstr ""

#: ../theming/ttw-advanced_2.rst:115
msgid ""
"The Diazo rules file is an XML document containing rules to specify where "
"the content elements (title, footer, main text, etc.) will be located in the"
" targeted theme page. The rules are created using *rule directives* which "
"have *attributes*; attribute values are either CSS expressions or XPath "
"expressions."
msgstr ""

#: ../theming/ttw-advanced_2.rst:121
msgid "CSS selector based attributes"
msgstr ""

#: ../theming/ttw-advanced_2.rst:122
msgid ""
"It is generally recommended that you use CSS3 selectors to target elements "
"in your content or theme. The CSS3 selectors used by Diazo directives are "
"listed below:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:125
msgid "``css:theme``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:126
msgid "Used to select target elements from the theme using CSS3 selectors."
msgstr ""

#: ../theming/ttw-advanced_2.rst:127
msgid "``css:content``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:128
msgid "Used to specify the element that should be taken from the content."
msgstr ""

#: ../theming/ttw-advanced_2.rst:129
msgid "``css:theme-children``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:130
msgid "Used to select the children of matching elements."
msgstr ""

#: ../theming/ttw-advanced_2.rst:133
msgid "``css:content-children``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:132
msgid "Used to identify the children of an element that will be used."
msgstr ""

#: ../theming/ttw-advanced_2.rst:136
msgid "XPath selector based attributes"
msgstr ""

#: ../theming/ttw-advanced_2.rst:138
msgid ""
"Depending on complexity of the required selector it is sometimes necessary "
"or more convenient to use XPath selectors instead of CSS selectors. XPath "
"selectors use the unprefixed attributes ``theme`` and ``content``. The "
"common XPath selector attributes include:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:142
msgid "``theme``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:143
msgid "Used to select target elements from the theme using XPath selectors."
msgstr ""

#: ../theming/ttw-advanced_2.rst:144
msgid "``content``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:145
msgid ""
"Used to specify the element that should be taken from the content using "
"XPath selectors."
msgstr ""

#: ../theming/ttw-advanced_2.rst:146
msgid "``theme-children``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:147
msgid ""
"Used to select the children of matching elements using XPath selectors."
msgstr ""

#: ../theming/ttw-advanced_2.rst:149
msgid "``content-children``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:149
msgid ""
"Used to identify the children of an element that will be used using XPath "
"selectors."
msgstr ""

#: ../theming/ttw-advanced_2.rst:151
msgid ""
"You can also create conditions about the current path using ``if-path``."
msgstr ""

#: ../theming/ttw-advanced_2.rst:154
msgid ""
"For a more comprehensive overview of all the Diazo rule directives and "
"related attributes see: http://docs.diazo.org/en/latest/basic.html#rule-"
"directives"
msgstr ""

#: ../theming/ttw-advanced_2.rst:158
msgid "Viewing the unthemed Plone site"
msgstr ""

#: ../theming/ttw-advanced_2.rst:160
msgid ""
"When you create your Diazo rules, it is important to know how the content "
"Diazo is receiving from Plone is structured. In order to see a \"non-"
"diazoed\" version page, just add ``?diazo.off=1`` at the end of its URL."
msgstr ""

#: ../theming/ttw-advanced_2.rst:164
msgid "Exercise 2 - Viewing the unthemed site"
msgstr ""

#: ../theming/ttw-advanced_2.rst:166
msgid "Use ``diazo.off=1`` to view the unthemed version of your site."
msgstr ""

#: ../theming/ttw-advanced_2.rst:168
msgid ""
"Using your browser's inspector, find out the location/name of some of "
"Plone's elements. Then try to answer the following:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:171
msgid ""
"What do you think is the difference between \"content-core\" and "
"\"content\"? There are several viewlets, how many do you count? Can you "
"identify any portlets, what do you think they are for?"
msgstr ""

#: ../theming/ttw-advanced_2.rst:178
msgid ""
"The \"content-core\" does not include the \"title\" and \"description\" "
"while the \"content\" combines the \"title\", \"description\" and \"content-"
"core\"."
msgstr ""

#: ../theming/ttw-advanced_2.rst:181
msgid ""
"Out of the box there are six viewlets (``viewlet-above-content``, ``viewlet-"
"above-content-title`` ``viewlet-below-content-title``, ``viewlet-above-"
"content-body``, ``viewlet-below-content-body``, ``viewlet-below-content``)."
msgstr ""

#: ../theming/ttw-advanced_2.rst:185
msgid ""
"There are a few *footer* portlets which construct the footer of the site."
msgstr ""

#: ../theming/ttw-advanced_2.rst:189
msgid "Exercise 3 - the ``<drop>`` directives"
msgstr ""

#: ../theming/ttw-advanced_2.rst:191
msgid "Add a rule that drops the \"search section\" checkbox from the search box."
msgstr ""

#: ../theming/ttw-advanced_2.rst:192
msgid "See the diagram below:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:198
msgid "Conditional attributes"
msgstr ""

#: ../theming/ttw-advanced_2.rst:199
msgid ""
"The following attributes can be used to conditionally activate a directive."
msgstr ""

#: ../theming/ttw-advanced_2.rst:201
msgid "``css:if-content``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:202
msgid ""
"Defines a CSS3 expression: if there is an element in the *content* that "
"matches the expression then activate the directive."
msgstr ""

#: ../theming/ttw-advanced_2.rst:203
msgid "``css:if-theme``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:204
msgid ""
"Defines a CSS3 expression: if there is an element in the *theme* that "
"matches the expression then activate the directive."
msgstr ""

#: ../theming/ttw-advanced_2.rst:205
msgid "``if-content``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:206
msgid ""
"Defines an XPath expression: if there is an element in the *content* that "
"matches the expression then activate the directive."
msgstr ""

#: ../theming/ttw-advanced_2.rst:207
msgid "``if-theme``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:208
msgid ""
"Defines an XPath expression: if there is an element in the *theme* that "
"matches the expression then activate the directive."
msgstr ""

#: ../theming/ttw-advanced_2.rst:210
msgid "``if-path``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:210
msgid ""
"Conditionally activate the current directive based on the current path."
msgstr ""

#: ../theming/ttw-advanced_2.rst:212
msgid ""
"In a previous chapter we discussed the Plone ``<body>`` element and how to "
"take advantage of the custom CSS classes associated with it. We were "
"introduced to the attribute ``css:if-content``. Remember that we are able to"
" determine a lot of context related information from the classes, such as::"
msgstr ""

#: ../theming/ttw-advanced_2.rst:222
msgid "Here is an example"
msgstr ""

#: ../theming/ttw-advanced_2.rst:246
msgid "Converting an existing HTML template into an theme"
msgstr ""

#: ../theming/ttw-advanced_2.rst:247
msgid ""
"In the Plone \"universe\" it is not uncommon to convert an existing HTML "
"template into a Diazo theme. Just ensure that when you zip up the source "
"theme that there is a single folder in the root of the zip file. We will "
"explore this in more detail in the next exercise."
msgstr ""

#: ../theming/ttw-advanced_2.rst:252
msgid "Exercise 4 - Convert a HTML template into a Diazo theme"
msgstr ""

#: ../theming/ttw-advanced_2.rst:254
msgid ""
"In this exercise we will walk through the process of converting an existing "
"free HTML theme into a Diazo-based Plone theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:259
msgid ""
"We've selected the free `New Age Bootstrap theme "
"<https://github.com/BlackrockDigital/startbootstrap-new-age>`_. The theme is"
" already packaged in a manner that will work with the theming tool."
msgstr ""

#: ../theming/ttw-advanced_2.rst:262
msgid ""
"When being distributed, Plone themes are packaged as zip files. A theme "
"should be structured such that there is only one top level directory in the "
"root of the zip file. By convention the directory should contain your "
":file:`index.html` and supporting files, the supporting files (CSS, "
"javascript and other files) may be in subdirectories."
msgstr ""

#: ../theming/ttw-advanced_2.rst:267
msgid ""
"To get started `download a copy of the New Age theme as a zip file "
"<https://github.com/BlackrockDigital/startbootstrap-new-"
"age/archive/master.zip>`_. Then upload it to the theme controlpanel."
msgstr ""

#: ../theming/ttw-advanced_2.rst:273
msgid ""
"This is a generic theme, it does not provide the Plone/Diazo specific "
":file:`rules.xml` or :file:`manifest.cfg` file. When you upload the zip file"
" the theming tool generates a :file:`rules.xml`. In the next steps you will "
"add additional files including a :file:`manifest.cfg` (perhaps in the future"
" the manifest.cfg will also be generated for you)."
msgstr ""

#: ../theming/ttw-advanced_2.rst:280
msgid "Select the downloaded zip file."
msgstr ""

#: ../theming/ttw-advanced_2.rst:284
msgid "Add a :file:`styles.less` file and import the Barceloneta styles."
msgstr ""

#: ../theming/ttw-advanced_2.rst:286
msgid ""
"Add a :file:`manifest.cfg` file, set ``production-css`` equal to "
"``styles.css``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:288
msgid ""
"Clean Blog is a free Bootstrap theme, the latest version is available on "
"github `<https://github.com/BlackrockDigital/startbootstrap-clean-blog>`_"
msgstr ""

#: ../theming/ttw-advanced_2.rst:294
msgid ""
"You can identify the theme path by reading your browser's address bar when "
"your theme is open in the theming tool. You'll need to include the proper "
"theme path in your :file:`manifest.cfg`, in this case it will most likely be"
" something like ``++theme++startbootstrap-new-age-gh-pages``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:299
msgid ""
"[theme] title = New Age prefix = ++theme++startbootstrap-new-age-gh-pages/ "
"production-css = ++theme++startbootstrap-new-age-gh-pages/styles.css"
msgstr ""

#: ../theming/ttw-advanced_2.rst:305
msgid "Add rules to include the Barceloneta backend utilities ::"
msgstr ""

#: ../theming/ttw-advanced_2.rst:319
msgid ""
"Add rules to include content, add site structure, drop unneeded elements, "
"customize the menu."
msgstr ""

#: ../theming/ttw-advanced_2.rst:323
msgid ""
"Look out for inline styles in this theme (i.e. the use of the ``style`` "
"attribute on a tag). This is especially problematic with background images "
"set with relative paths. The two issues that result are:"
msgstr ""

#: ../theming/ttw-advanced_2.rst:327
msgid ""
"the relative path does not translate properly in the context of the theme;"
msgstr ""

#: ../theming/ttw-advanced_2.rst:329
msgid ""
"it can be tricky to dynamically replace background images provided by inline"
" styles."
msgstr ""

#: ../theming/ttw-advanced_2.rst:333
msgid "Creating a visitor-only theme - conditionally enabling Barceloneta"
msgstr ""

#: ../theming/ttw-advanced_2.rst:335
msgid ""
"Sometimes it is more convenient for your website administrators to use "
"Barceloneta, Plone's default theme. Other visitors would see a completely "
"different layout provided by your custom theme. To achieve this you will "
"need to associate your visitor theme rules with an expression like ``css:if-"
"content=\"body.userrole-anonymous\"``. For rules that will affect logged-in "
"users you can use the expression ``css:if-content=\"body.:not(userrole-"
"anonymous)\"``."
msgstr ""

#: ../theming/ttw-advanced_2.rst:342
msgid ""
"Once you've combined the expressions above with the right Diazo rules you "
"will be able to present an anonymous visitor with a specific HTML theme "
"while presenting the Barceloneta theme to logged-in users."
msgstr ""

#: ../theming/ttw-advanced_2.rst:348
msgid ""
"The Barceloneta :file:`++theme++barceloneta/rules.xml` expects the "
"Barceloneta :file:`index.html` to reside locally in your current theme. To "
"avoid conflict and to accomodate the inherited Barceloneta, ensure that your"
" theme file has a different name such as :file:`front.html`."
msgstr ""

#: ../theming/ttw-advanced_2.rst:355
msgid "Exercise 5 - Convert the theme to be a visitor-only theme"
msgstr ""

#: ../theming/ttw-advanced_2.rst:357
msgid ""
"In this exercise we will alter our theme from the previous exercise to make "
"it into a visitor-only theme."
msgstr ""

#: ../theming/ttw-advanced_2.rst:360
msgid "Update the :file:`rules.xml` file to include Barceloneta rules."
msgstr ""

#: ../theming/ttw-advanced_2.rst:365
msgid "Use ``<xi:include href=\"++theme++barceloneta/rules.xml\" />``"
msgstr ""

#: ../theming/ttw-advanced_2.rst:367
msgid ""
"Add conditional rules to :file:`rules.xml` so that the new theme is only "
"shown to anonymous users, rename the theme's :file:`index.html` to "
":file:`front.html` and add a copy of the Barceloneta :file:`index.html`."
msgstr ""

#: ../theming/ttw-advanced_2.rst:373
msgid ""
"Copy the contents of the Barceloneta :file:`index.html` file then add it to "
"the theme as the new :file:`index.html` file."
msgstr ""

#: ../theming/ttw-advanced_2.rst:376
msgid "Change :file:`rules.xml` to look similar to this:"
msgstr ""
