# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Plone Training package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Training 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-02 12:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Leonardo J. Caballero G. <leonardocaballero@gmail.com>, 2016\n"
"Language-Team: Spanish (https://www.transifex.com/plone/teams/21152/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../workflow/dynamic-roles.rst:2
msgid "Dynamic Roles"
msgstr ""

#: ../workflow/dynamic-roles.rst:4
msgid ""
"Plone core's ``borg.localrole`` package allows you to hook into role-"
"resolving code and add roles dynamically. I.e. the role on the user depends "
"on HTTP request / environment conditions and is not something set in the "
"site database."
msgstr ""

#: ../workflow/dynamic-roles.rst:8
msgid "Using Dynamic Roles"
msgstr ""

#: ../workflow/dynamic-roles.rst:10
msgid ""
"To start utilizing dynamic roles in Plone, you will need to create an Zope 3"
" Adapter for ``ILocalRoleProvider`` in your custom product that contains the"
" code to return the correct roles for a user in a specific context."
msgstr ""

#: ../workflow/dynamic-roles.rst:12
msgid ""
"getAllRoles() is overridden to return a custom role which is not available "
"through normal security machinery. This is required because Plone/Zope "
"builds look-up tables based on the result of getAllRoles() and all possible "
"roles must appear there"
msgstr ""

#: ../workflow/dynamic-roles.rst:17
msgid ""
"getRoles() is overridden to call custom getDummyRolesOnContext() which has "
"the actual logic to resolve the roles"
msgstr ""

#: ../workflow/dynamic-roles.rst:20
msgid ""
"An example code checks whether the context object implements a marker "
"interface and gives the user a role based on that"
msgstr ""

#: ../workflow/dynamic-roles.rst:23
msgid ""
"**Note:** getRoles() function is called several times per request so you "
"might want to cache the result."
msgstr ""

#: ../workflow/dynamic-roles.rst:25
msgid "Example ``localroles.py``"
msgstr ""

#: ../workflow/dynamic-roles.rst:76
msgid ""
"Custom local role implementation is made effective using ZCML adapter "
"directive in your add-ons ``configure.zcml``"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:2
msgid "Using GenericSetup to Manage Plone Workflows"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:4
msgid ""
"Workflows provide a great amount of flexibility inside of Plone. They have "
"many moving parts such as states, transitions, permissions, variables, "
"worklist and groups. Plone gives you the ability to configure all of these "
"items through the web via the ZMI, but moving these settings to another "
"environment as part of a release or migration can be error prone."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:6
msgid ""
"The GenericSetup tool inside of plone, which has the id of ``portal_setup``,"
" provides a way to serialize the current state of your workflow polices into"
" a XML file that can be put into your own custom add-on packages. Using this"
" export/import tool, you can now track changes to your workflow polices "
"inside of your source control tools and create releases that allow exact "
"replication of the settings to new or existing environments."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:9
#: ../workflow/placeful-workflow.rst:9
msgid "Getting Started"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:11
msgid ""
"Creating a workflow from scratch using the XML format is tricky at best. It "
"is recommended that you start from the ZMI and copy/paste an existing "
"workflow that most closely matches your business need and use it as a "
"starting point. The changes to the workflow can be configured via the ZMI "
"and then exported to the filesystem for inclusion in your product."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:14
msgid "Exporting Workflow Policies"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:16
msgid ""
"Once your workflow is working locally for your needs, you can export your "
"workflow using the ``portal_setup`` tool in the ZMI."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:18
#: ../workflow/generic-setup-export-import.rst:61
msgid "Login to the ZMI and click ``portal_setup``"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:19
msgid "Click the ``Export`` tab"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:20
msgid ""
"Check the box for ``Workflow Tool`` (and optionally ``Placeful Workflow "
"Policies``)"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:21
msgid ""
"Click the button at the bottom of the page to ``Export selected steps``"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:23
msgid ""
"This will download a files called ``setup_tool-[sometimestamp].tar.gz`` to "
"your local computer. This tarball will include the ``workflows.xml`` profile"
" that describes all of the content to workflow policy bindings as well as "
"the export of each workflow policy as an xml file."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:25
msgid ""
"These will be the files you will place in your custom product's profiles "
"directory so it can be imported when using it in another instance. You will "
"need to modify the ``workflows.xml`` file prior to importing since it "
"contains all of the bindings and you will only want to include bindings that"
" are specific to your custom add-on."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:27
msgid "Example ``workflows.xml``:"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:45
msgid ""
"In this example, the rest of the bindings have been removed so we are only "
"controlling the needed workflows for our product."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:47
msgid ""
"The tarball will have a directory called ``workflows`` that contains each "
"workflow policy for the site.  You can remove all of the stock ones and just"
" keep the policies referenced by your ``workflows.xml`` for import later."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:49
msgid ""
"Subsequent updates to your workflow polices can either be made directly on "
"the files system and then re-imported into the site. Or you can make the "
"changes via the ZMI, but you will need to remember to re-export them using "
"this same process and placing the updated files back into your add-on code."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:52
msgid "Importing Workflow Policies"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:54
msgid ""
"There are several options available for re-importing your workflows back "
"into the site.  The ``portal_setup`` tool provides an option for doing a "
"``Tarball Import``, but this doesn't allow you to keep your modified "
"workflows alongside the code in your add-on product. It is recommended that "
"you export your workflow polices using the steps above and place them in "
"your add-on products *default* GenericSetup policy or include them as part "
"of an upgrade step."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:56
msgid ""
"Typically, your GenericSetup profiles will be stored in the ``profiles`` "
"directory of your add-on product. Each subdirectory of the ``profiles`` "
"directory is usually registered as a separate GenericSetup extension profile"
" or they are used as part of an upgrade step registered to one of these "
"profiles."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:58
msgid ""
"Once you have wired the GenericSetup profile folder to your product using "
"ZCML, you can now do the following to import your workflow policies to your "
"current site."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:62
msgid "Click the ``Import`` tab"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:63
msgid "Select your GenericSetup profile by either *id* or *title*"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:64
msgid ""
"Select how you want to import your profile, if you have run the import "
"already and your policies are part of the profile directly (not upgrade "
"steps), you will want to select the option to ``Apply all profiles``"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:65
msgid "Click the button to ``Import all steps``"
msgstr ""

#: ../workflow/generic-setup-export-import.rst:67
msgid ""
"If you only want to run the ``Workflow Tool`` steps, you will need go to the"
" ``Advanced Import Tab`` and select your profile by *id* or *title* and then"
" check the box for just ``Workflow Tool`` and click ``Import selected "
"steps``."
msgstr ""

#: ../workflow/generic-setup-export-import.rst:69
msgid ""
"Using upgrade profiles is similar, but you will instruct Plone to run a "
"function when upgrading from one version to the next. This function will "
"call up an already registered *migration profile* and run it against the "
"site. These upgrade steps will only run if the version of your product "
"doesn't satisfy the version requirements that were configured via ZCML."
msgstr ""

#: ../workflow/index.rst:4
msgid "Mastering Plone Workflow"
msgstr ""

#: ../workflow/index.rst:8
msgid "This chapter is still work in progress!"
msgstr ""

#: ../workflow/index.rst:10
msgid "**Controlling security with workflow**"
msgstr ""

#: ../workflow/index.rst:12
msgid ""
"Workflow is used in Plone for three distinct, but overlapping purposes:"
msgstr ""

#: ../workflow/index.rst:14
msgid "To keep track of metadata, chiefly an object’s *state*;"
msgstr ""

#: ../workflow/index.rst:15
msgid "to create content review cycles and model other types of processes;"
msgstr ""

#: ../workflow/index.rst:16
msgid "to manage object security."
msgstr ""

#: ../workflow/index.rst:18
msgid ""
"When writing content types, we will often create custom workflows to go with"
" them."
msgstr ""

#: ../workflow/index.rst:20
msgid ""
"Plone’s workflow system is known as DCWorkflow. It is a *states-and-"
"transitions* system, which means that your workflow starts in a particular "
"*state* (the *initial state*) and then moves to other states via "
"*transitions* (also called *actions* in CMF)."
msgstr ""

#: ../workflow/index.rst:22
msgid ""
"When an object enters a particular state (including the initial state), the "
"workflow is given a chance to update **permissions** on the object. A "
"workflow manages a number of permissions – typically the “core” CMF "
"permissions like :guilabel:`View`, :guilabel:`Modify portal content` and so "
"on – and will set those on the object at each state change. Note that this "
"is event-driven, rather than a real-time security check: only by changing "
"the state is the security information updated. This is why you need to click"
" :guilabel:`Update security settings` at the bottom of the "
"``portal_workflow`` screen in the ZMI when you change your workflows’ "
"security settings and want to update existing objects."
msgstr ""

#: ../workflow/index.rst:38
msgid "TODO:"
msgstr ""

#: ../workflow/index.rst:40
msgid ""
"Add a use case story thread that runs through each of the sections to "
"illustrate how each concept works"
msgstr ""

#: ../workflow/index.rst:41
msgid ""
"Add in more screen shots of the TTW experience of using workflows in plone"
msgstr ""

#: ../workflow/introduction.rst:2
msgid "Introduction to Workflows in Plone"
msgstr ""

#: ../workflow/introduction.rst:5
msgid "What is a Workflow?"
msgstr ""

#: ../workflow/introduction.rst:7
msgid ""
"Workflow is the series of interactions that should happen to complete a "
"task. Business organizations have many kinds of workflow. For example, "
"insurance companies process claims, delivery companies track shipments, and "
"schools accept applications for admission. All these tasks involve several "
"people, sometimes take a long time, and vary significantly from organization"
" to organization."
msgstr ""

#: ../workflow/introduction.rst:9
msgid ""
"The goal of workflow software is to streamline and track workflow activity. "
"Since different organizations have different workflow processes, workflow "
"software must be flexible and easy to customize."
msgstr ""

#: ../workflow/introduction.rst:11
msgid "The workflow system inside of Plone is an example of a State Machine."
msgstr ""

#: ../workflow/introduction.rst:13
msgid "From `Wikipedia <http://en.wikipedia.org/wiki/Finite-state_machine>`_:"
msgstr ""

#: ../workflow/introduction.rst:15
msgid ""
"A finite-state machine (FSM) or finite-state automaton (plural: automata), "
"or simply a state machine, is a behavioral model used to design computer "
"programs. It is composed of a finite number of states associated to "
"transitions. A transition is a set of actions that starts from one state and"
" ends in another (or the same) state. A transition is started by a trigger, "
"and a trigger can be an event or a condition."
msgstr ""

#: ../workflow/introduction.rst:17
msgid ""
"Any object controlled by workflow is **always** in precisely one ``state`` "
"from each workflow in its chain."
msgstr ""

#: ../workflow/introduction.rst:18
msgid ""
"The ``state`` in which an object is currently located controls what "
"``transitions`` are available to it"
msgstr ""

#: ../workflow/introduction.rst:21
msgid ""
"Any workflow can be diagrammed, showing the available states and the "
"transitions between them"
msgstr ""

#: ../workflow/introduction.rst:20
msgid ""
"Diagrams like this can be of enormous help in understanding your workflow"
msgstr ""

#: ../workflow/introduction.rst:21
msgid ""
"You should always sketch up a diagram when you start figuring out the "
"workflow you want"
msgstr ""

#: ../workflow/introduction.rst:27
msgid "What's in a Workflow?"
msgstr ""

#: ../workflow/introduction.rst:30
msgid "Workflows control"
msgstr ""

#: ../workflow/introduction.rst:32
msgid "What ``states`` and ``transitions`` are available"
msgstr ""

#: ../workflow/introduction.rst:33
msgid ""
"Which ``permissions`` will be managed (permissions not managed are left "
"untouched from their current value by the workflow)"
msgstr ""

#: ../workflow/introduction.rst:34
msgid ""
"Which ``groups`` will be managed (see ``states`` below for more about this)"
msgstr ""

#: ../workflow/introduction.rst:35
msgid ""
"Which ``variables`` will be tracked by the workflow (values are set and "
"stored every time a transition occurs)"
msgstr ""

#: ../workflow/introduction.rst:36
msgid ""
"What ``worklists`` will be generated (you can return lists of content "
"matching values tracked by ``variables``"
msgstr ""

#: ../workflow/introduction.rst:37
msgid ""
"What ``scripts`` are available to be used in conjunction with "
"``transitions``"
msgstr ""

#: ../workflow/introduction.rst:39
msgid ""
"These are basic python scripts, and are not used much anymore now that "
"``events`` are available"
msgstr ""

#: ../workflow/introduction.rst:42
msgid "States control"
msgstr ""

#: ../workflow/introduction.rst:44
msgid "What transitions are available **out**"
msgstr ""

#: ../workflow/introduction.rst:45
msgid ""
"What ``permissions`` are assigned to which ``roles`` *locally* to the object"
msgstr ""

#: ../workflow/introduction.rst:46
msgid ""
"What ``groups`` are assigned to which ``roles`` *locally* to the object"
msgstr ""

#: ../workflow/introduction.rst:48
msgid "This is probably the least-used aspect of workflow"
msgstr ""

#: ../workflow/introduction.rst:49
msgid "It can be spectacularly useful"
msgstr ""

#: ../workflow/introduction.rst:52
msgid "Transitions control"
msgstr ""

#: ../workflow/introduction.rst:54
msgid "What ``state`` they will end in"
msgstr ""

#: ../workflow/introduction.rst:55
msgid ""
"What conditions or ``gaurds`` are required for the transition to be "
"available"
msgstr ""

#: ../workflow/introduction.rst:57
msgid ""
"These can be ``permissions`` of the user, ``roles`` a user has, ``groups`` "
"to which the user belongs, or even the boolean value of *'TALES*' "
"expressions"
msgstr ""

#: ../workflow/introduction.rst:59
msgid ""
"What ``scripts`` will be executed before and after the transition occurs "
"(again, not used much now that we have ``events``)"
msgstr ""

#: ../workflow/introduction.rst:60
msgid "How the transition is triggered"
msgstr ""

#: ../workflow/introduction.rst:62
msgid "This can be user-initiated *or* automatic"
msgstr ""

#: ../workflow/introduction.rst:64
msgid ""
"Automatic transitions happen when an object lands in a state from which they"
" are a valid exit, **and** that object fulfills **all** conditions for the "
"transition to be available."
msgstr ""

#: ../workflow/introduction.rst:65
msgid ""
"If the conditions for the automated transition are **not** met, then the "
"transition doesn't happen"
msgstr ""

#: ../workflow/introduction.rst:67
msgid "Updating the object to meet the conditions will not kick it off"
msgstr ""

#: ../workflow/introduction.rst:68
msgid ""
"You'll have to back it out of the current ``state`` and re-do the transition"
" that should have kicked it off"
msgstr ""

#: ../workflow/introduction.rst:71
msgid "How Does Workflow Work in Plone?"
msgstr ""

#: ../workflow/introduction.rst:73
msgid ""
"The tool in Plone that handles all workflow is called ``portal_workflow``"
msgstr ""

#: ../workflow/introduction.rst:75
msgid "Types must be ``workflow`` aware"
msgstr ""

#: ../workflow/introduction.rst:77
msgid ""
"Types in Plone are made *WorkflowAware* by a base content mixin from CMFCore"
" ``WorkflowAware`` (in ``CMFCatalogAware``"
msgstr ""

#: ../workflow/introduction.rst:79
msgid "Workflow is assigned by *type*"
msgstr ""

#: ../workflow/introduction.rst:81
msgid "Each type gets a *chain*"
msgstr ""

#: ../workflow/introduction.rst:82
msgid "A chain can have more than one workflow in it"
msgstr ""

#: ../workflow/introduction.rst:84
msgid ""
"``portal_workflow`` is responsible for keeping track of all information "
"about the workflow state of an object"
msgstr ""

#: ../workflow/introduction.rst:86
msgid ""
"A particular content object knows **nothing** about it's own workflow state"
msgstr ""

#: ../workflow/introduction.rst:87
msgid ""
"queries about the workflow of an object **must** be addressed to "
"portal_workflow"
msgstr ""

#: ../workflow/introduction.rst:114
msgid ""
"``portal_workflow`` is security conscious, for all aspects of workflow it "
"respects and validates the access levels of the current user"
msgstr ""

#: ../workflow/introduction.rst:116
msgid ""
"Users can only access the workflow information for which they have "
"permissions"
msgstr ""

#: ../workflow/introduction.rst:143
msgid "Moving Content Through Workflows"
msgstr ""

#: ../workflow/introduction.rst:145
msgid ""
"As stated above, any object with workflow is **always** in exactly **one** "
"``state`` for each workflow in it's chain."
msgstr ""

#: ../workflow/introduction.rst:147
msgid "When you initiate a transition, it is **instantaneous**."
msgstr ""

#: ../workflow/introduction.rst:148
msgid "What happens when this occurs?"
msgstr ""

#: ../workflow/introduction.rst:150
msgid ""
"The ``BeforeTransitionEvent`` is notified, and any subscribers to that event"
" are executed"
msgstr ""

#: ../workflow/introduction.rst:151
msgid "Any ``before script`` registered for the transition are executed."
msgstr ""

#: ../workflow/introduction.rst:152
msgid "The ``transition`` takes place"
msgstr ""

#: ../workflow/introduction.rst:154
msgid "values are set for the variables registered by the workflow"
msgstr ""

#: ../workflow/introduction.rst:155
msgid "the new ``state`` of the object is set"
msgstr ""

#: ../workflow/introduction.rst:156
msgid ""
"the new set of permissions values for roles and groups are calculated and "
"updated"
msgstr ""

#: ../workflow/introduction.rst:158
msgid "first permissions are remapped"
msgstr ""

#: ../workflow/introduction.rst:159
msgid "then group -> role mappings are changed"
msgstr ""

#: ../workflow/introduction.rst:161
msgid "the object is re-indexed for all *security related* indexes."
msgstr ""

#: ../workflow/introduction.rst:163
msgid "Any ``after script`` registered for the transition is executed"
msgstr ""

#: ../workflow/introduction.rst:164
msgid ""
"The ``AfterTransitionEvent`` is notified, and any subscribers to that event "
"are executed"
msgstr ""

#: ../workflow/introduction.rst:166
msgid ""
"In general, transitions are triggered by user action.  This takes place when"
" a user clicks on the *state* menu in the Plone UI and selects an available "
"transition, or when the user presses *save* from the **Change State** dialog"
" found in the folder listing view."
msgstr ""

#: ../workflow/introduction.rst:168
msgid ""
"As stated above, automatic transitions are found as a result of undergoing "
"manual transitions."
msgstr ""

#: ../workflow/introduction.rst:170
msgid ""
"Step 3 above can actually be executed **multiple** times when a user "
"triggers a ``transition``."
msgstr ""

#: ../workflow/introduction.rst:171
msgid "Events and scripts are executed for **each** transition that happens"
msgstr ""

#: ../workflow/introduction.rst:172
msgid ""
"For this reason, when subscribing to workflow events, it's a good idea to "
"check *which* transition just happened *before* taking any actions in your "
"handler:"
msgstr ""

#: ../workflow/local-roles.rst:2
msgid "Local Roles"
msgstr "Roles locales"

#: ../workflow/local-roles.rst:5
msgid "Local Roles on Folders"
msgstr ""

#: ../workflow/local-roles.rst:7
msgid ""
"There may be some situations where you don't want your group to have a "
"specific role across the entire site. You can manage that easily too. When "
"setting up your group in the Site Setup, do not assign it a role. Go to the "
"folder where you want the group to have specific permissions and assign the "
"group that role on the sharing tab for the folder. You can assign individual"
" users permissions at this level as well. Simply add the user to the sharing"
" tab and assign the permission to that user. When you assign roles at an "
"object level like this, you are assigning local roles. Local roles give "
"users (or groups) extra permissions in a very specific context. For example,"
" you may have two groups: pirates and ninjas. The ninjas probably don't want"
" the pirates mucking about with their content. In this case, you could "
"create a folder for the ninjas and assign their group to have a local role "
"of Owner over the folder. Uncheck the inherit permissions box and now your "
"ninjas have their own folder where they can add content and the pirates "
"cannot see or add anything to this folder. Similarly, if only the pirate "
"captain should have access to a folder, add the pirate captain user to the "
"sharing tab and select the correct permission. Don't forget to uncheck the "
"inherit permissions box, otherwise your folder will inherit permissions from"
" the rest of the site."
msgstr ""

#: ../workflow/local-roles.rst:10
msgid "Local Roles on Groups"
msgstr ""

#: ../workflow/local-roles.rst:12
msgid ""
"A state can also assign local roles to groups. This is akin to assigning "
"roles to groups on Plone's Sharing tab, but the mapping of roles to groups "
"happens on each state change, much like the mapping of roles to permissions."
" Thus, you can say that in the pending_secondary state, members of the "
"Secondary reviewers group has the ``Reviewer`` local role. This is powerful "
"stuff when combined with the more usual role-to-permission mapping."
msgstr ""

#: ../workflow/local-roles.rst:15
msgid "Additional Resources"
msgstr ""

#: ../workflow/local-roles.rst:16
msgid ""
"http://docs.plone.org/working-with-content/collaboration-and-workflow"
"/collaboration-through-sharing.html"
msgstr ""

#: ../workflow/local-roles.rst:17
msgid "http://docs.plone.org/develop/plone/security/local_roles.html"
msgstr ""

#: ../workflow/placeful-workflow.rst:2
msgid "Placeful Workflow"
msgstr "Flujo de trabajo con contexto"

#: ../workflow/placeful-workflow.rst:4
msgid ""
"Sometimes you may want a specific section of the site to allow different "
"permissions and roles than other areas of the site such as providing an "
"intranet are for internal staff to collaborate. In the past, if you wanted "
"to do this, you would need to make custom content types that were identical "
"to the standard types so you can attach an alternate workflow policy to them"
" to limit access. This just causes extra boilerplate code and confusion "
"amongst your users as they just want to create standard \"Pages\", but in "
"this area they may have to create \"Intranet Pages\"."
msgstr ""

#: ../workflow/placeful-workflow.rst:6
msgid ""
"Plone comes standard with a feature that addresses this specific issue. "
"Plone's \"Workflow Policy Support\" add-on is available, but not active by "
"default and allows site administrators to define workflow policies that only"
" apply in specific sections of the site. The name Placeful Workflow comes "
"from the fact you do this in a specific place.  Placeful workflow allows you"
" to define workflow policies that define content type to workflow mappings "
"that can be applied in any sub-folder of your Plone site."
msgstr ""

#: ../workflow/placeful-workflow.rst:11
msgid ""
"To get started with Placeful Workflow in Plone, you will need to first "
"activate the add-on via the ``Site Setup`` > ``Add-Ons`` control panel. Just"
" click ``Activate`` next to the \"Workflow Policy Support\" add-on and you "
"will be ready to start assigning local policies to folders."
msgstr ""

#: ../workflow/placeful-workflow.rst:13
msgid ""
"Create or go to any folder inside of your site and click the workflow state "
"menu and you will now see an option for ``Policy...``. Select this option to"
" begin assigning local workflow mappings to this folder."
msgstr ""

#: ../workflow/placeful-workflow.rst:15
msgid ""
"By default, the Placeful Workflow product has created some default mappings "
"for you:"
msgstr ""

#: ../workflow/placeful-workflow.rst:17
msgid "Intranet -- Sets the default workflow policy to ``Intranet/Extranet``"
msgstr ""

#: ../workflow/placeful-workflow.rst:18
msgid ""
"Old Plone -- Sets the default workflow policy to ``Community Workflow``"
msgstr ""

#: ../workflow/placeful-workflow.rst:19
msgid ""
"One State -- Sets the default workflow policy to ``Single State Workflow``"
msgstr ""

#: ../workflow/placeful-workflow.rst:20
msgid ""
"Simple Publication -- Sets the default workflow policy to ``Simple "
"Publication Workflow``"
msgstr ""

#: ../workflow/placeful-workflow.rst:22
msgid ""
"From the ``Workflow Policies`` control panel, you can create your own custom"
" mappings and then assign them via the ``Policy...`` menu option per folder "
"inside your site."
msgstr ""

#: ../workflow/placeful-workflow.rst:25
msgid "Internals of Placeful Workflow"
msgstr ""

#: ../workflow/placeful-workflow.rst:27
msgid ""
"Works by providing a more specific ``adapter`` for the ``IWorkflowChain`` "
"interface defined by DCWorkflow."
msgstr ""

#: ../workflow/placeful-workflow.rst:29
msgid ""
"This means that when you install this product, the ``portal_workflow`` tool "
"is marked with an ``IPlacefulWorkflow`` interface, and from then on, the "
"adapter defined by the product is used when looking up the workflow chain "
"for an object"
msgstr ""

#: ../workflow/placeful-workflow.rst:30
msgid ""
"A great example of the `marker pattern "
"<http://docs.plone.org/external/plone.app.dexterity/docs/behaviors"
"/providing-marker-interfaces.html>`_"
msgstr ""

#: ../workflow/placeful-workflow.rst:32
msgid ""
"You add a *workflow policy* in the location where you want to have "
"customized workflow assignments."
msgstr ""

#: ../workflow/placeful-workflow.rst:34
msgid ""
"A ``policy`` is basically just a mapping of workflows to content types.  "
"Just like what you see in ``ZMI`` > ``portal_workflow`` > ``workflows``"
msgstr ""

#: ../workflow/placeful-workflow.rst:35
msgid ""
"This policy can control workflow ''in'' the object where it is located, and "
"*below* it"
msgstr ""

#: ../workflow/placeful-workflow.rst:37
msgid "*In* means the policy applies to the object itself and its content."
msgstr ""

#: ../workflow/placeful-workflow.rst:38
msgid ""
"*Below* means that the policy applies only to any contained items (and their"
" contents as well), but not to the original object."
msgstr ""

#: ../workflow/placeful-workflow.rst:40
msgid "All this can be handled by GenericSetup as well"
msgstr ""

#: ../workflow/placeful-workflow.rst:42
msgid ""
"``portal_placeful_workflow.xml`` allows you to declare the presence of "
"policies"
msgstr ""

#: ../workflow/placeful-workflow.rst:43
msgid ""
"This is accompanied by a folder of the same name (minus the 'xml' part, of "
"course)"
msgstr ""

#: ../workflow/placeful-workflow.rst:45
msgid ""
"The folder contains one file per policy: ``policy_name.xml`` where "
"*policy_name* is replaced by the actual name of your policy"
msgstr ""

#: ../workflow/placeful-workflow.rst:47
msgid ""
"Once you've generated a policy, you can add an 'import step' in GenericSetup"
" to use it somewhere (this must be done in code)"
msgstr ""

#: ../workflow/placeful-workflow.rst:49
msgid "portal_placeful_workflow.xml:"
msgstr ""

#: ../workflow/placeful-workflow.rst:58
msgid "intranet-content.xml:"
msgstr ""

#: ../workflow/placeful-workflow.rst:78
msgid "the setup:"
msgstr ""

#: ../workflow/roles-and-permissions.rst:2
msgid "Basic Roles and Permissions in Plone"
msgstr ""

#: ../workflow/roles-and-permissions.rst:4
msgid ""
"Roles, groups, permissions, workflows, states, transitions are all a part of"
" Plone's robust security model. But you don't have to be a guru to "
"understand the basic Plone permissions you will encounter on a daily basis."
msgstr ""

#: ../workflow/roles-and-permissions.rst:7
msgid "Definitions"
msgstr ""

#: ../workflow/roles-and-permissions.rst:9
msgid ""
"Let's start off with some basic terminology. Permissions are individual "
"rights that give the user the ability to perform an action. Roles are a "
"combination of permissions. Both users and groups can be assigned roles."
msgstr ""

#: ../workflow/roles-and-permissions.rst:12
msgid "Roles"
msgstr "Roles"

#: ../workflow/roles-and-permissions.rst:14
msgid ""
"Roles are a combination of permissions that you will assign to your users. "
"Plone comes with a basic set of roles, each of which already has certain "
"permissions assigned. Below you will learn a little bit about the defaults "
"for each role."
msgstr ""

#: ../workflow/roles-and-permissions.rst:16
msgid ""
"Most of your site users have the \"Member\" role. By default, a Member can "
"see anything that is published, see the contents of a folder, see a list of "
"other portal members and groups, and see portlets. Depending on how your "
"site is customized, Members may not have access to certain portlets or "
"specific parts of the site. I keep track of what a Member has access to by "
"reminding myself that a Member cannot change content and can only see what "
"has been published. You will want to assign the Member role to your every "
"day, normal users who will not be changing content. Everyone who joins your "
"site should be assigned this role."
msgstr ""

#: ../workflow/roles-and-permissions.rst:19
msgid "Reader"
msgstr "Lector"

#: ../workflow/roles-and-permissions.rst:21
msgid ""
"The Reader role may be almost the opposite from the Member role. Readers can"
" view content items that are in the private state, but cannot make any "
"changes. You should assign people the Reader role when you want them to "
"review a piece of content that is not yet published. The Reader role is "
"great for when you want only certain people to see a piece of content. You "
"can also use the Reader role as part of a document review cycle for users "
"who would like to review your document but not make changes to the document."
msgstr ""

#: ../workflow/roles-and-permissions.rst:24
msgid "Contributor"
msgstr "Colaborador"

#: ../workflow/roles-and-permissions.rst:26
msgid ""
"A user with a Contributor role can do all the things a member can, plus add "
"content, use version control, and view content that is not in the published "
"state. A contributor cannot modify (edit) another user's content. The "
"Contributor role should be given to users who will create content but not "
"edit another person's content."
msgstr ""

#: ../workflow/roles-and-permissions.rst:29
msgid "Owner"
msgstr "Propietario"

#: ../workflow/roles-and-permissions.rst:31
msgid ""
"The owner role is inherited when a user adds a piece of content. You have to"
" have another role, like Contributor, that has the ability to add content. "
"Once you add a piece of content, you are automatically assigned the Owner "
"role over this content. When you are the Owner of a piece of content, you "
"can modify that piece of content whenever you wish, no matter what state the"
" content is in."
msgstr ""

#: ../workflow/roles-and-permissions.rst:34
msgid "Editor"
msgstr "Editor"

#: ../workflow/roles-and-permissions.rst:36
msgid ""
"A user with the Editor role by default does not have the ability to add "
"content, but can modify(edit) content and use version control. An Editor can"
" also manage properties of content and can submit content for publication. "
"The Editor role should be used when a Contributor is sending a piece of "
"content for review. The Editor will review, and change, the content and then"
" submit it for publication."
msgstr ""

#: ../workflow/roles-and-permissions.rst:39
msgid "Reviewer"
msgstr "Revisor"

#: ../workflow/roles-and-permissions.rst:41
msgid ""
"A Reviewer role picks up where the Editor leaves off. While a Reviewer does "
"not have as many rights as the Editor, the Reviewer can publish content that"
" has been sent to the submit for publication state or send it back to the "
"owner. The Reviewer also has a special portlet just for content that needs "
"to be reviewed. Once an Editor has submitted content for publication, the "
"Reviewer will review the content and then has the option to Publish or send "
"back the content for the Contributor to review. The Reviewer has the final "
"say if something gets published or not."
msgstr ""

#: ../workflow/roles-and-permissions.rst:44
msgid "Site Administrator"
msgstr "Administrador del Sitio"

#: ../workflow/roles-and-permissions.rst:46
msgid ""
"The Site Administrator role is very similar to the Manager role described "
"below, but with a few exceptions. The Site Administrator has full access to "
"manage all of the content in the portal, and can perform certain actions "
"from the site setup such as adding and removing users. They do not have "
"access to the ZMI or to actions such as activating Plone add-ons, "
"configuring caching or discussion settings."
msgstr ""

#: ../workflow/roles-and-permissions.rst:49
msgid "Manager"
msgstr "Administrador"

#: ../workflow/roles-and-permissions.rst:51
msgid ""
"The Manager role is the role that can do everything. A user with the Manager"
" role is a Site Administrator. Manager privileges are not given out lightly "
"as this role can add, delete, and make changes to any thing in the site. "
"While more than one person should have this role, it definitely should not "
"be handed out to large numbers of people. Your site Manger has access to the"
" control panel, where many site wide settings can be changed and updated. "
"The Manager can also manage things via the ZMI (Zope Management Interface)."
msgstr ""

#: ../workflow/roles-and-permissions.rst:54
msgid "Giving out permissions"
msgstr ""

#: ../workflow/roles-and-permissions.rst:56
msgid ""
"The easiest way to hand out permissions is to assign roles to groups. You "
"can create a group and assign that group a role. Then, whenever you want to "
"give someone certain permissions, you can add that user to that group. "
"Assigning roles on a group level allows you to more easily manage large "
"numbers of users."
msgstr ""

#: ../workflow/roles-and-permissions.rst:60
msgid "Permissions"
msgstr ""

#: ../workflow/roles-and-permissions.rst:62
msgid ""
"Plone's security system is based on the concept of *permissions* protecting "
"*operations* (like accessing a view, viewing a field, modifying a field, or "
"adding a type of content) that are granted to *roles*, which in turn are "
"granted to *users* and/or *groups*. In the context of developing content "
"types, permissions are typically used in three different ways:"
msgstr ""

#: ../workflow/roles-and-permissions.rst:64
msgid ""
"A content type or group of related content types often has a custom *add "
"permission* which controls who can add this type of content."
msgstr ""

#: ../workflow/roles-and-permissions.rst:66
msgid "Views (including forms) are sometimes protected by custom permissions."
msgstr ""

#: ../workflow/roles-and-permissions.rst:68
msgid ""
"Individual fields are sometimes protected by permissions, so that some users"
" can view and edit fields that others can't see."
msgstr ""

#: ../workflow/roles-and-permissions.rst:71
msgid ""
"It is easy to create new permissions. However, be aware that it is "
"considered good practice to use the standard permissions wherever possible "
"and use *workflow* to control which roles are granted these permissions on a"
" per-instance basis."
msgstr ""

#: ../workflow/roles-and-permissions.rst:74
msgid "Standard permissions"
msgstr ""

#: ../workflow/roles-and-permissions.rst:76
msgid ""
"Many of the standard permissions can be found in ``Product.CMFCore``\\'s "
"``permissions.zcml`` (``parts/omelette/Products/CMFCore/permissions.zcml``)."
" Here, you will find a short ``id`` (also known as the *Zope 3 permission "
"id*) and a longer ``title`` (also known as the *Zope 2 permission title*). "
"For historical reasons, some areas in Plone use the id, whilst others use "
"the title."
msgstr ""

#: ../workflow/roles-and-permissions.rst:78
msgid "As a rule of thumb:"
msgstr ""

#: ../workflow/roles-and-permissions.rst:80
msgid "Browser views defined in ZCML use the Zope 3 permission id."
msgstr ""

#: ../workflow/roles-and-permissions.rst:81
msgid ""
"Security checks using ``zope.security.checkPermission()`` use the Zope 3 "
"permission id"
msgstr ""

#: ../workflow/roles-and-permissions.rst:83
msgid ""
"Dexterity's ``add_permission`` FTI variable uses the Zope 3 permission id."
msgstr ""

#: ../workflow/roles-and-permissions.rst:85
msgid ""
"The ``rolemap.xml`` GenericSetup handler and workflows use the Zope 2 "
"permission title."
msgstr ""

#: ../workflow/roles-and-permissions.rst:87
msgid ""
"Security checks using ``AccessControl``’s "
"``getSecurityManager().checkPermission()``, including the methods on the "
"``portal_membership`` tool, use the Zope 2 permission title."
msgstr ""

#: ../workflow/roles-and-permissions.rst:91
msgid ""
"The most commonly used permission are shown below. The Zope 2 permission "
"title is shown in parentheses."
msgstr ""

#: ../workflow/roles-and-permissions.rst:94
msgid "``zope2.View`` (:guilabel:`View`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:94
msgid "used to control access to the standard view of a content item;"
msgstr ""

#: ../workflow/roles-and-permissions.rst:97
msgid "``zope2.DeleteObjects`` (:guilabel:`Delete objects`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:97
msgid "used to control the ability to delete child objects in a container;"
msgstr ""

#: ../workflow/roles-and-permissions.rst:100
msgid "``cmf.ModifyPortalContent`` (:guilabel:`Modify portal content`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:100
msgid "used to control write access to content items;"
msgstr ""

#: ../workflow/roles-and-permissions.rst:103
msgid "``cmf.ManagePortal`` (:guilabel:`Manage portal`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:103
msgid "used to control access to management screens;"
msgstr ""

#: ../workflow/roles-and-permissions.rst:106
msgid "``cmf.AddPortalContent`` (:guilabel:`Add portal content`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:106
msgid "the standard add permission required to add content to a folder;"
msgstr ""

#: ../workflow/roles-and-permissions.rst:109
msgid "``cmf.SetOwnProperties`` (:guilabel:`Set own properties`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:109
msgid "used to allow users to set their own member properties'"
msgstr ""

#: ../workflow/roles-and-permissions.rst:113
msgid "``cmf.RequestReview`` (:guilabel:`Request review`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:112
msgid ""
"typically used as a workflow transition guard to allow users to submit "
"content for review;"
msgstr ""

#: ../workflow/roles-and-permissions.rst:117
msgid "``cmf.ReviewPortalContent`` (:guilabel:`Review portal content`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:116
msgid ""
"usually granted to the ``Reviewer`` role, controlling the ability to publish"
" or reject content."
msgstr ""

#: ../workflow/roles-and-permissions.rst:122
msgid "``cmf.AddPortalMember`` (:guilabel:`Add portal member`)"
msgstr ""

#: ../workflow/roles-and-permissions.rst:120
msgid ""
"usually granted to the ``Site Administrator`` and ``Manager``  role, "
"controlling the ability to add new users into the site. It is also granted "
"to the ``Anonymous`` role if you have enabled self user registration."
msgstr ""

#: ../workflow/roles-and-permissions.rst:124
msgid ""
"Here is an example of how Permissions can be changed by event subscribers:"
msgstr ""

#: ../workflow/roles-and-permissions.rst:141
msgid ""
"Inside of `Products.CMFPlone` there is an event subscriber listening for "
"changes to specific registry keys and will alter the permissions in the site"
" based on the change in the setting."
msgstr ""

#: ../workflow/workflow-chains.rst:2
msgid "Multi-chain Workflows"
msgstr ""

#: ../workflow/workflow-chains.rst:4
msgid ""
"Multiple workflows can be very useful in case you have concurrent processes."
" For example, an object may be published, but require translation. You can "
"track the review state in the main workflow and the translation state in "
"another. If you index the state variable for the second workflow in the "
"catalog (the state variable is always available on the indexable object "
"wrapper so you only need to add an index with the appropriate name to "
"``portal_catalog``) you can search for all objects pending translation, for "
"example using a *Collection*."
msgstr ""

#: ../workflow/workflow-chains.rst:6
msgid ""
"Workflows are mapped to types via the ``portal_workflow`` tool. There is a "
"default workflow, indicated by the string ``(Default)``. Some types have no "
"workflow, which means that they hold no state information and typically "
"inherit permissions from their parent. It is also possible for types to have"
" *multiple workflows*. You can list multiple workflows by separating their "
"names by commas. This is called a *workflow chain*."
msgstr ""

#: ../workflow/workflow-chains.rst:8
msgid ""
"Note that in Plone, the workflow chain of an object is looked up by multi-"
"adapting the object and the workflow to the ``IWorkflowChain`` interface. "
"The adapter factory should return a tuple of string workflow names "
"(``IWorkflowChain`` is a specialisation of ``IReadSequence``, i.e. a tuple)."
" The default obviously looks at the mappings in the ``portal_workflow`` "
"tool, but it is possible to override the mapping, e.g. by using a custom "
"adapter registered for some marker interface, which in turn could be "
"provided by a type-specific behavior."
msgstr ""

#: ../workflow/workflow-chains.rst:10
msgid ""
"Multiple workflows applied in a single chain co-exist in time. Typically, "
"you need each workflow in the chain to have a different state variable name."
" The standard ``portal_workflow`` API (in particular, ``doActionFor()``, "
"which is used to change the state of an object) also assumes the transition "
"ids are unique. If you have two workflows in the chain and both currently "
"have a ``submit`` action available, only the first workflow will be "
"transitioned if you do ``portal_workflow.doActionFor(context, ‘submit’)``. "
"Plone will show all available transitions from all workflows in the current "
"object’s chain in the ``State`` drop-down, so you do not need to create any "
"custom UI for this. However, Plone always assumes the state variable is "
"called ``review_state`` (which is also the variable indexed in "
"``portal_catalog``). Therefore, the state of a secondary workflow won’t show"
" up unless you build some custom UI."
msgstr ""

#: ../workflow/workflow-chains.rst:12
msgid ""
"In terms of security, remember that the role-to-permission (and group-to-"
"local-role) mappings are event-driven and are set after each transition. If "
"you have two concurrent workflows that manage the same permissions, the "
"settings from the last transition invoked will apply. If they manage "
"different permissions (or there is a partial overlap) then only the "
"permissions managed by the most-recently-invoked workflow will change, "
"leaving the settings for other permissions untouched."
msgstr ""

#: ../workflow/workflow-variables.rst:2
msgid "Workflow Variables"
msgstr ""

#: ../workflow/workflow-variables.rst:6
msgid "This section is not ready for prime time"
msgstr ""

#: ../workflow/workflow-variables.rst:8
msgid ""
"State changes result in a number of variables being recorded, such as the "
"actor (the user that invoked the transition), the action (the id of the "
"transition), the date and time and so on. The list of variables is dynamic, "
"so each workflow can define any number of variables linked to TALES "
"expressions that are invoked to calculate the current value at the point of "
"transition. And of course, the workflow keeps track of the current state. "
"The state is exposed as a special type of workflow variable called the state"
" variable. Most workflows in Plone uses the name review_state as the state "
"variable."
msgstr ""

#: ../workflow/workflow-variables.rst:10
msgid ""
"Workflow variables are recorded for each state change in the workflow "
"history. This allows you to see when a transition occurred, who effected it,"
" and what state the object was in before or after. In fact, the \"current "
"state\" of the workflow is internally considered to be the most recent entry"
" in the workflow history."
msgstr ""

#: ../workflow/workflow-variables.rst:12
msgid ""
"Workflow variables are also the basis for worklists. They are basically "
"canned queries run against the current state of workflow variables. Plone's "
"review portlet shows all current worklists from all installed workflows. "
"This can be a bit slow, but it does meant that you can use a single portlet "
"to display an amalgamated list of all items on all worklists that apply to "
"the current user. Most Plone workflows have a single worklist that matches "
"on the review_state variable, e.g. showing all items in the pending state."
msgstr ""
