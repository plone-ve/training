# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by
# the Plone Foundation under a Creative Commons Attribution 4.0
# International license.
# This file is distributed under the same license as the Mastering Plone
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-05 04:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../behaviors_1.rst:4 ../behaviors_1.rst:20
msgid "Behaviors"
msgstr ""

#: ../behaviors_1.rst
msgid "Get the code!"
msgstr ""

#: ../behaviors_1.rst:8
msgid ""
"Get the code for this chapter (:doc:`More info <sneak>`) using this "
"command in the buildout directory:"
msgstr ""

#: ../behaviors_1.rst:14
msgid "In this part you will:"
msgstr ""

#: ../behaviors_1.rst:16
msgid "Add another field to talky by using a behavior"
msgstr ""

#: ../behaviors_1.rst:18
msgid "Topics covered:"
msgstr ""

#: ../behaviors_1.rst:25
msgid ""
"You can extend the functionality of your dexterity object by writing an "
"adapter that adapts your dexterity object to add another feature or "
"aspect."
msgstr ""

#: ../behaviors_1.rst:27
msgid ""
"But if you want to use this adapter, you must somehow know that an object"
" implements that. Also, adding more fields to an object would not be easy"
" with such an approach."
msgstr ""

#: ../behaviors_1.rst:32
msgid "Dexterity Approach"
msgstr ""

#: ../behaviors_1.rst:36
msgid ""
"Dexterity has a solution for it, with special adapters that are called "
"and registered by the name behavior."
msgstr ""

#: ../behaviors_1.rst:38
msgid ""
"A behavior can be added to any content type through the web and at "
"runtime."
msgstr ""

#: ../behaviors_1.rst:40
msgid ""
"All default views know about the concept of behaviors and when rendering "
"forms, the views also check whether there are behaviors referenced with "
"the current context and if these behavior have a schema of their own, "
"these fields get shown in addition."
msgstr ""

#: ../behaviors_1.rst:45
msgid "Names and Theory"
msgstr ""

#: ../behaviors_1.rst:49
msgid ""
"The name behavior is not a standard term in software development. But it "
"is a good idea to think of a behavior as an aspect. You are adding an "
"aspect to your content type and you want to write your aspect in such a "
"way that it works independently of the content type on which the aspect "
"is applied. You should not have dependencies to specific fields of your "
"object or to other behaviors."
msgstr ""

#: ../behaviors_1.rst:51
msgid ""
"Such an object allows you to apply the `Open/closed principle`_ to your "
"dexterity objects."
msgstr ""

#: ../behaviors_1.rst:62
msgid "Practical example"
msgstr ""

#: ../behaviors_1.rst:66
msgid "So, let us write our own small behavior."
msgstr ""

#: ../behaviors_1.rst:68
msgid ""
"In the future, we want our presentation to be represented in Lanyrd (a "
"Social Conference Directory - Lanyrd.com) too. For now we will just "
"provide a link so that visitors can collaborate easily with the Lanyrd "
"site."
msgstr ""

#: ../behaviors_1.rst:70
msgid ""
"So for now, our behavior just adds a new field for storing the url to "
"Lanyrd."
msgstr ""

#: ../behaviors_1.rst:72
msgid ""
"We want to keep a clean structure, so we create a :file:`behaviors` "
"directory first, and include it into the zcml declarations of our "
":file:`configure.zcml`."
msgstr ""

#: ../behaviors_1.rst:78
msgid ""
"Then, we add an empty :file:`behaviors/__init__.py` and a "
":file:`behaviors/configure.zcml` containing"
msgstr ""

#: ../behaviors_1.rst
msgid "Advanced reference"
msgstr ""

#: ../behaviors_1.rst:84
msgid ""
"The original documentation is doctest code, so no documentation and no "
"debuggable test."
msgstr ""

#: ../behaviors_1.rst:86
msgid ""
"It can be a bit confusing when to use factories or marker interfaces and "
"when not to."
msgstr ""

#: ../behaviors_1.rst:88
msgid ""
"If you do not define a factory, your attributes will be stored directly "
"on the object. This can result in clashes with other behaviors."
msgstr ""

#: ../behaviors_1.rst:90
msgid ""
"You can avoid this by using the plone.behavior.AnnotationStorage factory."
" This one stores your attributes in an :ref:`Annotation "
"<plone:annotations>`. But then you *must* use a marker interface if you "
"want to have custom viewlets, browser views or portlets."
msgstr ""

#: ../behaviors_1.rst:93
msgid ""
"Without it, you would have no interface against which you could register "
"your views."
msgstr ""

#: ../behaviors_1.rst:114
msgid "And a :file:`behaviors/social.py` containing:"
msgstr ""

#: ../behaviors_1.rst:147
msgid "Let's go through this step by step."
msgstr ""

#: ../behaviors_1.rst:149
msgid ""
"We register a behavior in :ref:`behaviors/configure.zcml <social-"
"behavior-zcml-label>`. We do not say for which content type this behavior"
" is valid. You do this through the web or in the GenericSetup profile."
msgstr ""

#: ../behaviors_1.rst:150
msgid ""
"We create a marker interface in :ref:`behaviors/social.py <social-"
"behavior-python-label>` for our behavior and make it also a schema "
"containing the fields we want to declare. We could just define schema "
"fields on a zope.intereface class, but we use an extended form from "
"`plone.supermodel`_, else we could not use the fieldset features."
msgstr ""

#: ../behaviors_1.rst:152
msgid ""
"We also add a `fieldset`_ so that our fields are not mixed with the "
"normal fields of the object."
msgstr ""

#: ../behaviors_1.rst:153
msgid "We add a normal `URI`_ schema field to store the URI to lanyrd."
msgstr ""

#: ../behaviors_1.rst:154
msgid ""
"We mark our schema as a class that also implements the "
"`IFormFieldProvider`_ interface. This is a marker interface, we do not "
"need to implement anything to provide the interface."
msgstr ""

#: ../behaviors_1.rst:159
msgid "Adding it to our talk"
msgstr ""

#: ../behaviors_1.rst:163
msgid ""
"We could add this behavior now via the plone control panel. But instead, "
"we will do it directly and properly in our GenericSetup profile"
msgstr ""

#: ../behaviors_1.rst:165
msgid "We must add the behavior to :file:`profiles/default/types/talk.xml`:"
msgstr ""

