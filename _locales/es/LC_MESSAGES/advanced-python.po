# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by
# the Plone Foundation under a Creative Commons Attribution 4.0
# International license.
# This file is distributed under the same license as the Plone 5 Training
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# Leonardo J. Caballero G. <leonardocaballero@gmail.com>, 2018.
msgid ""
msgstr ""
"Project-Id-Version: Plone 5 Training 2017\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-19 05:42-0400\n"
"PO-Revision-Date: 2025-04-13 19:49+0200\n"
"Last-Translator: Leonardo J. Caballero G. <leonardocaballero@gmail.com>\n"
"Language-Team: es\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.5\n"
"Generated-By: Babel 2.5.0\n"

#: ../advanced-python/background.rst:2
msgid "The Web and Python"
msgstr "La Web y Python"

#: ../advanced-python/background.rst:3
msgid ""
"In the days before the popularity of frameworks like Django, Flask and other "
"frameworks soared, development with Python for the web was a bit harder for "
"comers."
msgstr ""
"En los días anteriores a que la popularidad de frameworks como Django, Flask "
"y otros frameworks se disparara, el desarrollo con Python para la web era un "
"poco más difícil para los recién llegados."

#: ../advanced-python/background.rst:7
msgid ""
"Python applications were often designed for only one of CGI, FastCGI, "
"mod_python or some other custom API of a specific web server. This wide "
"variety of choices can be a problem for new Python users,because generally "
"speaking, their choice of web framework limited their choice of usable web "
"servers, and vice versa."
msgstr ""
"Las aplicaciones de Python a menudo se diseñaban solo para uno de los CGI, "
"FastCGI, mod_python o alguna otra API personalizada de un servidor web "
"específico. Esta amplia variedad de opciones puede ser un problema para los "
"nuevos usuarios de Python, porque en términos generales, su elección de "
"marco web limitó su elección de servidores web utilizables, y viceversa."

#: ../advanced-python/background.rst:15
msgid "WSGI"
msgstr "WSGI"

#: ../advanced-python/background.rst:17
msgid ""
"WSGI was created as a low-level interface between web servers and web "
"applications or  frameworks to promote a common ground for portable web "
"application development. This is similar to Java's \"servlet\" API makes it "
"possible for applications written with any Java web application framework to "
"run in any web server that supports the servlet API. [pep-333]"
msgstr ""
"WSGI se creó como una interfaz de bajo nivel entre servidores web y "
"aplicaciones web o marcos para promover un terreno común para el desarrollo "
"de aplicaciones web portátiles. Esto es similar a la API de \"servlet\" de "
"Java, lo que hace posible que las aplicaciones escritas con cualquier marco "
"de aplicación web de Java se ejecuten en cualquier servidor web que admita "
"la API de servlet. [PEP-333]"

#: ../advanced-python/background.rst:27
msgid ""
"As stated above, WSGI was created to ease the development of Python web "
"applications. The handling of the requests from browser is done by a normal "
"HTTP server, which routes the request to the WSGI container, which in turn "
"runs the WSGI application."
msgstr ""
"Como se indicó anteriormente, WSGI se creó para facilitar el desarrollo de "
"aplicaciones web de Python. El manejo de las solicitudes desde el navegador "
"se realiza mediante un servidor HTTP normal, que enruta la solicitud al "
"contenedor WSGI, que a su vez ejecuta la aplicación WSGI."

#: ../advanced-python/background.rst:32
msgid "The following illustration demonstrates this setup:"
msgstr "En la siguiente ilustración se muestra esta configuración:"

#: ../advanced-python/background.rst:37
msgid ""
"This setup promotes scalability and flexibility. As a result you can mix and "
"match any of the above mentioned servers, with any of the WSGI framework, "
"below. In fact, if you desire to, you build a web application mixing parts "
"from different WSGI frameworks."
msgstr ""
"Esta configuración promueve la escalabilidad y la flexibilidad. Como "
"resultado, puede mezclar y combinar cualquiera de los servidores mencionados "
"anteriormente, con cualquiera de los marcos WSGI, a continuación. De hecho, "
"si lo desea, cree una aplicación web mezclando partes de diferentes marcos "
"WSGI."

#: ../advanced-python/data_model.rst:2
msgid "Exploiting Python's data model"
msgstr "Explotación del modelo de datos de Python"

#: ../advanced-python/data_model.rst:4
msgid ""
"To make our session store easy to as if it was a dictionary, we implement "
"out middleware by crafting a class which behaves like that. For that "
"purpose, we are taking a small diversion from WSGI to Python's Data Model. "
"We enter the realm of so called **magic methods** also known as "
"``__dunder__`` (which stands of double underscore)."
msgstr ""
"Para que nuestro almacén de sesiones sea fácil de usar como si fuera un "
"diccionario, implementamos nuestro middleware creando una clase que se "
"comporta así. Para ese propósito, estamos tomando un pequeño desvío de WSGI "
"al modelo de datos de Python. Entramos en el reino de los llamados **métodos "
"mágicos** también conocidos como ``__dunder__`` (que significa doble guión "
"bajo)."

#: ../advanced-python/data_model.rst:10
msgid ""
"The first thing to know about special methods is that they are meant to be "
"called by the Python interpreter, and not by you. [Fluent Python, pg. 8]."
msgstr ""
"Lo primero que hay que saber sobre los métodos especiales es que están "
"pensados para ser llamados por el intérprete de Python, y no por usted. "
"[Python fluido, pág. 8]."

#: ../advanced-python/data_model.rst:13
msgid "Our goal is to build the following elements of a WSGI framework."
msgstr ""
"Nuestro objetivo es construir los siguientes elementos de un framework WSGI."

#: ../advanced-python/data_model.rst:16
msgid "A Dictionary like Session storage"
msgstr "Un diccionario como el almacenamiento de sesión"

#: ../advanced-python/data_model.rst:18
msgid ""
"Using a Python session like storage we should be able to check membership "
"use `in`, e.g.::"
msgstr ""
"Usando una sesión de Python como el almacenamiento, deberíamos poder "
"verificar el uso de la membresía `en`, por ejemplo::"

#: ../advanced-python/data_model.rst:23
msgid "We should also be able to retrieve items as if was a dictionary::"
msgstr ""
"También deberíamos ser capaces de recuperar elementos como si fuera un "
"diccionario::"

#: ../advanced-python/data_model.rst:28
msgid ""
"Our goal is to create a middleware that stores information in some kind of a "
"persistent storage. For simplicity we start by writing this information to a "
"file on a disk, but this can easily be extended to a Redis storage, MongoDB "
"or any database of your liking. Let's assume though that session data is "
"unstructured might look like a dictionary of session ID as keys, with values "
"which are another dictionary:"
msgstr ""
"Nuestro objetivo es crear un middleware que almacene información en algún "
"tipo de almacenamiento persistente. Para simplificar, comenzamos escribiendo "
"esta información en un archivo en un disco, pero esto se puede extender "
"fácilmente a un almacenamiento Redis, MongoDB o cualquier base de datos de "
"su agrado. Sin embargo, supongamos que los datos de sesión no estructurados "
"pueden parecerse a un diccionario de ID de sesión como claves, con valores "
"que son otro diccionario:"

#: ../advanced-python/data_model.rst:45
msgid "Requests read only attributes"
msgstr "Solicitudes de atributos de solo lectura"

#: ../advanced-python/data_model.rst:47
msgid ""
"A Request object is a wrapper around the environment. Some frameworks, like "
"Bottle, Flask and WebOb, make the attribute of a Request object read only."
msgstr ""
"Un objeto Request es un contenedor alrededor del entorno. Algunos marcos, "
"como Bottle, Flask y WebOb, hacen que el atributo de un objeto Request sea "
"de solo lectura."

#: ../advanced-python/data_model.rst:50
msgid ""
"The most obvious way is to use ``@property``, but this creates a very "
"verbose code, here is an example from `web.request.Request` (which is almost "
"1000 lines of code long!):"
msgstr ""
"La forma más obvia es usar ``@property``, pero esto crea un código muy "
"detallado, aquí hay un ejemplo de `web.request.Request` (¡que tiene casi "
"1000 líneas de código!):"

#: ../advanced-python/data_model.rst:88
msgid ""
"We can do much better than creating methods and decorating them with "
"properties. Instead we craft a special container class which wrapps the "
"environment and allows us to access keys as if they where attributes."
msgstr ""
"Podemos hacer mucho mejor que crear métodos y decorarlos con propiedades. En "
"su lugar, creamos una clase contenedor especial que se adapta al entorno y "
"nos permite acceder a las claves como si fueran atributos."

#: ../advanced-python/data_model.rst:98
msgid "Quick access to properties"
msgstr "Acceso rápido a las propiedades"

#: ../advanced-python/data_model.rst:100
msgid ""
"Sometimes accessing a property can be expensive! As can be seen in the "
"example above, building the host URL, we make 4 dictionary lookups, which "
"isn't taking much, but if we pass our Request object through 4 middlewares "
"each asking for this property, we already make 16 lookups. This could be "
"improved by calculating such properties and save the result, by using a "
"specially crafted decorator:"
msgstr ""
"¡A veces acceder a una propiedad puede ser costoso! Como se puede ver en el "
"ejemplo anterior, al construir la URL del host, hacemos 4 búsquedas en el "
"diccionario, lo que no está tomando mucho, pero si pasamos nuestro objeto "
"Request a través de 4 middlewares cada uno solicitando esta propiedad, ya "
"hacemos 16 búsquedas. Esto podría mejorarse calculando dichas propiedades y "
"guardar el resultado, mediante el uso de un decorador especialmente diseñado:"

#: ../advanced-python/data_model.rst:119
msgid "Abitility to extened"
msgstr "Capacidad para extened"

#: ../advanced-python/data_model.rst:121
msgid ""
"If we want our framework to be public it might be a good idea to have some "
"kind of a plugin system. But even if our framework is intended for a use of "
"a small team of developers, it might be a good idea to supply some base "
"classes and maybe meta-classes to make sure development and extension are "
"easy enough, but also safe to use. For example, suppose we want to replace "
"our dictionary based session with a Redis cache, but we don't want to break "
"the API. We do this with caution, and we think, we might want to replace "
"Redis in some other Key-Value storage. We demonstrate, how the use of meta "
"classes can enforce programmers, to obay some certain structure, with out "
"throwing a ``RuntimeError`` or an ``AttributeError``, which in some cases "
"might be too late."
msgstr ""
"Si queremos que nuestro framework sea público, puede ser una buena idea "
"tener algún tipo de sistema de plugins. Pero incluso si nuestro marco está "
"diseñado para el uso de un pequeño equipo de desarrolladores, podría ser una "
"buena idea proporcionar algunas clases base y tal vez metaclases para "
"asegurarse de que el desarrollo y la extensión sean lo suficientemente "
"fáciles, pero también seguros de usar. Por ejemplo, supongamos que queremos "
"reemplazar nuestra sesión basada en diccionario por una caché de Redis, pero "
"no queremos romper la API. Hacemos esto con precaución y pensamos que es "
"posible que queramos reemplazar Redis en algún otro almacenamiento de clave-"
"valor. Demostramos cómo el uso de metaclases puede obligar a los "
"programadores a obtener una cierta estructura, sin lanzar un "
"``RuntimeError`` o un ``AttributeError``, que en algunos casos podría ser "
"demasiado tarde."

#: ../advanced-python/functional.rst:2
msgid "Functional Python"
msgstr "Python Funcional"

#: ../advanced-python/functional.rst:4 ../advanced-python/metaclasses.rst:4
msgid "HBD"
msgstr "HBD"

#: ../advanced-python/hello_world.rst:2
msgid "Hello WSGI"
msgstr "Hola WSGI"

#: ../advanced-python/hello_world.rst:4
msgid ""
"A WSGI application is just a callable object the responds to requests by "
"taking two arguments. The first one is the WSGI ``environment`` and the "
"second is the ``start_response``. The ``environment`` is a Python dictionary "
"containing information about the CGI environment. ``start_response`` is a "
"callback which takes two inputs the response ``status`` and ``headers``. The "
"status is astring representation like ``200 OK`` or any other HTTP status "
"code followed by a word. ``headers`` is a list of two values tuples or "
"possible HTTP headers. The return value of ``start`` response is another "
"callable which when invoked return the body of the response."
msgstr ""
"Una aplicación WSGI no es más que un objeto invocable que responde a las "
"solicitudes tomando dos argumentos. El primero es el ''ambiente'' del WSGI y "
"el segundo es el ``start_response``. El ``environment`` es un diccionario de "
"Python que contiene información sobre el entorno CGI. ``start_response`` es "
"una devolución de llamada que toma dos entradas: la respuesta, ``status`` y "
"``headers``. El estado es una representación de cadena como ``200 OK`` o "
"cualquier otro código de estado HTTP seguido de una palabra. ``headers`` es "
"una lista de dos valores, tuplas o posibles encabezados HTTP. El valor "
"devuelto de la respuesta ``start`` es otro invocable que, cuando se invoca, "
"devuelve el cuerpo de la respuesta."

#: ../advanced-python/hello_world.rst:16
msgid ""
"It is the responsiblity of the WSGI server to implement this callback. That "
"is, the Python web application or the framework simply recieve it."
msgstr ""
"Es responsabilidad del servidor WSGI implementar esta devolución de llamada. "
"Es decir, la aplicación web Python o el framework simplemente lo reciben."

#: ../advanced-python/hello_world.rst:19
msgid ""
"The WSGI application is invoked with the ``environment`` and "
"``start_response``, it may or may not use information from the "
"``environment``, when done it should return an iterable yielding zero or "
"more strings which then become the body of the response. It may also "
"manipulate the headers passed on to ``start_response`` before invoking it."
msgstr ""
"La aplicación WSGI se invoca con el ``environment`` y ``start_response``, "
"puede o no usar información del ``environment``, cuando se hace debe "
"devolver un iterable que produce cero o más cadenas que luego se convierten "
"en el cuerpo de la respuesta. También puede manipular los encabezados "
"pasados a ``start_response`` antes de invocarlo."

#: ../advanced-python/hello_world.rst:26
msgid "The following is a complete valid WSGI application:"
msgstr "La siguiente es una solicitud WSGI válida y completa:"

#: ../advanced-python/hello_world.rst:41
msgid "Running a WSGI application"
msgstr "Ejecución de una aplicación WSGI"

#: ../advanced-python/hello_world.rst:43
msgid ""
"To actually make use of the above example, you need to invoke it with a "
"valid WSGI server. Luckily, we don't need to fully setup a HTTP server, "
"because the Python standard library already has already s simple HTTP server "
"which implements the WSGI protocal which we can use to test our app. To make "
"use of it you can do:"
msgstr ""
"Para hacer uso del ejemplo anterior, debe invocarlo con un servidor WSGI "
"válido. Afortunadamente, no necesitamos configurar completamente un servidor "
"HTTP, porque la biblioteca estándar de Python ya tiene un servidor HTTP "
"simple que implementa el protocolo WSGI que podemos usar para probar nuestra "
"aplicación. Para hacer uso de ella puedes hacer:"

#: ../advanced-python/hello_world.rst:69
msgid ""
"In reality, a WSGI server is usually depoloyed behing a full blown HTTP "
"server, which serves as a reverse proxy for the WSGI server. That is, the "
"HTTP server (for example NGinx) listen to HTTP or HTTPS requests on port 80 "
"or 443 and then redirects them to the appropriate socket to which the WSGI "
"server is bound to."
msgstr ""
"En realidad, un servidor WSGI generalmente se divide detrás de un servidor "
"HTTP completo, que sirve como un proxy inverso para el servidor WSGI. Es "
"decir, el servidor HTTP (por ejemplo, Nginx) escucha las solicitudes HTTP o "
"HTTPS en el puerto 80 o 443 y, a continuación, las redirige al socket "
"adecuado al que está enlazado el servidor WSGI."

#: ../advanced-python/hello_world.rst:76
msgid "Excercise 1"
msgstr "Ejercicio 1"

#: ../advanced-python/hello_world.rst:78
msgid "Write your own callable class which is a valid WSGI application."
msgstr "Escriba su propia clase invocable, que es una aplicación WSGI válida."

#: ../advanced-python/hello_world.rst:80 ../advanced-python/middlewares.rst:111
#: ../advanced-python/middlewares.rst:148 ../advanced-python/routing.rst:45
#: ../advanced-python/routing.rst:165
msgid "Solution"
msgstr "Solución"

#: ../advanced-python/index.rst:7
msgid "How to build your own webframework from scracth"
msgstr "Cómo construir tu propio marco web a partir desde cero"

#: ../advanced-python/index.rst:9
msgid "Contents:"
msgstr "Contenidos:"

#: ../advanced-python/index.rst:26
msgid "Indices and tables"
msgstr "Indices y tablas"

#: ../advanced-python/index.rst:28
msgid ":ref:`genindex`"
msgstr ":ref:`genindex`"

#: ../advanced-python/index.rst:29
msgid ":ref:`modindex`"
msgstr ":ref:`modindex`"

#: ../advanced-python/index.rst:30
msgid ":ref:`search`"
msgstr ":ref:`search`"

#: ../advanced-python/intro.rst:2
msgid "About this course"
msgstr "Acerca de este curso"

#: ../advanced-python/intro.rst:4
msgid ""
"This one day course invites you to build your own micro web framework in "
"Python. It will help you to fundamentally understand how common Python web "
"frameworks work."
msgstr ""
"Este curso de un día te invita a construir tu propio framework micro web en "
"Python. Le ayudará a comprender fundamentalmente cómo funcionan los marcos "
"web comunes de Python."

#: ../advanced-python/intro.rst:8
msgid ""
"To get the most out of this course, it is expected that you already, have "
"some experience working with Python some background on web development with "
"Python."
msgstr ""
"Para sacar el máximo provecho de este curso, se espera que ya tengas algo de "
"experiencia trabajando con Python y algunos antecedentes en desarrollo web "
"con Python."

#: ../advanced-python/intro.rst:12
msgid ""
"We will start by exploring WSGI, a Python protocol for connecting Python "
"application to web servers. We continue our journey to build the framework "
"using Python language features which might be less familiar to Python "
"beginners and maybe even developers with several years of experience in "
"Python."
msgstr ""
"Comenzaremos explorando WSGI, un protocolo de Python para conectar "
"aplicaciones de Python a servidores web. Continuamos nuestro viaje para "
"construir el marco utilizando características del lenguaje Python que pueden "
"ser menos familiares para los principiantes de Python y tal vez incluso para "
"los desarrolladores con varios años de experiencia en Python."

#: ../advanced-python/intro.rst:18
msgid ""
"These topics are Python's data model, meta-classes and functional "
"programming."
msgstr ""
"Estos temas son el modelo de datos de Python, las metaclases y la "
"programación funcional."

#: ../advanced-python/metaclasses.rst:2
msgid "Metaclasses"
msgstr "Metaclases"

#: ../advanced-python/middlewares.rst:2
msgid "Middlewares"
msgstr "Middlewares"

#: ../advanced-python/middlewares.rst:4
msgid ""
"A middleware is an object that wrapps the original application, hence the "
"name. A middle is called between the application and the server. It can "
"modify the response or the environment or route requests to different "
"application objects."
msgstr ""
"Un middleware es un objeto que crea la aplicación original, de ahí su "
"nombre. Se llama a un intermediario entre la aplicación y el servidor. Puede "
"modificar la respuesta o el entorno o enrutar solicitudes a diferentes "
"objetos de la aplicación."

#: ../advanced-python/middlewares.rst:13
msgid ""
"Middlewares and apps are agnostic to each other, so we can plumb any WSGI "
"app to our middleware, and our middleware to any WSGI app. Middleware can be "
"chained, allowing our response or request to go through multiple phases of "
"processing."
msgstr ""
"Los middlewares y las aplicaciones son independientes entre sí, por lo que "
"podemos conectar cualquier aplicación WSGI a nuestro middleware, y nuestro "
"middleware a cualquier aplicación WSGI. El middleware se puede encadenar, lo "
"que permite que nuestra respuesta o solicitud pase por múltiples fases de "
"procesamiento."

#: ../advanced-python/middlewares.rst:19
msgid ""
"Here is for example how the Django web framework chains multiple middlewares "
"before calling the application:"
msgstr ""
"A continuación, se muestra un ejemplo de cómo el marco web Django encadena "
"varios middlewares antes de llamar a la aplicación:"

#: ../advanced-python/middlewares.rst:36
msgid ""
"Django imports these middlewares from the their specified module and plumbs "
"them one after another. Let's see how we can do that too."
msgstr ""
"Django importa estos middlewares desde el módulo especificado y los sondea "
"uno tras otro. Veamos cómo podemos hacer eso también."

#: ../advanced-python/middlewares.rst:40
msgid ""
"Other frameworks use ``extensions`` sometimes also called ``plugins`` or "
"``includes``. For example, the Flask framework really wraps the "
"``Application`` instance:"
msgstr ""
"Otros frameworks usan ``extensiones`` a veces también llamados ``plugins`` o "
"``includes``. Por ejemplo, el marco Flask realmente envuelve la instancia de "
"``Application``:"

#: ../advanced-python/middlewares.rst:61
msgid "``Bottle.py`` has a similar approach:"
msgstr "``Bottle.py`` tiene un enfoque similar:"

#: ../advanced-python/middlewares.rst:78
msgid ""
"Bottle hides the fact the the ``app.install`` command is wrapping your "
"application with a call plugin which takes place before your application and "
"after your application login. These action could be for example opening and "
"closing connections to the database before and after the request if needed."
msgstr ""
"Bottle oculta el hecho de que el comando ``app.install`` está envolviendo su "
"aplicación con un complemento de llamada que tiene lugar antes de su "
"aplicación y después de iniciar sesión en su aplicación. Estas acciones "
"podrían ser, por ejemplo, abrir y cerrar conexiones a la base de datos antes "
"y después de la solicitud, si es necesario."

#: ../advanced-python/middlewares.rst:85
msgid "A Simple WSGI Middleware"
msgstr "Un simple middleware WSGI"

#: ../advanced-python/middlewares.rst:87
msgid ""
"As an example we show a simple WSGI middle which logs the environment "
"dictionary to the console:"
msgstr ""
"A modo de ejemplo, mostramos un medio WSGI simple que registra el "
"diccionario del entorno en la consola:"

#: ../advanced-python/middlewares.rst:106
msgid "Exercise 2"
msgstr "Ejercicio 2"

#: ../advanced-python/middlewares.rst:108
msgid ""
"Implement your own middleware which capitalizes the response you original "
"application return."
msgstr ""
"Implemente su propio middleware que capitalice la respuesta que devuelve la "
"aplicación original."

#: ../advanced-python/middlewares.rst:135
msgid "Exercise 3"
msgstr "Ejercicio 3"

#: ../advanced-python/middlewares.rst:137
msgid ""
"Implement your own middleware which reverses the response. Upon calling this "
"middleware twice you should see the original response, e.g.:"
msgstr ""
"Implemente su propio middleware que revierta la respuesta. Al llamar a este "
"middleware dos veces, debería ver la respuesta original, por ejemplo:"

#: ../advanced-python/raw_wsgi.rst:2
msgid "From Raw WSGI to a framework"
msgstr "Desde un Crudo Raw WSGI a un framework"

#: ../advanced-python/raw_wsgi.rst:4
msgid ""
"While useful for understanding how WSGI works, the examples shown until now "
"are still far being called a framework. A Python webframework usually has "
"the following attributes:"
msgstr ""
"Si bien es útil para comprender cómo funciona WSGI, los ejemplos mostrados "
"hasta ahora todavía están lejos de llamarse un marco. Un marco web de Python "
"suele tener los siguientes atributos:"

#: ../advanced-python/raw_wsgi.rst:8
msgid ""
"It pre-process the environment and yields some `request` object for the "
"programmer to work with. This request is sometimes injected to the callable "
"we program, as for example in Pyramid:"
msgstr ""
"Preprocesa el entorno y produce algún objeto de \"solicitud\" para que el "
"programador trabaje con él. Esta solicitud a veces se inyecta en el "
"invocable que programamos, como por ejemplo en Pyramid:"

#: ../advanced-python/raw_wsgi.rst:25
msgid "or in Django:"
msgstr "o en Django:"

#: ../advanced-python/raw_wsgi.rst:34
msgid ""
"In other cases it is a global instance object you have to explicitly import "
"and make use of, as in the case of `Flask` or `Bottle`:"
msgstr ""
"En otros casos, se trata de un objeto de instancia global que hay que "
"importar y utilizar de forma explícita, como en el caso de `Flask` o "
"`Bottle`:"

#: ../advanced-python/raw_wsgi.rst:48
msgid ""
"Add a Response wrapper, which makes it easier to write correct responses.    "
"As such, we don't have manually call `start_response` every time. Nor do we "
"remember that our return value is some kind of iterable. Here is an example "
"from `Flask`:"
msgstr ""
"Agregue un contenedor de respuesta, lo que facilita la escritura de "
"respuestas correctas. Como tal, no tenemos que llamar manualmente a "
"`start_response` cada vez. Tampoco recordamos que nuestro valor de retorno "
"es una especie de iterable. Aquí hay un ejemplo de `Flask`:"

#: ../advanced-python/raw_wsgi.rst:60
msgid ""
"Add some smart way of handling URL and request query parameters. For example "
"Django injects URL parameter to your application logic, which allowes you to "
"make explicit use of them:"
msgstr ""
"Agregue alguna forma inteligente de manejar los parámetros de consulta de "
"URL y solicitud. Por ejemplo, Django inyecta el parámetro URL en la lógica "
"de su aplicación, lo que le permite hacer un uso explícito de ellos:"

#: ../advanced-python/raw_wsgi.rst:82
msgid ""
"Forms are processed and saved into a Dictionary like object, request.POST_ "
"and query data in saved into a request.GET_."
msgstr ""
"Los formularios se procesan y se guardan en un diccionario como objeto, "
"request.POST_ y los datos de consulta se guardan en una request.GET_."

#: ../advanced-python/raw_wsgi.rst:85
msgid ""
"Add session and cookie management such that you manage some state. Using "
"cookies you can store information in the browser, for example login cookie. "
"And using sessions you can remember how the user interacted with your "
"website, for example you can remember the login date and time."
msgstr ""
"Agregue la administración de sesiones y cookies de modo que administre algún "
"estado. Mediante el uso de cookies, puede almacenar información en el "
"navegador, por ejemplo, una cookie de inicio de sesión. Y usando sesiones, "
"puede recordar cómo interactuó el usuario con su sitio web, por ejemplo, "
"puede recordar la fecha y la hora de inicio de sesión."

#: ../advanced-python/raw_wsgi.rst:91
msgid "Optionally, add HTML templating."
msgstr "Opcionalmente, agregue plantillas HTML."

#: ../advanced-python/raw_wsgi.rst:92
msgid ""
"Optionally, add some persistency layer, e.g ORM or a NoSQL abstraction layer."
msgstr ""
"Opcionalmente, agregue alguna capa de persistencia, por ejemplo, ORM o una "
"capa de abstracción NoSQL."

#: ../advanced-python/raw_wsgi.rst:95
msgid ""
"Alas, we are not going to implement all those in just a couple of hours. "
"Instead, we are going to see how we can exploit Python's data model to build "
"convenient Python APIs for out Nano Python framework. We start by "
"implementing dictionary like session storage."
msgstr ""
"Por desgracia, no vamos a implementar todo eso en solo un par de horas. En "
"su lugar, vamos a ver cómo podemos explotar el modelo de datos de Python "
"para crear API de Python convenientes para nuestro marco de trabajo Nano "
"Python. Comenzamos implementando el almacenamiento de sesión similar al "
"diccionario."

#: ../advanced-python/routing.rst:2
msgid "Routing"
msgstr "Rutas"

#: ../advanced-python/routing.rst:4
msgid ""
"Routing is the mechanism which allows our application to call different "
"parts according to the requested URL. Until now only saw applications that "
"always give the same response to any requested URL."
msgstr ""
"El enrutamiento es el mecanismo que permite a nuestra aplicación llamar a "
"diferentes partes según la URL solicitada. Hasta ahora solo se veían "
"aplicaciones que siempre dan la misma respuesta a cualquier URL solicitada."

#: ../advanced-python/routing.rst:10
msgid "Using ``PATH_INFO``"
msgstr "Usando ``PATH_INFO``"

#: ../advanced-python/routing.rst:11
msgid ""
"The requested URL contains a ``PATH_INFO`` which is passed to our WSGI "
"application via the ``environment`` dictionary. We can write our application "
"as a giant case switch to match a specific ``PATH_INFO`` to a specific "
"behavior:"
msgstr ""
"La URL solicitada contiene un ``PATH_INFO`` que se pasa a nuestra aplicación "
"WSGI a través del diccionario ``environment``. Podemos escribir nuestra "
"aplicación como un interruptor de caso gigante para que coincida con un "
"``PATH_INFO`` específico con un comportamiento específico:"

#: ../advanced-python/routing.rst:35
msgid ""
"This would be very un-pythonic and cumbersome to extend. Essentially, this "
"problem is solved by all web framework with some kind of a routing "
"middleware. But before we examine how it is done by some of the most famous "
"WSGI frameworks, we implement a primitive routing middleware on our own."
msgstr ""
"Esto sería muy poco pythonico y engorroso de extender. Esencialmente, este "
"problema se resuelve mediante todos los marcos web con algún tipo de "
"middleware de enrutamiento. Pero antes de examinar cómo lo hacen algunos de "
"los frameworks WSGI más famosos, implementamos un middleware de enrutamiento "
"primitivo por nuestra cuenta."

#: ../advanced-python/routing.rst:41
msgid "Exercise 4"
msgstr "Ejercicio 4"

#: ../advanced-python/routing.rst:42
msgid ""
"A small improvement would be to replace the giant ``if ... elif ... else`` "
"with a dictionary and map a ``PATH_INFO`` to a callable. The middleware "
"should use this mapping to call the correct WSGI callable."
msgstr ""
"Una pequeña mejora sería reemplazar el gigante ``if ... elif ... else`` con "
"un diccionario y asigna un ``PATH_INFO`` a un invocable. El middleware debe "
"usar esta asignación para llamar al WSGI correcto."

#: ../advanced-python/routing.rst:73
msgid ""
"While this solution is pretty primitive it is understand and extend. "
"Essententialy, many WSGI framework have some kind of a ``Mapping`` class "
"which is responsible for this mechanism. For example, in Djanog one defines "
"in ``urls.py`` a list of patters, which are a regular expression and "
"callable ``view``. Here is an example from the most venerable Django polls "
"tutorial:"
msgstr ""
"Si bien esta solución es bastante primitiva, es comprensible y ampliada. "
"Esencialmente, muchos marcos WSGI tienen algún tipo de clase de ``Mapeo`` "
"que es responsable de este mecanismo. Por ejemplo, en Djanog se define en "
"``urls.py`` una lista de patrones, que son una expresión regular y una "
"``view`` invocable. Aquí hay un ejemplo del tutorial de encuestas de Django "
"más venerable:"

#: ../advanced-python/routing.rst:93
msgid ""
"The ``url`` items are then matched by django.urls.resolvers.ResolverMatch_ A "
"similar approach is also taken by the more modern ``aiohttp`` (an honorable "
"reference, even though it's not a WSGI framework):"
msgstr ""
"Los elementos ``url`` son entonces comparados por django.urls.resolvers."
"ResolverMatch_Un enfoque similar también es adoptado por el más moderno "
"``aiohttp`` (una referencia honorable, aunque no es un marco WSGI):"

#: ../advanced-python/routing.rst:105
msgid "Pyramid does this too:"
msgstr "Pyramid también hace esto:"

#: ../advanced-python/routing.rst:114
msgid ""
"Here ``add_route`` creates an association between a ``route_name`` and a "
"pattern. ``add_view`` connects the callable ``hello_world`` with the route "
"just created."
msgstr ""
"Aquí ``add_route`` crea una asociación entre un ``route_name`` y un patrón. "
"``add_view`` conecta el ``hello_world`` invocable con la ruta que se acaba "
"de crear."

#: ../advanced-python/routing.rst:118
msgid ""
"``Flask`` and ``Bottle`` have an implicit way of adding ``route`` items to "
"the ``Mapping``:"
msgstr ""
"``Flask`` y ``Bottle`` tienen una forma implícita de añadir elementos de "
"``ruta`` al ``Mapeo``:"

#: ../advanced-python/routing.rst:130
msgid ""
"``app.route`` adds the wrapped callable to the internal mapping inside the "
"``Flask`` instance. In a later part of this course, we will examine later "
"how this decorator works."
msgstr ""
"``app.route`` agrega el invocable envuelto al mapeo interno dentro de la "
"instancia de ``Flask``. En una parte posterior de este curso, examinaremos "
"más adelante cómo funciona este decorador."

#: ../advanced-python/routing.rst:135
msgid "Working with URL parameters"
msgstr "Trabajar con parámetros de URL"

#: ../advanced-python/routing.rst:137
msgid ""
"So far, we have a simple routing middleware. But it can't work with "
"parameters, as seen in the Django and Pyramid examples above. A middleware "
"can modify the response or the environment. Modifying the latter, we can "
"pass new objects via the environment dictionary to the callable."
msgstr ""
"Hasta ahora, tenemos un middleware de enrutamiento simple. Pero no puede "
"trabajar con parámetros, como se ve en los ejemplos de Django y Pyramid "
"anteriores. Un middleware puede modificar la respuesta o el entorno. "
"Modificando este último, podemos pasar nuevos objetos a través del "
"diccionario del entorno al invocable."

#: ../advanced-python/routing.rst:143
msgid "Exercise 5"
msgstr "Ejercicio 5"

#: ../advanced-python/routing.rst:145
msgid ""
"Modify the main app matching mechanism to use regular expression groups, to "
"match certain URL parts as groups. These groups are the URL args, the "
"application can make use of. For example, calling ``/hello/`` should return "
"``hello wolrd!``. Calling ``/hello/frank`` should return ``/hello/frank!``."
msgstr ""
"Modifique el mecanismo principal de coincidencia de aplicaciones para usar "
"grupos de expresiones regulares, a fin de que coincidan con determinadas "
"partes de URL como grupos. Estos grupos son los argumentos de URL que la "
"aplicación puede utilizar. Por ejemplo, llamar a ``/hello/`` debería "
"devolver ''¡hola mundo!''. Llamar a ``/hello/frank`` debería devolver ``/"
"hello/frank!``."

#: ../advanced-python/summary.rst:2
msgid "Summary"
msgstr "Resumen"

#: ../advanced-python/summary.rst:4
msgid ""
"The amalgamation of the ideas we showed here can be demonstrated by the nano-"
"framework ``Chick``:"
msgstr ""
"La amalgama de las ideas que mostramos aquí se puede demostrar mediante el "
"nano-framework ``Chick``:"
