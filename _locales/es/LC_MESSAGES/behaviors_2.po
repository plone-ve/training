# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by
# the Plone Foundation under a Creative Commons Attribution 4.0
# International license.
# This file is distributed under the same license as the Mastering Plone
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-05 04:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../behaviors_2.rst:4
msgid "More Complex Behaviors"
msgstr ""

#: ../behaviors_2.rst:6
msgid "In this part you will:"
msgstr ""

#: ../behaviors_2.rst:8
msgid "Write an annotation"
msgstr ""

#: ../behaviors_2.rst:10
msgid "Topics covered:"
msgstr ""

#: ../behaviors_2.rst:12
msgid "Annotation Marker Interfaces"
msgstr ""

#: ../behaviors_2.rst:17
msgid "Using Annotations"
msgstr ""

#: ../behaviors_2.rst:20
msgid ""
"We are going to store the information in an annotation. Not because it is"
" needed but because you will find code that uses annotations and need to "
"understand the implications."
msgstr ""

#: ../behaviors_2.rst:22
msgid ""
"`Annotations`_ in Zope/Plone mean that data won't be stored directly on "
"an object but in an indirect way and with namespaces so that multiple "
"packages can store information under the same attribute, without "
"colliding."
msgstr ""

#: ../behaviors_2.rst:24
msgid ""
"So using annotations avoids namespace conflicts. The cost is an "
"indirection. The dictionary is persistent so it has to be stored "
"separately. Also, one could give attributes a name containing a namespace"
" prefix to avoid naming collisions."
msgstr ""

#: ../behaviors_2.rst:36
msgid "Using Schema"
msgstr ""

#: ../behaviors_2.rst:40
msgid ""
"The attribute where we store our data will be declared as a schema field."
" We mark the field as an omitted field (using schema directive similar to"
" ``read_permission`` or ``widget``), because we are not going to create "
"z3c.form widgets for entering or displaying them. We do provide a schema,"
" because many other packages use the schema information to get knowledge "
"of the relevant fields."
msgstr ""

#: ../behaviors_2.rst:42
msgid ""
"For example, when files were migrated to blobs, new objects had to be "
"created and every schema field was copied. The code can't know about our "
"field, except if we provide schema information."
msgstr ""

#: ../behaviors_2.rst:51
msgid "Writing Code"
msgstr ""

#: ../behaviors_2.rst:53
msgid ""
"To start, we create a directory :file:`behavior` with an empty "
":file:`behavior/__init__.py` file."
msgstr ""

#: ../behaviors_2.rst:55
msgid "Next we must, as always, register our zcml."
msgstr ""

#: ../behaviors_2.rst:57
msgid ""
"First, add the information that there will be another zcml file in "
":file:`configure.zcml`"
msgstr ""

#: ../behaviors_2.rst:72
msgid "Next, create :file:`behavior/configure.zcml`"
msgstr ""

#: ../behaviors_2.rst:91
msgid "There are some important differences to our first behavior:"
msgstr ""

#: ../behaviors_2.rst:93
msgid "There is a marker interface"
msgstr ""

#: ../behaviors_2.rst:94
msgid "There is a factory"
msgstr ""

#: ../behaviors_2.rst:98
msgid ""
"The factory is a class that provides the behavior logic and gives access "
"to the attributes we provide. Factories in Plone/Zope land are retrieved "
"by adapting an object to an interface. If you want your behavior, you "
"would write :samp:`IVoting(object)`"
msgstr ""

#: ../behaviors_2.rst:102
msgid ""
"But in order for this to work, your object may *not* be implementing the "
"IVoting interface, because if it did, :samp:`IVoting(object)` would "
"return the object itself! If I need a marker interface for objects "
"providing my behavior, I must provide one, for this we use the marker "
"attribute. My object implements :samp:`IVotable` and because of this, we "
"can write views and viewlets just for this content type."
msgstr ""

#: ../behaviors_2.rst:105
msgid ""
"The interfaces need to be written, in our case into a file "
":file:`interfaces.py`:"
msgstr ""

#: ../behaviors_2.rst:181
msgid ""
"This is a lot of code. The IVotableLayer we will need later for viewlets "
"and browser views. Let's add it right here. The IVotable interface is the"
" simple marker interface. It will only be used to bind browser views and "
"viewlets to content types that provide our behavior, so no code needed."
msgstr ""

#: ../behaviors_2.rst:184
msgid ""
"The IVoting class is more complex, as you can see. While IVoting is just "
"an interface, we use :samp:`plone.supermodel.model.Schema` for advanced "
"dexterity features. Zope.schema provides no means for hiding fields. The "
"directives :samp:`form.omitted` from :samp:`plone.autoform` allow us to "
"annotate this additional information so that the autoform renderers for "
"forms can use the additional information."
msgstr ""

#: ../behaviors_2.rst:187
msgid ""
"We make this omit conditional. If we run Plone in debug mode, we will be "
"able to see the internal data in the edit form."
msgstr ""

#: ../behaviors_2.rst:189
msgid ""
"We create minimal schema fields for our internal data structures. For a "
"small test, I removed the form omitted directives and opened the edit "
"view of a talk that uses the behavior. After seeing the ugliness, I "
"decided that I should provide at least  minimum of information. Titles "
"and required are purely optional, but very helpful if the fields won't be"
" omitted, something that can be helpful when debugging the behavior. "
"Later, when we implement the behavior, the :samp:`votes` and "
":samp:`voted` attributes are implemented in such a way that you can't "
"just modify these fields, they are read only."
msgstr ""

#: ../behaviors_2.rst:192
msgid ""
"Then we define the API that we are going to use in browser views and "
"viewlets."
msgstr ""

#: ../behaviors_2.rst:194
msgid ""
"The last line ensures that the schema fields are known to other packages."
" Whenever some code wants all schemas from an object, it receives the "
"schema defined directly on the object and the additional schemata. "
"Additional schemata are compiled by looking for behaviors and whether "
"they provide the :samp:`IFormFieldProvider` functionality. Only then the "
"fields are known as schema fields."
msgstr ""

#: ../behaviors_2.rst:196
msgid ""
"Now the only thing that is missing is the behavior, which we must put "
"into :file:`behavior/voting.py`"
msgstr ""

#: ../behaviors_2.rst:231
msgid ""
"In our :samp:`__init__` method we get *annotations* from the object. We "
"look for data with a specific key."
msgstr ""

#: ../behaviors_2.rst:234
msgid ""
"The key in this example is the same as what I would get with "
":samp:`__name__+Vote.__name__`. But we won't create a dynamic name, this "
"would be very clever and clever is bad."
msgstr ""

#: ../behaviors_2.rst:236
msgid ""
"By declaring a static name, we won't run into problems if we restructure "
"the code."
msgstr ""

#: ../behaviors_2.rst:238
msgid ""
"You can see that we initialize the data if it doesn't exist. We work with"
" PersistentDict and PersistentList. To understand why we do this, it is "
"important to understand how the ZODB works."
msgstr ""

#: ../behaviors_2.rst:242
msgid ""
"The ZODB can store objects. It has a special root object that you will "
"never touch. Whatever you store there, will be part of the root object, "
"except if it is an object subclassing :samp:`persistent.Persistent` Then "
"it will be stored independently."
msgstr ""

#: ../behaviors_2.rst:244
msgid ""
"Zope/ZODB Persistent objects note when you change an attribute on it and "
"mark itself as changed. Changed objects will be saved to the database. "
"This happens automatically. Each request begins a transaction and after "
"our code runs and the Zope Server is preparing to send back the response "
"we generated, the transaction will be committed and everything we changed"
" will be saved."
msgstr ""

#: ../behaviors_2.rst:246
msgid ""
"Now, if have a normal dictionary on a persistent object, and you will "
"only change the dictionary, the persistent object has no way to know if "
"the dictionary has been changed. This `happens`_ from time to time."
msgstr ""

#: ../behaviors_2.rst:248
msgid ""
"So one solution is to change the special attribute :samp:`_p_changed` to "
":samp:`True` on the persistent object, or to use a PersistentDict. That "
"is what we are doing here."
msgstr ""

#: ../behaviors_2.rst:250
msgid ""
"You can find more information in the documentation of the ZODB, in "
"particular `Rules for Persistent Classes "
"<http://www.zodb.org/en/latest/documentation/guide/prog-zodb.html#rules-"
"for-writing-persistent-classes>`_"
msgstr ""

#: ../behaviors_2.rst:253
msgid ""
"Next we provide the internal fields via properties. Using this form of "
"property makes them read only properties, as we did not define write "
"handlers. We don't need them so we won't add them."
msgstr ""

#: ../behaviors_2.rst:255
msgid ""
"As you have seen in the Schema declaration, if you run your site in debug"
" mode, you will see an edit field for these fields. But trying to change "
"these fields will throw an exception."
msgstr ""

#: ../behaviors_2.rst:263
msgid "Let's continue with this file:"
msgstr ""

#: ../behaviors_2.rst:313
msgid ""
"We start with a little helper method which is not exposed via the "
"interface. We don't want people to vote twice. There are many ways to "
"ensure this and each one has flaws."
msgstr ""

#: ../behaviors_2.rst:315
msgid ""
"We chose this way to show you how to access information from the request "
"the browser of the user sent to us. First, we get the ip of the user, "
"then we access a small set of headers from the user's browser and "
"generate an md5 checksum of this."
msgstr ""

#: ../behaviors_2.rst:317
msgid ""
"The vote method wants a vote and a request. We check the preconditions, "
"then we convert the vote to an integer, store the request to "
":samp:`voted` and the votes into the :samp:`votes` dictionary. We just "
"count there how often any vote has been given."
msgstr ""

#: ../behaviors_2.rst:319
msgid "Everything else is just python."
msgstr ""

