# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Plone Training package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Training 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-02 12:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Leonardo J. Caballero G. <leonardocaballero@gmail.com>, 2016\n"
"Language-Team: Spanish (https://www.transifex.com/plone/teams/21152/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../solr-training/a-fancy-custom-search-page.rst:3
msgid "More Features..."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:5
msgid ""
"Next we will cover some more advanced topics which need configuration on "
"Plone and Solr side. Features like autocomplete and suggest (did you mean "
"...) are often requested when it comes to search. They are perfectly doable "
"with the Plone / Solr combination. At the end of this chapter we will build "
"a full search page with autocomplete, suggest, term highlighting and "
"faceting turned on."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:12
msgid "Let's see how and start with autocomplete:"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:15
msgid "Autocomplete"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:17
msgid ""
"For autocomplete we need a special Solr handler because we don't search full"
" terms but only part of terms."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:20
msgid ""
"With the additional Solr configuration autocomplete can be called via URL "
"directly:"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:23
msgid "http://localhost:8080/Plone/@@solr-autocomplete?term=Pl"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:25
msgid "Which gives the response ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:35
#: ../solr-training/solr-alternatives.rst:164
#: ../solr-training/solr-configuration.rst:8
#: ../solr-training/solr-configuration.rst:32
#: ../solr-training/solr-configuration.rst:76
#: ../solr-training/solr-configuration.rst:117
msgid "solr.cfg::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:83
msgid ""
"For the search template we utilize the HTML5 datalist element to populate "
"the search input field."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:86
msgid "search.pt::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:121
msgid "Suggest"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:123
msgid ""
"The suggest (did you mean ...) feature is well known from popular search "
"engines. It is integrated into Solr as a component which needs to be enabled"
" and configured. Here is an example configuration which works with "
"collective.solr. If you change it stick to the names of the parameters and "
"handlers."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:129
msgid "The JSON view of Plone can be called with this URL:"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:131
msgid "http://localhost:8080/Plone/@@search?format=json&SearchableText=Plane"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:133
msgid "And from JavaScript::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:138
msgid "We get a response like this::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:158
msgid "The configuration in buildout is as follows: ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:266
msgid "A simple integration in our training-search is here: ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:300
msgid "Facetting"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:302
msgid ""
"Facetting is tightly integrated in ``collective.solr`` and works out of the "
"box. We will now create a full search page with faceting, autocomplete, "
"search term highlighting and suggest enabled. The HTML of the page is mainly"
" taken from the standard page. To reduce complexity some of the standard "
"features like syndication, i18n and view actions has been removed ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:410
msgid ""
"Let's analyze the important parts. The head includes a reference to the "
"``showmore.js`` JavaScript, which is included in ``collective.solr`` and "
"used to reduce long lists of facets. Additionally the left column is removed"
" on the search page. The right column is kept. No portlets will be displayed"
" it is used for the facets."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:415
msgid ""
"The first thing we do in our search is geting the results for the search "
"query, if there is one. ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:428
msgid "We can use the standard Plone catalo API for getting the results."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:434
msgid ""
"After we got the results we wrap it with ``IContentListing`` to have unified"
" access to them. Finally we create a Batch, to make sure long result sets "
"are batched on our search view."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:438
msgid "The next thing we have in our search view is the form itself: ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:455
msgid ""
"We have a input field for used input. For the autocompletion we reference "
"the datalist with the ``list`` attribute. For the facets we need to render "
"the ``hiddenfields`` snippet, which is constructed by the ``search-facets`` "
"view of ``collective.solr``. This snippet will add the necessary query "
"parameters like "
"**facet=true&facet.field=portal_type&facet.field=review_state**."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:461
msgid "We use the ``h1`` element for displaying the number of elements."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:463
msgid "The next section is reseved for the suggest snippet. ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:477
msgid ""
"If no results are found with the query, a term is suggested. This term is "
"fetched from the collective.solr AJAX view **suggest-terms**. The code in "
"our view class is here: ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:494
msgid ""
"We get suggestions from the Solr handler and construct an URL for a new "
"search with query parameters preserved."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:497
msgid ""
"The next thing we have is the result list. There is nothing fancy in it. We "
"show the title, which is linked to the article found and the cropped "
"description."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:500
msgid "Finally we have the snippet for the facets in the right slot: ::"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:509
msgid ""
"We call the facet view of ``collective.solr`` with our resultset and get the"
" facets fully rendered as HTML."
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:516
msgid ""
"Now we have a fully functional Plone search with faceting, autocompletion, "
"suggestion and term highlighting. The complete example you can find on "
"github:"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:520
msgid "https://github.com/collective/plonetraining.solr_example"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:524
#: ../solr-training/setup.rst:364
msgid "Excercise"
msgstr ""

#: ../solr-training/a-fancy-custom-search-page.rst:526
msgid ""
"Have a custom search page with autocomplete, suggest, highlighting and "
"faceting working."
msgstr ""

#: ../solr-training/first-steps.rst:3
msgid "First Steps"
msgstr ""

#: ../solr-training/first-steps.rst:7
msgid "Maintenance Tasks"
msgstr ""

#: ../solr-training/first-steps.rst:9
msgid ""
"All the maintenance tasks are accessible through the Solr controlpanel in "
"Plone since version 6.0 of collective.solr. Nevertheless it is good to know "
"the direct URLs sometimes. Another goodie of accessing the URLs directly is "
"they support GET parameters to limit and change their behavior. Let's see "
"some examples:"
msgstr ""

#: ../solr-training/first-steps.rst:18
msgid "Reindex"
msgstr ""

#: ../solr-training/first-steps.rst:20
msgid "Reindex all Plone objects found in catalog:"
msgstr ""

#: ../solr-training/first-steps.rst:22
msgid "http://localhost:8080/Plone/@@solr-maintainance/reindex"
msgstr ""

#: ../solr-training/first-steps.rst:24
msgid ""
"The call of this URL finds all contentish objects (meaning all objects "
"derived from one of the catalog mixin classes) and (re)indexes them."
msgstr ""

#: ../solr-training/first-steps.rst:28 ../solr-training/first-steps.rst:62
msgid "There are some parameters you can specify:"
msgstr ""

#: ../solr-training/first-steps.rst:30 ../solr-training/first-steps.rst:49
#: ../solr-training/first-steps.rst:64
msgid ""
"*batch* (default:1000): Batch size for commit. Data is only send to Solr on "
"commit."
msgstr ""

#: ../solr-training/first-steps.rst:32
msgid ""
"*skip* (default:0): Skip N elements when iterating over all contentish "
"objects."
msgstr ""

#: ../solr-training/first-steps.rst:33
msgid "*limit* (default:0): Only index N elements."
msgstr ""

#: ../solr-training/first-steps.rst:34
msgid ""
"*ignore_portal_types* (default:None): Blacklist of portal types not to be "
"indexed."
msgstr ""

#: ../solr-training/first-steps.rst:35
msgid ""
"*only_portal_types* (default:None): Whiltelist of portal types not to be "
"indexed."
msgstr ""

#: ../solr-training/first-steps.rst:36
msgid "*idxs* (default:[]): Only this index fields will be updated."
msgstr ""

#: ../solr-training/first-steps.rst:40
msgid "Cleanup"
msgstr ""

#: ../solr-training/first-steps.rst:42
msgid ""
"Remove entries from Solr that don't have a corresponding Zope object or have"
" a different UID than the real object:"
msgstr ""

#: ../solr-training/first-steps.rst:45
msgid "http://localhost:8080/Plone/@@solr-maintainance/cleanup"
msgstr ""

#: ../solr-training/first-steps.rst:47
msgid "The only parameter you can specify is the batch size:"
msgstr ""

#: ../solr-training/first-steps.rst:54
msgid "Sync Solr Index"
msgstr ""

#: ../solr-training/first-steps.rst:56
msgid ""
"Sync the Solr index with the portal catalog. Records contained in the "
"catalog but not in Solr will be indexed and records not contained in the "
"catalog will be removed."
msgstr ""

#: ../solr-training/first-steps.rst:60
msgid "http://localhost:8080/Plone/@@solr-maintainance/sync"
msgstr ""

#: ../solr-training/first-steps.rst:66
msgid ""
"*preImportDeleteQuery* (default:*:*): This **delete** query will be executed"
" on Solr before the sync process starts."
msgstr ""

#: ../solr-training/first-steps.rst:70
msgid "Purge Solr Index"
msgstr ""

#: ../solr-training/first-steps.rst:72
msgid "Clear **all** elements from the Solr default collection."
msgstr ""

#: ../solr-training/first-steps.rst:74
msgid "http://localhost:8080/Plone/@@solr-maintainance/clear"
msgstr ""

#: ../solr-training/first-steps.rst:76
msgid "There are no parameters you can specify for the clear action."
msgstr ""

#: ../solr-training/first-steps.rst:78
msgid ""
"Be careful with required fields. If you specify required fields in your "
"schema, which are not present in your indexing record indexing will not "
"happen."
msgstr ""

#: ../solr-training/first-steps.rst:83
msgid "Indexing a new dexterity field"
msgstr ""

#: ../solr-training/first-steps.rst:85
msgid ""
"A common use case is to add an additional field to the index. We have to "
"inform both sides (Solr and Plone) if we need a new field in the index."
msgstr ""

#: ../solr-training/first-steps.rst:89
msgid ""
"A simple use case is to pass through a raw dexterity field to the index. "
"First we add the field to the schema. We do this TTW right now."
msgstr ""

#: ../solr-training/first-steps.rst:93
msgid ""
"In the production setup you will define your schema with an interface or a "
"supermodel XML but this is beyond of this training. More information on "
"dexterity schemas and fields can be found in the Plone documentation: "
"http://docs.plone.org/external/plone.app.dexterity/docs/schema-driven-"
"types.html"
msgstr ""

#: ../solr-training/first-steps.rst:99
msgid ""
"Let's add a field *email* to a task. We assume this is contact email which "
"can be used to contact the responsible support person for this task. And we "
"want to make this field to be found in fulltext search."
msgstr ""

#: ../solr-training/first-steps.rst:104
msgid ""
"It does not matter if we add the field TTW, via supermodel or via interface."
" The only thing you have to make sure the **name** of the field is identical"
" in Plone and Solr."
msgstr ""

#: ../solr-training/first-steps.rst:108
msgid ""
"Next thing we do is to extend the Solr fields definition in our buildout.cfg"
msgstr ""

#: ../solr-training/first-steps.rst:111
msgid ""
"to the *fields* section of the *solr* part we add the following line: ::"
msgstr ""

#: ../solr-training/first-steps.rst:117
msgid "After we have done that we need to rerun the buildout ::"
msgstr ""

#: ../solr-training/first-steps.rst:121
msgid "and restart Solr and Plone ::"
msgstr ""

#: ../solr-training/first-steps.rst:126
msgid ""
"This method works out of the box, if the name of the Dexterity field in "
"Plone is the same as the field in the schema of Solr. And assuming you "
"*have* the information you need for the index available as a Dexterity "
"field."
msgstr ""

#: ../solr-training/first-steps.rst:130
msgid ""
"Let's assume we have a field *fullname* in Solr and in Plone we have "
"separate fields for *firstname* and *sirname*. We need an indexing adapter "
"to have the fullname indexed. This is done like this:"
msgstr ""

#: ../solr-training/first-steps.rst:134
msgid "First we need an indexer binding to our DX content: ::"
msgstr ""

#: ../solr-training/first-steps.rst:145
msgid ""
"And we need a named adapter, which correlates with the name of the field in "
"Solr (*fullname* in our case). ::"
msgstr ""

#: ../solr-training/first-steps.rst:150
msgid ""
"That's it. After adding a new Task or reindexing an existing one with first-"
" and sirname set, the *fullname* in Solr appears."
msgstr ""

#: ../solr-training/first-steps.rst:154
msgid ""
"Pro tip: If you need to modify or extend the existing fulltext "
"implementation in Plone (This could be adding a custom field to it, or "
"remove title or description from it), there is a handy addon for this "
"purpose. It is well documented but further investigation is out of the scope"
" of this training See "
"https://pypi.python.org/pypi/collective.dexteritytextindexer"
msgstr ""

#: ../solr-training/first-steps.rst:162
msgid "Boosting"
msgstr ""

#: ../solr-training/first-steps.rst:164
msgid ""
"In a standard installation of Solr all fields are treated equally important "
"for searching. Usually this is not what we want. We want the Title to be "
"more important, or a special type (e.g. News) to be prioritized. Solr offers"
" boosting values at index and at search time. The search boosting is "
"utilized automatically when you install collective.solr. It is configured in"
" the control-panel with the default search pattern: ::"
msgstr ""

#: ../solr-training/first-steps.rst:175
msgid ""
"This reads like this. If a term occurs in the *Title*-field prioritize it 5 "
"times, if it is in the *Description*-field prioritize it two times. Search "
"but don't prioritize terms occuring in the *SearchableText* index. If a term"
" occurs in the *searchwords* priotize it by value 1000 so it always be on "
"top."
msgstr ""

#: ../solr-training/first-steps.rst:181
msgid "You can override this pattern to fit your needs."
msgstr ""

#: ../solr-training/first-steps.rst:183
msgid ""
"Another way to boost documents is at indexing time. For this purpose you can"
" specify a Restricted Python script in the control panel of Solr. Let's "
"assume we want to put a special emphasis on News Items. Our script looks as "
"follows: ::"
msgstr ""

#: ../solr-training/first-steps.rst:190
msgid ""
"This will boost all fields of  *News Items* by factor 20. Which means *News "
"Items* will be prioritized in the ranking and show as first search results "
"with the same term."
msgstr ""

#: ../solr-training/first-steps.rst:194
msgid ""
"Boosting at index time is only available if you turn off atomic updates."
msgstr ""

#: ../solr-training/first-steps.rst:199
#: ../solr-training/solr-configuration.rst:159
#: ../solr-training/solr-gui.rst:292 ../solr-training/solr-testing.rst:67
msgid "Exercise"
msgstr "Ejercicio"

#: ../solr-training/first-steps.rst:201
msgid ""
"Create or enhance a Dexterity type with an additional field which is "
"indexed."
msgstr ""

#: ../solr-training/first-steps.rst:203
msgid "Create a custom indexer in Plone."
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:3
msgid "How does collective.solr work"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:5
msgid ""
"Currently we depend on collective.indexing as a means to hook into the "
"normal catalog machinery of Plone to detect content changes. c.indexing "
"before version two had some persistent data structures that frequently "
"caused problems when removing the add-on. These problems have been fixed in "
"version two. Unfortunately c.indexing still has to hook the catalog "
"machinery in various evil ways, as the machinery lacks the required hooks "
"for its use-case. Going forward it is expected for c.indexing to be merged "
"into the underlying ZCatalog implementation, at which point collective.solr "
"can use those hooks directly."
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:16
msgid "Base Functionality"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:18
msgid "Patches the ZCatalog"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:19
msgid "Some queries are faster in Solr some are not"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:20
msgid "Indexes and Metadata duplicated"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:21
msgid "Full text search with SearchableText"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:24
msgid "Transactions"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:26
msgid ""
"Solr is not transaction-aware and does not support any kind of rollback or "
"undo. We therefore only send data to Solr at the end of any successful "
"request. This is done via collective.indexing, a transaction manager and an "
"end request transaction hook. This means you won’t see any changes done to "
"content inside a request when doing Solr searches later on in the same "
"request."
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:35
msgid "Querying Solr with collective.solr"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:37
msgid "ZCatalog Query::"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:41
msgid "Result is a Solr Object."
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:43
msgid "Direct Solr Queries::"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:51
msgid ""
"You can pass Solr query params directly to Solr and force a Solr response "
"with ::"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:58
msgid "Mangler"
msgstr ""

#: ../solr-training/how-does-collective-solr-work.rst:60
msgid ""
"collective.solr has a mangleQuery function that translates / mangles "
"ZCatalog query parameters to replace zope specifics with equivalent "
"constructs for Solr."
msgstr ""

#: ../solr-training/index.rst:3
msgid "Plone Training Solr"
msgstr ""

#: ../solr-training/index.rst:5
msgid "Contents:"
msgstr "Contenidos:"

#: ../solr-training/production-setup.rst:3
msgid "Production Setup"
msgstr ""

#: ../solr-training/production-setup.rst:6
msgid "Multi Core"
msgstr ""

#: ../solr-training/production-setup.rst:8
msgid ""
"Multi core setup is the default for Solr 5 and above but unfortunately not "
"supported by collective.solr. You can access a multicore Solr but only the "
"default core, which can be specified in the "
"``collective.recipe.solrinstance`` buildout recipe."
msgstr ""

#: ../solr-training/production-setup.rst:13
msgid ""
"The following options only apply if ``collective.recipe.solrinstance:mc`` is"
" specified. They are optional if the normal recipe is being used. All "
"options defined in the solr-instance section will we inherited to cores. A "
"core could override a previous defined option."
msgstr ""

#: ../solr-training/production-setup.rst:26
msgid "cores"
msgstr ""

#: ../solr-training/production-setup.rst:19
msgid ""
"A list of identifiers of Buildout configuration sections that correspond to "
"individual Solr core configurations. Each identifier specified will have the"
" section it relates to processed according to the given options above to "
"generate Solr configuration files for each core."
msgstr ""

#: ../solr-training/production-setup.rst:24
msgid ""
"Each identifier specified will result in a Solr ``instanceDir`` being "
"created and entries for each core placed in Solr's ``solr.xml`` "
"configuration."
msgstr ""

#: ../solr-training/production-setup.rst:32
msgid "default-core-name"
msgstr ""

#: ../solr-training/production-setup.rst:29
msgid ""
"Optional and deprecated. This option controls which core is set as the "
"default for incoming requests that do not specify a core name. This "
"corresponds to the ``defaultCoreName`` option described at "
"http://wiki.apache.org/solr/CoreAdmin#cores. *No longer* used in Solr 5."
msgstr ""

#: ../solr-training/production-setup.rst:34
msgid ""
"An example for a multi-core configuration you can find in the documentation "
"of ``collective.recipe.solrinstance``:"
msgstr ""

#: ../solr-training/production-setup.rst:40
msgid "Monitoring"
msgstr ""

#: ../solr-training/production-setup.rst:42
msgid ""
"Collective.solr comes with some predefined munin configurations. The values "
"for munin are collected and exposed via the Java JMX framework."
msgstr ""

#: ../solr-training/production-setup.rst:45
msgid ""
"You will need munin and the jmx\\_ extension. The procedere is documented "
"here :"
msgstr ""

#: ../solr-training/production-setup.rst:50
msgid "The munin configs however seem a little outdated."
msgstr ""

#: ../solr-training/production-setup.rst:53
msgid "Different host setup"
msgstr ""

#: ../solr-training/production-setup.rst:55
msgid ""
"One use case in a production setup might be the split between the Plone "
"server runs on and the Solr server(s). To make this happen you have to "
"consider a couple of things:"
msgstr ""

#: ../solr-training/production-setup.rst:59
msgid ""
"configure host of Solr in c.solr  - Can be done TTW, via ZCML or via "
"/etc/hosts"
msgstr ""

#: ../solr-training/production-setup.rst:60
msgid ""
"make sure the blobstorage directory of Plone is available via a network "
"drive to the Solr host. You need to make sure Solr has read permissions "
"which usually means it has the *SAME* User ID than the user which runs the "
"Zope server."
msgstr ""

#: ../solr-training/production-setup.rst:66
msgid "Further reading"
msgstr ""

#: ../solr-training/production-setup.rst:68
msgid "Solr is very well documented in its own wiki."
msgstr ""

#: ../solr-training/production-setup.rst:72
msgid "There are a couple of books available."
msgstr ""

#: ../solr-training/setup.rst:3
msgid "Set up Plone and Solr"
msgstr ""

#: ../solr-training/setup.rst:5
msgid "For using Solr with Plone you need two things:"
msgstr ""

#: ../solr-training/setup.rst:7
msgid "A running Solr server"
msgstr ""

#: ../solr-training/setup.rst:8
msgid ""
"A integration product (like collective.solr) for delegation of indexing and "
"searching to the Solr server. In this training we will focus on "
"collective.solr for this purpose."
msgstr ""

#: ../solr-training/setup.rst:12
msgid "Bootstrap project::"
msgstr ""

#: ../solr-training/setup.rst:22
msgid "a buildout (*buildout.cfg*) which installs both requirements::"
msgstr ""

#: ../solr-training/setup.rst:39
msgid "Run buildout::"
msgstr ""

#: ../solr-training/setup.rst:44
msgid "Start Plone in foreground mode to see that everything is ok::"
msgstr ""

#: ../solr-training/setup.rst:48
msgid "Start Solr in another terminal in foreground mode ::"
msgstr ""

#: ../solr-training/setup.rst:53
msgid "Solr Buildout"
msgstr ""

#: ../solr-training/setup.rst:55
msgid ""
"We assume you are more less familiar with the Plone buildout, but let's "
"analyze the solr buildout configuration a bit."
msgstr ""

#: ../solr-training/setup.rst:58
msgid "First we have two buildout parts in *solr.cfg* ::"
msgstr ""

#: ../solr-training/setup.rst:65
msgid ""
"As the name suggests *solr-download* gets the full Solr package from the "
"official download server and unpacks it. The part *solr-instance* is for "
"configuring Solr. Let's continue with the details."
msgstr ""

#: ../solr-training/setup.rst:70
msgid ""
"The base Solr settings specify the host (usually localhost or 0.0.0.0), the "
"port (8983 is the standard port of Solr) and two Java parameters for "
"specifying lower and upper memory limit. More is usually better. ::"
msgstr ""

#: ../solr-training/setup.rst:80
msgid ""
"If you want a rough idea on how much memory you should use, follow the "
"guidelines found in this article: .. seealso: "
"https://lucidworks.com/blog/2011/09/14/estimating-memory-and-storage-for-"
"lucenesolr/"
msgstr ""

#: ../solr-training/setup.rst:84
msgid ""
"There is nothing fancy in the Solr download part. It takes an URL to the "
"Solr binary and a md5 sum for verification."
msgstr ""

#: ../solr-training/setup.rst:89
msgid "It looks like this in *solr.cfg* and *solr4.cfg* ::"
msgstr ""

#: ../solr-training/setup.rst:99
msgid ""
"The Solr instance part is more complicated. It provides a subset of many, "
"many configuration options of Solr and the possibility to define the schema "
"of the index::"
msgstr ""

#: ../solr-training/setup.rst:125
msgid "Let's analyze them one by one ::"
msgstr ""

#: ../solr-training/setup.rst:129
msgid "Specify the location of Solr, dowloaded with the previous part. ::"
msgstr ""

#: ../solr-training/setup.rst:135
msgid ""
"Base configuration for running Solr referencing previously defined settings."
" With this configuration it is possible to access Solr in a browser with the"
" following URL: http://localhost:8983/solr :: The section-name defines the "
"name which can be used to reflect custom address and/or basepath settings in"
" zope.conf.::"
msgstr ""

#: ../solr-training/setup.rst:143
msgid ""
"It follows the following pattern in *zope.conf* If you use standard settings"
" no changes in *zope.conf* are necessary. ::"
msgstr ""

#: ../solr-training/setup.rst:154
msgid ""
"Like the Zope ZCatalog the Solr index has a schema consisting of index and "
"metadata fields. You can think of index fields as something you can use for "
"querying / searching and metadata something you return as result list. Solr "
"defines its schema in a big XML file called ``schema.xml``. There is a "
"section in the ``collective.recipe.solrinstance`` buildout recipe which "
"gives you access to the most common configuration options in a buildout "
"way::"
msgstr ""

#: ../solr-training/setup.rst:193
msgid "name: Name of the field"
msgstr ""

#: ../solr-training/setup.rst:194
msgid ""
"type: Type of the field (e.g. ``string`` , ``text``, ``date``, ``boolean``)"
msgstr ""

#: ../solr-training/setup.rst:195
msgid "indexed: The field is searchable"
msgstr ""

#: ../solr-training/setup.rst:196
msgid "stored: The field is returned as metadata"
msgstr ""

#: ../solr-training/setup.rst:197
msgid ""
"copyfield: copy content to another field, e.g. copy title, description, "
"subject and SearchableText to default."
msgstr ""

#: ../solr-training/setup.rst:199
msgid ""
"For a complete list of schema configuration options refer to the "
"documentation of Solr."
msgstr ""

#: ../solr-training/setup.rst:203
msgid ""
"This is the bare minimum for configuring Solr. There are more options "
"supported by the buildout recipe ``collective.recipe.solrinstance`` and even"
" more by Solr itself. Most notably are the custom extensions for "
"*schema.xml* and *solrconfig.xml*. We will see examples for this later on in"
" the training."
msgstr ""

#: ../solr-training/setup.rst:207
msgid ""
"Or you can even point to a custom location for the main configuration files."
" ::"
msgstr ""

#: ../solr-training/setup.rst:212
msgid ""
"After running the buildout, which downloads and configures Solr and Plone we"
" are ready to fire both servers."
msgstr ""

#: ../solr-training/setup.rst:216
msgid "Plone and Solr"
msgstr ""

#: ../solr-training/setup.rst:218
msgid ""
"To activate Solr in Plone *collective.solr* needs to be activated as an "
"addon in Plone."
msgstr ""

#: ../solr-training/setup.rst:221
msgid ""
"Activating the Solr addon adds a configuration page to the controlpanel. It "
"can be accessed via <PORTAL_URL>/@@solr-controlpanel or via "
"\"Configuration\" -> \"Solr Settings\""
msgstr ""

#: ../solr-training/setup.rst:225
msgid "Check: \"Active\", click \"Save\""
msgstr ""

#: ../solr-training/setup.rst:227
msgid ""
"Activating Solr in the controlpanel activates a patch of Plones indexing and"
" search methods to use Solr for indexing and querying."
msgstr ""

#: ../solr-training/setup.rst:230
msgid ""
"Note that ZCatalog is not replaced but Solr is *additionally* used for "
"indexing and searching."
msgstr ""

#: ../solr-training/setup.rst:234
msgid "Control panel configuration options"
msgstr ""

#: ../solr-training/setup.rst:236
msgid "*Active* - Turn connection between Plone and Solr on/off."
msgstr ""

#: ../solr-training/setup.rst:237
msgid ""
"*Host* - The host name of the Solr instance to be used. Defaults to "
"127.0.0.1"
msgstr ""

#: ../solr-training/setup.rst:238
msgid "*Port* - The port of the Solr instance to be used. Defaults to 8983"
msgstr ""

#: ../solr-training/setup.rst:239
msgid ""
"*Base* - The base prefix of the Solr instance to be used. Defaults to /solr"
msgstr ""

#: ../solr-training/setup.rst:240
msgid ""
"*Asynchronous indexing* - Check to enable asynchronous indexing operations, "
"which will improve Zope response times in return for not having the Solr "
"index updated immediately."
msgstr ""

#: ../solr-training/setup.rst:244
msgid ""
"*Automatic commit* - If enabled each index operation will cause a commit to "
"be sent to Solr, which causes it to update its index. If you disable this, "
"you need to configure commit policies on the Solr server side."
msgstr ""

#: ../solr-training/setup.rst:246
msgid "*Commit within*"
msgstr ""

#: ../solr-training/setup.rst:249
msgid "Timeouts and search limit"
msgstr ""

#: ../solr-training/setup.rst:251
msgid "Index timeout"
msgstr ""

#: ../solr-training/setup.rst:252
msgid "Search timeout"
msgstr ""

#: ../solr-training/setup.rst:253
msgid "Maximum search results"
msgstr ""

#: ../solr-training/setup.rst:256
msgid "Search query configuration"
msgstr ""

#: ../solr-training/setup.rst:258
msgid "Required query parameters"
msgstr ""

#: ../solr-training/setup.rst:259
msgid "Pattern for simple search queries"
msgstr ""

#: ../solr-training/setup.rst:260
msgid "Default search facets"
msgstr ""

#: ../solr-training/setup.rst:261
msgid "Filter query parameters"
msgstr ""

#: ../solr-training/setup.rst:262
msgid "Slow query threshold"
msgstr ""

#: ../solr-training/setup.rst:263
msgid "Effective date steps"
msgstr ""

#: ../solr-training/setup.rst:264
msgid "Exclude user from allowedRolesAndUsers"
msgstr ""

#: ../solr-training/setup.rst:267
msgid "Highlighting"
msgstr ""

#: ../solr-training/setup.rst:269
msgid "https://wiki.apache.org/solr/HighlightingParameters"
msgstr ""

#: ../solr-training/setup.rst:271
msgid "Highlighting fields"
msgstr ""

#: ../solr-training/setup.rst:272
msgid "Highlight formatter: pre"
msgstr ""

#: ../solr-training/setup.rst:273
msgid "Highlight formatter: post"
msgstr ""

#: ../solr-training/setup.rst:274
msgid "Highlight Fragment Size"
msgstr ""

#: ../solr-training/setup.rst:277
msgid "Default fields to be returned"
msgstr ""

#: ../solr-training/setup.rst:278
msgid "Levensthein distance"
msgstr ""

#: ../solr-training/setup.rst:282
msgid "Atomic updates and boosting"
msgstr ""

#: ../solr-training/setup.rst:284
msgid "Enable atomic updates"
msgstr ""

#: ../solr-training/setup.rst:285
msgid "Python script for custom index boosting"
msgstr ""

#: ../solr-training/setup.rst:288
msgid "With Solr activated, searching in Plone works like the following:"
msgstr ""

#: ../solr-training/setup.rst:290
msgid ""
"Search contains one of the fields set as required (which is normally the "
"fulltext field *SearchableText*) -> Solr results are returned"
msgstr ""

#: ../solr-training/setup.rst:293
msgid ""
"Search does not contain all fields marked as required -> ZCatalog results "
"are returned. Which is the case for rendering the navigation, folder "
"contents, etc."
msgstr ""

#: ../solr-training/setup.rst:297
msgid ""
"The search contains the stanza *use_solr=True*. -> Solr results are returned"
" independent of the required fields."
msgstr ""

#: ../solr-training/setup.rst:301
msgid ""
"Then you are ready for your first search. Search for *Plone*. You should get"
" the frontpage as a result--which is not super awesome at the first place "
"because we have this without Solr too--but it is the first step in utilizing"
" the full power of Solr."
msgstr ""

#: ../solr-training/setup.rst:307
msgid "Configuration with ZCML"
msgstr ""

#: ../solr-training/setup.rst:309
msgid ""
"Another way to configure the connection is via ZCML. You can use the "
"following snippet to configure host, port und basepath: ::"
msgstr ""

#: ../solr-training/setup.rst:316
msgid ""
"The ZCML configuration takes predence over the configuration in the registry"
" / control-panel."
msgstr ""

#: ../solr-training/setup.rst:320
msgid "Committing strategies"
msgstr ""

#: ../solr-training/setup.rst:323
msgid "Synchronous immediately"
msgstr ""

#: ../solr-training/setup.rst:325
msgid ""
"The default commit strategy is to commit to Solr on every Zope commit. This "
"ensures an always up to date index but may come at cost of indexing time "
"especcially when doing batch operations like data import."
msgstr ""

#: ../solr-training/setup.rst:330
msgid ""
"To use this behavior, turn **Automatic commit** ON in the Solr controlpanel "
"in Plone."
msgstr ""

#: ../solr-training/setup.rst:334
msgid "Synchronous batched"
msgstr ""

#: ../solr-training/setup.rst:336
msgid ""
"Another commit strategy is to do timed commits in Solr. This method is "
"usually way faster but comes with the cost of index delays."
msgstr ""

#: ../solr-training/setup.rst:340
msgid "To use this behavior you have to do two things:"
msgstr ""

#: ../solr-training/setup.rst:342
msgid "Turn **Automatic commit** OFF in the Solr controlpanel in Plone."
msgstr ""

#: ../solr-training/setup.rst:343
msgid ""
"Set one or both of the following options in the Solr server configuration "
"via the collective.recipe.solrinstance buildout recipe:"
msgstr ""

#: ../solr-training/setup.rst:346
msgid ""
"``autoCommitMaxDocs`` - The number of updates that have occurred since the "
"last commit."
msgstr ""

#: ../solr-training/setup.rst:347
msgid ""
"``autoCommitMaxTime`` - The number of milliseconds since the oldest "
"uncommitted update."
msgstr ""

#: ../solr-training/setup.rst:350
msgid "Asynchronous"
msgstr ""

#: ../solr-training/setup.rst:352
msgid ""
"The third commit stragey is to do full asynchronous commits. This can be "
"activated by setting the Flag **Asynchronous indexing** in the Solr control "
"panel to ON. This behavior is the most efficient in terms of Zope response "
"time. Since it is fire and forget the consistency could be harmed in "
"midterm. It is advisable to to a sync or full-index from time to time if you"
" work with this strategy."
msgstr ""

#: ../solr-training/setup.rst:359
msgid "Additional information can be found in the Solr documentation:"
msgstr ""

#: ../solr-training/setup.rst:366
msgid ""
"Have a running Plone and Solr with collective.solr active and experiment "
"with commit strategies."
msgstr ""

#: ../solr-training/solr-alternatives.rst:3
msgid "Alternative Indexing/Search solutions"
msgstr ""

#: ../solr-training/solr-alternatives.rst:6
msgid "alm.solrindex"
msgstr ""

#: ../solr-training/solr-alternatives.rst:8
msgid ""
"``alm.solrindex`` is another addon for connecting Plone search to solr. It "
"takes a different approach:"
msgstr ""

#: ../solr-training/solr-alternatives.rst:10
msgid ""
"``collective.solr`` *wraps* the Zope catalog. Each item is indexed both in "
"the ZCatalog and in solr, typically including many indexes in both. When a "
"search is performed, based on the indexes used, it decides to query either "
"ZCatalog or solr but not both."
msgstr ""

#: ../solr-training/solr-alternatives.rst:14
msgid ""
"``alm.solrindex`` operates as an index *within* the Zope catalog, replacing "
"the standard SearchableText index. solr only needs to index the fulltext, "
"and the ZCatalog no longer needs to do so. When a search is performed that "
"includes a SearchableText criterion, first alm.solrindex will query solr for"
" results, then those results will be further filtered by other ZCatalog "
"indexes."
msgstr ""

#: ../solr-training/solr-alternatives.rst:21
#: ../solr-training/solr-alternatives.rst:249
msgid "Pros:"
msgstr ""

#: ../solr-training/solr-alternatives.rst:23
msgid ""
"solr is more efficient than ZCTextIndex at indexing and querying fulltext."
msgstr ""

#: ../solr-training/solr-alternatives.rst:24
msgid "Avoids duplication of index storage."
msgstr ""

#: ../solr-training/solr-alternatives.rst:25
msgid "Less data needs to be sent between Plone and solr when indexing."
msgstr ""

#: ../solr-training/solr-alternatives.rst:26
msgid "Don't need to add new indexes to solr and reindex."
msgstr ""

#: ../solr-training/solr-alternatives.rst:28
#: ../solr-training/solr-alternatives.rst:257
msgid "Cons:"
msgstr ""

#: ../solr-training/solr-alternatives.rst:30
msgid "No admin UI in Plone control panel."
msgstr ""

#: ../solr-training/solr-alternatives.rst:31
msgid "Customizations can require monkey patching."
msgstr ""

#: ../solr-training/solr-alternatives.rst:32
msgid "Potential for missing some results. (see below)"
msgstr ""

#: ../solr-training/solr-alternatives.rst:35
msgid "Setup"
msgstr ""

#: ../solr-training/solr-alternatives.rst:37
msgid ""
"We set up solr in our buildout in a similar way, using the "
"``hexagonit.recipe.download`` and ``collective.recipe.solr`` buildout "
"recipes."
msgstr ""

#: ../solr-training/solr-alternatives.rst:40
msgid "The ``solr-instance`` buildout part looks a bit different::"
msgstr ""

#: ../solr-training/solr-alternatives.rst:57
msgid ""
"We set the ``unique-key`` identifying the record to ``docid``. "
"``alm.solrindex`` will pass the ZCatalog's internal integer record id "
"(``rid``) in this field."
msgstr ""

#: ../solr-training/solr-alternatives.rst:60
msgid ""
"We set the ``default-search-field`` to SearchableText so that solr queries "
"which don't specify a field will use SearchableText."
msgstr ""

#: ../solr-training/solr-alternatives.rst:62
msgid ""
"We configure fields for docid and each of the standard Plone fulltext "
"indexes, but not any other fields."
msgstr ""

#: ../solr-training/solr-alternatives.rst:64
msgid ""
"We set ``stored: false`` on the indexes so that solr will only store the "
"docid."
msgstr ""

#: ../solr-training/solr-alternatives.rst:66
msgid ""
"We also need to reference the solr URI in an environment variable for the "
"Plone instance part, so that ``alm.solrindex`` knows where to connect::"
msgstr ""

#: ../solr-training/solr-alternatives.rst:73
msgid ""
"After running buildout, we can start Plone and activate ``alm.solrindex`` in"
" the Addons control panel."
msgstr ""

#: ../solr-training/solr-alternatives.rst:76
msgid ""
"Note: The default installation profile removes the existing SearchableText, "
"Title, and Description indexes, but does not automatically reindex existing "
"content. If you have existing content in the site, you'll need to do a full "
"reindex of the ZCatalog to get them indexed in solr."
msgstr ""

#: ../solr-training/solr-alternatives.rst:82
msgid "Why are results missing?"
msgstr ""

#: ../solr-training/solr-alternatives.rst:84
msgid "There is a limitation to this approach."
msgstr ""

#: ../solr-training/solr-alternatives.rst:86
msgid ""
"solr is configured with a maximum limit on the number of results it will "
"return (``max-num-results`` in the buildout configuration). This is done "
"because it hurts performance if there are thousands and thousands of "
"results, and solr has to serialize all of them and Plone has to deserialize "
"all of them."
msgstr ""

#: ../solr-training/solr-alternatives.rst:92
msgid ""
"For queries that only use indexes that are in solr (i.e. the fulltext "
"indexes), this is not a big problem. solr ranks the results so the limited "
"set it returns should be the most relevant results, and most users are not "
"going to navigate past more than a few pages of results anyway."
msgstr ""

#: ../solr-training/solr-alternatives.rst:97
msgid ""
"However it can be a problem when the search term is very generic (so there "
"are many results and its hard for solr to determine the most relevant ones) "
"and the results are also going to be filtered by other indexes (such as in a"
" faceted search solution). In this case the limited result set from solr is "
"fairly arbitrary, the other filters only get to operate on this limited set,"
" and we might end up missing results that should be there."
msgstr ""

#: ../solr-training/solr-alternatives.rst:104
msgid ""
"Example: Consider a site where there are 10,000 items with the term 'pdf', "
"including one in a folder \"/annual-reports/2015\". If a search is performed"
" for 'pdf' within the path '/annual-reports/2015':"
msgstr ""

#: ../solr-training/solr-alternatives.rst:108
msgid "First solr finds all documents matching 'pdf', and ranks them."
msgstr ""

#: ../solr-training/solr-alternatives.rst:109
msgid "Next it returns the top 500 results to Plone."
msgstr ""

#: ../solr-training/solr-alternatives.rst:110
msgid ""
"Next Plone filters those results by path. There is a good chance that our "
"target document was not included in the 500 that solr returned, so this "
"filters down to no results."
msgstr ""

#: ../solr-training/solr-alternatives.rst:114
msgid ""
"There are a couple workarounds for this problem, both of which have their "
"own tradeoff:"
msgstr ""

#: ../solr-training/solr-alternatives.rst:116
msgid ""
"Increase ``max-num-results`` above the total number of documents (but this "
"will hurt performance for queries that return many results)."
msgstr ""

#: ../solr-training/solr-alternatives.rst:118
msgid ""
"Make sure that other indexes that are likely to narrow down the results a "
"lot are also included in solr (but this detracts from the main advantages of"
" using ``alm.solrindex`` over ``collective.solr``)."
msgstr ""

#: ../solr-training/solr-alternatives.rst:123
msgid "Customization"
msgstr ""

#: ../solr-training/solr-alternatives.rst:125
msgid ""
"Each type of field has its own *handler* which takes care of translating "
"between ZCatalog and solr queries. These can be overridden to handle "
"advanced customization:"
msgstr ""

#: ../solr-training/solr-alternatives.rst:129
msgid ""
"Example: monkey patch the ``TextFieldHandler`` to use an ``edismax`` query "
"that allows boosting some fields::"
msgstr ""

#: ../solr-training/solr-alternatives.rst:161
msgid ""
"Example: Add a `path` index that works like Zope's ``ExtendedPathIndex`` "
"(i.e. it'll find anything whose path begins with the query value):"
msgstr ""

#: ../solr-training/solr-alternatives.rst:172
msgid "handlers.py::"
msgstr ""

#: ../solr-training/solr-alternatives.rst:190
msgid "ZCML::"
msgstr ""

#: ../solr-training/solr-alternatives.rst:197
msgid "DIY solr"
msgstr ""

#: ../solr-training/solr-alternatives.rst:199
msgid ""
"If both *collective.solr* and *alm.solrindex* are too much for you or you "
"have special needs, you can access Solr by custom code. This might be, if "
"you"
msgstr ""

#: ../solr-training/solr-alternatives.rst:203
msgid ""
"need to access a Solr server with a newer version / multicore setup and you "
"don't have access to the configuration of Solr"
msgstr ""

#: ../solr-training/solr-alternatives.rst:205
msgid ""
"Only want a fulltext search page of a small site with no need for full "
"realtime support"
msgstr ""

#: ../solr-training/solr-alternatives.rst:208
msgid ""
"You can find a full-featured example of a full-fledged custom Solr "
"integration at the Ploneintranet (**advanced!**):"
msgstr ""

#: ../solr-training/solr-alternatives.rst:211
msgid "https://github.com/ploneintranet/ploneintranet/pull/299"
msgstr ""

#: ../solr-training/solr-alternatives.rst:214
msgid "collective.elasticsearch"
msgstr ""

#: ../solr-training/solr-alternatives.rst:216
msgid ""
"Another option for an advanced search integration is the younger project "
"Elasticsearch https://www.elastic.co/products/elasticsearch. Like for Solr, "
"the technical foundation is the Lucene index, written in Java."
msgstr ""

#: ../solr-training/solr-alternatives.rst:220
msgid "Pros of Elasticsearch"
msgstr ""

#: ../solr-training/solr-alternatives.rst:222
msgid ""
"It uses JSON instead of an XML schema for (field) configuration, which might"
" be easier to configure."
msgstr ""

#: ../solr-training/solr-alternatives.rst:224
msgid ""
"Clustering and replication is builtin from the beginning. It is easier to "
"configure. Espacially ad-hoc cluster which can (re)configure automatically."
msgstr ""

#: ../solr-training/solr-alternatives.rst:227
msgid "The project and community is agile and active."
msgstr ""

#: ../solr-training/solr-alternatives.rst:229
msgid "Cons of Elasticsearch"
msgstr ""

#: ../solr-training/solr-alternatives.rst:231
msgid ""
"JSON is abused as Query DSL. It can lead to queries with up to 10 layers. "
"This can be annoying especially if you write them programatically."
msgstr ""

#: ../solr-training/solr-alternatives.rst:235
msgid ""
"The integration of Elasticsearch with Plone is done with "
"https://pypi.python.org/pypi/collective.elasticsearch/"
msgstr ""

#: ../solr-training/solr-alternatives.rst:240
msgid "Google Custom Search"
msgstr ""

#: ../solr-training/solr-alternatives.rst:242
msgid ""
"Google provides a couple related tools for using Google as a site-specific "
"search engine embedded in your site: Google Custom Search (free, ad-"
"supported) and Google Site Search (paid)."
msgstr ""

#: ../solr-training/solr-alternatives.rst:246
msgid ""
"(Note: don't confuse these solutions with Google Search Appliance, which was"
" a rack-mounted device which has been discontinued.)"
msgstr ""

#: ../solr-training/solr-alternatives.rst:251
msgid "Better ranking of results compared to ZCTextIndex."
msgstr ""

#: ../solr-training/solr-alternatives.rst:252
msgid "Fairly straightforward to integrate."
msgstr ""

#: ../solr-training/solr-alternatives.rst:253
msgid "GUI control panel for basic configuration."
msgstr ""

#: ../solr-training/solr-alternatives.rst:254
msgid "Don't have to run and maintain a separate Java service."
msgstr ""

#: ../solr-training/solr-alternatives.rst:255
msgid "Can easily be configured to search multiple websites."
msgstr ""

#: ../solr-training/solr-alternatives.rst:259
msgid "Free version includes Google branding and ads in results."
msgstr ""

#: ../solr-training/solr-alternatives.rst:260
msgid "Cannot index private items."
msgstr ""

#: ../solr-training/solr-alternatives.rst:261
msgid "Changes are not indexed immediately (usually within a week)."
msgstr ""

#: ../solr-training/solr-alternatives.rst:262
msgid "Only returns top 100 results for a query."
msgstr ""

#: ../solr-training/solr-alternatives.rst:263
msgid "Only useful for fulltext search, not searching specific fields."
msgstr ""

#: ../solr-training/solr-alternatives.rst:264
msgid "Limited control over result ranking and formatting."
msgstr ""

#: ../solr-training/solr-alternatives.rst:265
msgid "Google has a habit of discontinuing free services."
msgstr ""

#: ../solr-training/solr-configuration.rst:3
msgid "Solr Buildout Configuration"
msgstr ""

#: ../solr-training/solr-configuration.rst:6
msgid "Solr Multi Core"
msgstr ""

#: ../solr-training/solr-configuration.rst:19
msgid ""
"collective.solr does not support multicore setups currently. It allways uses"
" the default core for indexing and searching."
msgstr ""

#: ../solr-training/solr-configuration.rst:23
msgid "Stopwords"
msgstr ""

#: ../solr-training/solr-configuration.rst:25
msgid ""
"For indexes with of text, common uninteresting words like *\"the\"*, "
"*\"a\"*, and so on, make the index large and slow down phrase queries. To "
"deal with this problem, it is best to remove them from fields where they "
"show up often."
msgstr ""

#: ../solr-training/solr-configuration.rst:29
msgid ""
"We need to add the **StopFilterFactory** with a reference to a text file "
"with one stopword per line to the Solr configuration:"
msgstr ""

#: ../solr-training/solr-configuration.rst:41
msgid ""
"Since we don't copy over the stopwords file to the *parts/solr-instance* "
"directory we need to allow Solr reading resource files outside its home "
"directory."
msgstr ""

#: ../solr-training/solr-configuration.rst:44
msgid "stopwords.txt::"
msgstr ""

#: ../solr-training/solr-configuration.rst:50
msgid "For some common language secific examples see the Solr git repository:"
msgstr ""

#: ../solr-training/solr-configuration.rst:56
msgid "Stemming"
msgstr ""

#: ../solr-training/solr-configuration.rst:58
msgid ""
"Stemming is a language specific operation which try to reduce terms to a "
"base form."
msgstr ""

#: ../solr-training/solr-configuration.rst:60
msgid "Here is an example::"
msgstr ""

#: ../solr-training/solr-configuration.rst:64
msgid "This can help in some situations but may hurt in others."
msgstr ""

#: ../solr-training/solr-configuration.rst:66
msgid ""
"For example if you run an intranet and people usally know exactly what they "
"are looking for it is probably not a good idea but if you provide a Google "
"like search where you more browse than search then stemming is probably for "
"you."
msgstr ""

#: ../solr-training/solr-configuration.rst:70
msgid ""
"If you are interested in this feature look at the Solr documentation here:"
msgstr ""

#: ../solr-training/solr-configuration.rst:74
msgid ""
"A short example to include a german stemming factory into the buildout is "
"here:"
msgstr ""

#: ../solr-training/solr-configuration.rst:89
msgid "stemdict.txt::"
msgstr ""

#: ../solr-training/solr-configuration.rst:105
msgid "Synonyms"
msgstr ""

#: ../solr-training/solr-configuration.rst:107
msgid ""
"Solr can deal with synonyms. Maybe you run a shop for selling smartphones "
"and you want people typing \"iphone\", \"i-phone\" or even \"ephone\", "
"\"ifone\", or \"iphnoe\" to get the latest \"iPhone\" offers."
msgstr ""

#: ../solr-training/solr-configuration.rst:111
msgid ""
"A simple synonym like solution us to use the *searchwords* extension which "
"is provided by collective.solr. It is a schemaextender for all types and "
"allows to specify terms which are boosted by factor 1000 in the default "
"search query. For \"real\" synonyms implemented in Solr you can use the "
"*SynonymFilterFactory*:"
msgstr ""

#: ../solr-training/solr-configuration.rst:127
msgid ""
"Note that the SynonymFilterFactory is an index filter and not a query "
"filter."
msgstr ""

#: ../solr-training/solr-configuration.rst:129
msgid "synonyms.txt::"
msgstr ""

#: ../solr-training/solr-configuration.rst:154
msgid ""
"For a full list of index and query filter factories consult the Solr "
"documentation:"
msgstr ""

#: ../solr-training/solr-configuration.rst:161
msgid ""
"Experiment with stemming, stopwords and synonyms. Add your own values and "
"see how Solr behaves."
msgstr ""

#: ../solr-training/solr-gui.rst:3
msgid "Solr GUI and Query Syntax"
msgstr ""

#: ../solr-training/solr-gui.rst:5
msgid ""
"In the next part we will take a closer look the the search GUI of Solr and "
"its query syntax."
msgstr ""

#: ../solr-training/solr-gui.rst:9
msgid "Access Solr Gui"
msgstr ""

#: ../solr-training/solr-gui.rst:11
msgid ""
"Solr is a REST-based wrapper around the Java lucene index. It comes with its"
" own web GUI. It is possible to access all of the SOLR API via REST and most"
" of this functionality is exposed via its web GUI. To test it out, do the "
"following. :"
msgstr ""

#: ../solr-training/solr-gui.rst:16
msgid "Go to: http://localhost:8983/solr/#/"
msgstr ""

#: ../solr-training/solr-gui.rst:17
msgid "Select Core \"collection1\""
msgstr ""

#: ../solr-training/solr-gui.rst:18
msgid "Go to: \"Schema Browser\""
msgstr ""

#: ../solr-training/solr-gui.rst:19
msgid "Select \"fullname\""
msgstr ""

#: ../solr-training/solr-gui.rst:20
msgid "Click: \"Load Term Info\""
msgstr ""

#: ../solr-training/solr-gui.rst:21
msgid "Click on term \"<fullname>\""
msgstr ""

#: ../solr-training/solr-gui.rst:24
msgid "Solr Query Syntax"
msgstr ""

#: ../solr-training/solr-gui.rst:26
msgid "Solr Query Parameters:"
msgstr ""

#: ../solr-training/solr-gui.rst:28
msgid "Query \"q\"::"
msgstr ""

#: ../solr-training/solr-gui.rst:77
msgid "Filter Query \"fq\":"
msgstr ""

#: ../solr-training/solr-gui.rst:79
msgid ""
"This parameter can be used to specify a query that can be used to restrict "
"the super set of documents that can be returned, without influencing score. "
"It can be very useful for speeding up complex queries since the queries "
"specified with fq are cached independently from the main query. Caching "
"means the same filter is used again for a later query (i.e. there's a cache "
"hit). See SolrCaching to learn about the caches Solr uses.  ::"
msgstr ""

#: ../solr-training/solr-gui.rst:83
msgid "Sorting \"sort\"::"
msgstr ""

#: ../solr-training/solr-gui.rst:88
msgid "Filter List \"fl\"::"
msgstr ""

#: ../solr-training/solr-gui.rst:92
msgid ""
"This parameter can be used to specify a set of fields to return, limiting "
"the amount of information in the response."
msgstr ""

#: ../solr-training/solr-gui.rst:94
msgid "Response Writer \"wt\"::"
msgstr ""

#: ../solr-training/solr-gui.rst:98
msgid "A Response Writer generates the formatted response of a search."
msgstr ""

#: ../solr-training/solr-gui.rst:101
msgid "Solr Query via URL"
msgstr ""

#: ../solr-training/solr-gui.rst:103
msgid "Copy query from Solr GUI, e.g.::"
msgstr ""

#: ../solr-training/solr-gui.rst:107
msgid ""
"You can use curl or the Python package `requests` "
"(https://pypi.python.org/pypi/requests) to access the REST API of Solr."
msgstr ""

#: ../solr-training/solr-gui.rst:110
msgid "Solr Query via API"
msgstr ""

#: ../solr-training/solr-gui.rst:112
msgid ""
"Another way of accessing Solr is to use a Python wrapper, which exposes the "
"Solr API in a Pythonic way. Collective.solr has included such a wrapper "
"(``solr.py``), which is old but still works for our case. Meanwhile there "
"are other packages around. Here are some examples:"
msgstr ""

#: ../solr-training/solr-gui.rst:117
msgid "``mysolr`` (https://pypi.python.org/pypi/mysolr/0.8.3)"
msgstr ""

#: ../solr-training/solr-gui.rst:118
msgid "``solrpy`` (https://pypi.python.org/pypi/solrpy3/0.98)"
msgstr ""

#: ../solr-training/solr-gui.rst:119
msgid "``pysolr`` (https://pypi.python.org/pypi/pysolr/3.5.0)"
msgstr ""

#: ../solr-training/solr-gui.rst:121
msgid ""
"Sometimes it is handy to have a separate virtualenv available for doing "
"batch operations (delete, update, etc.)"
msgstr ""

#: ../solr-training/solr-gui.rst:124
msgid "I use the following script to delete all Plone Documents from Solr ::"
msgstr ""

#: ../solr-training/solr-gui.rst:132
msgid "Advanced Solr Query Syntax"
msgstr ""

#: ../solr-training/solr-gui.rst:134
msgid "Simple Query::"
msgstr ""

#: ../solr-training/solr-gui.rst:138
msgid ""
"A clause can be **mandatory** (finds only articles containing the word "
"*Boston*):"
msgstr ""

#: ../solr-training/solr-gui.rst:140
msgid "+Boston"
msgstr ""

#: ../solr-training/solr-gui.rst:142
msgid ""
"A clause can be **probibited** (finds all articles except those containing "
"the word *Vienna*):"
msgstr ""

#: ../solr-training/solr-gui.rst:144
msgid "-Vienna"
msgstr ""

#: ../solr-training/solr-gui.rst:146
msgid "Operators::"
msgstr ""

#: ../solr-training/solr-gui.rst:150
msgid "\"AND\", \"OR\", \"+\", \"-\", \"||\", \"NOT\""
msgstr ""

#: ../solr-training/solr-gui.rst:152
msgid "Be carefull with combining operators such as::"
msgstr ""

#: ../solr-training/solr-gui.rst:156
msgid ""
"which will probably lead to now results. You will need to use sub-queries."
msgstr ""

#: ../solr-training/solr-gui.rst:159
msgid "Sub-queries: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:163
msgid "Range Queries::"
msgstr ""

#: ../solr-training/solr-gui.rst:167
msgid "Boost Terms:"
msgstr ""

#: ../solr-training/solr-gui.rst:169
msgid "\"people^4\""
msgstr ""

#: ../solr-training/solr-gui.rst:171
msgid "Fuzzy Search: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:175
msgid "Proximity Search: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:179
msgid "with treshold ::"
msgstr ""

#: ../solr-training/solr-gui.rst:183
msgid "Wildcard queries:"
msgstr ""

#: ../solr-training/solr-gui.rst:185
msgid "Find all cities starting with *New* you can do: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:189
msgid "Or a single character wildcard: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:193
msgid "which will find *Müller*, *Miller*, etc."
msgstr ""

#: ../solr-training/solr-gui.rst:196
msgid "Date math"
msgstr ""

#: ../solr-training/solr-gui.rst:198
msgid ""
"Solr provides some useful date units which are available for date queries. "
"The units you can choose of are:"
msgstr ""

#: ../solr-training/solr-gui.rst:201
msgid ""
"*YEAR*, *MONTH*, *DAY*, *DATE* (synonymous with *DAY*), *HOUR*, *MINUTE*, "
"*SECOND*, *MILLISECOND*, *MILLI* (synonymous with *MILLISECOND*) and *NOW*. "
"All of these units can be pluralized with an *S* as in *DAYS*. ::"
msgstr ""

#: ../solr-training/solr-gui.rst:206
msgid ""
"*NOW* has a millisecond precision. To round down by using the */* operator "
"(it never rounds up). ::"
msgstr ""

#: ../solr-training/solr-gui.rst:211
msgid "Existing (and non-existing) queries"
msgstr ""

#: ../solr-training/solr-gui.rst:213
msgid ""
"Assume we want to find all documents which have a value in a certain field "
"(whatever that value is, it doesn't matter)."
msgstr ""

#: ../solr-training/solr-gui.rst:216
msgid "Find all documents with a description: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:220
msgid ""
"The oposite (finding all documents with no description) is also possible: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:225
msgid "Faceting"
msgstr ""

#: ../solr-training/solr-gui.rst:227
msgid ""
"Faceting is one of the killer features of Solr. It allows the grouping and "
"filtering results for better findability. To enable faceting you need to "
"turn faceting on in the query and specify the fields you want to facet upon:"
msgstr ""

#: ../solr-training/solr-gui.rst:232
msgid ""
"For a simple facet query in Solr you activate the feature and specify the "
"facet field(s) ::"
msgstr ""

#: ../solr-training/solr-gui.rst:237
msgid ""
"Besides the matching documents this will give you an additional grouping of "
"documents: ::"
msgstr ""

#: ../solr-training/solr-gui.rst:265
msgid ""
"There are more complex scenarios possible. For a complete list of options "
"see the according Solr documentation."
msgstr ""

#: ../solr-training/solr-gui.rst:270
msgid ""
"With collective.solr you don't have to worry about the faceting details too "
"much. There is a convenient method to configure the faceting fields in the "
"control panel of collective.solr. All the other magic is handled by the "
"product. We will see an example later."
msgstr ""

#: ../solr-training/solr-gui.rst:277
msgid "Search GUIs"
msgstr ""

#: ../solr-training/solr-gui.rst:279
msgid ""
"collective.solr out of the box: collective.solr commes with its own search "
"view. For the new version 6.0 it is based on ReactJS and looks similar to "
"the Plone search view with native facet support of Solr."
msgstr ""

#: ../solr-training/solr-gui.rst:283
msgid ""
"eea.facetednavigation: This addon allows faceting out of the box even "
"without Solr. It is a product for integrators to setup search and filter "
"GUIs TTW. It can be used for several use cases: Search pages, collection "
"replacements, etc.  **DEMO**"
msgstr ""

#: ../solr-training/solr-gui.rst:288
msgid ""
"custom: Another way is to create a custom search page. This is easy to do "
"and we will see later on in this training how."
msgstr ""

#: ../solr-training/solr-gui.rst:294
msgid "Do some queries in Solr directly"
msgstr ""

#: ../solr-training/solr-testing.rst:3
msgid "Solr Testing"
msgstr ""

#: ../solr-training/solr-testing.rst:5
msgid ""
"collective.solr comes with a few test fixtures that make it easier to test "
"Solr."
msgstr ""

#: ../solr-training/solr-testing.rst:7
msgid ""
"``SOLR_FIXTURE`` fires up and tears down a Solr instance. This fixture can "
"be used to write unit tests for a Solr configuration."
msgstr ""

#: ../solr-training/solr-testing.rst:9
msgid ""
"Usually you need the ``COLLECTIVE_SOLR_FIXTURE`` which spins off a Solr "
"instance and installs ``collective.solr``. A custom test layer based on this"
" fixture looks like this ::"
msgstr ""

#: ../solr-training/solr-testing.rst:26
msgid "A test for our suggest method in our fancy search looks like this: ::"
msgstr ""

#: ../solr-training/solr-testing.rst:62
msgid ""
"Note the **activateAndReindex** method. It is a nice testing helper to cleat"
" the Solr index and reindex all objects again. If testing Solr it is "
"advisable to call it at the test setup. Otherwise the documents created "
"during the tests would pile up in the index."
msgstr ""

#: ../solr-training/solr-testing.rst:69
msgid "Write a custom test for a Solr feature used in Plone."
msgstr ""
