# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-22 16:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../viewlets_1.rst:2
msgid "Writing Viewlets"
msgstr ""

#: ../viewlets_1.rst:0
msgid "Get the code!"
msgstr ""

#: ../viewlets_1.rst:6
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../viewlets_1.rst:14
msgid "A viewlet for the social behavior"
msgstr ""

#: ../viewlets_1.rst:18
msgid "A viewlet is not a view but a snippet of html and logic that can be put in various places in the site. These places are called ``viewletmanager``."
msgstr ""

#: ../viewlets_1.rst:20
msgid "Inspect existing viewlets and their managers by going to http://localhost:8080/Plone/@@manage-viewlets."
msgstr ""

#: ../viewlets_1.rst:21
msgid "We already customized a viewlet (:file:`collophon.pt`). Now we add a new one."
msgstr ""

#: ../viewlets_1.rst:22
msgid "Viewlets don't save data (portlets do)"
msgstr ""

#: ../viewlets_1.rst:23
msgid "Viewlets have no user-interface (portlets do)"
msgstr ""

#: ../viewlets_1.rst:26
msgid "social-viewlet"
msgstr ""

#: ../viewlets_1.rst:30
msgid "Let's add a link to the site that uses the information that we collected using the social-behavior."
msgstr ""

#: ../viewlets_1.rst:32
msgid "We register the viewlet in :file:`browser/configure.zcml`."
msgstr ""

#: ../viewlets_1.rst:49
msgid "This registers a viewlet called ``social``. It is visible on all content that implements the interface ``ISocial`` from our behavior. It is also good practice to bind it to the `BrowserLayer`_ ``IPloneconfSiteLayer`` of our addon so it only shows up if our addon is actually installed."
msgstr ""

#: ../viewlets_1.rst:53
msgid "The viewlet-class ``SocialViewlet`` is expected in a file ``browser/viewlets.py``."
msgstr ""

#: ../viewlets_1.rst:68
msgid "This class does nothing except rendering the associated template (That we have to write yet)"
msgstr ""

#: ../viewlets_1.rst:72
msgid "If we used ``grok`` we would not need to register the viewlets in the ``configure.zcml`` but do that in python. We would add a file viewlets.py containing the viewlet-class."
msgstr ""

#: ../viewlets_1.rst:84
msgid "This would do the same as the coe above using grok's paradigm of convention over configuration. In browser views the reference is called view, note that in grok viewlets it is called viewlets (in that case ``viewlet/lanyrd_link``)."
msgstr ""

#: ../viewlets_1.rst:86
msgid "Let's add the missing template :file:`templates/social_viewlet.pt`."
msgstr ""

#: ../viewlets_1.rst:104
msgid "As you can see this is not a valid html document. That is not needed, because we don't want a complete view here, just a html snippet."
msgstr ""

#: ../viewlets_1.rst:106
msgid "There is a tal define statement, querying for `view/lanyrd_link`. Like in page templates the template has access to its class."
msgstr ""

#: ../viewlets_1.rst:108
msgid "We have to extend the Social Viewlet now to add the missing attribute:"
msgstr ""

#: ../viewlets_1.rst:0
msgid "Why not to access context directly"
msgstr ""

#: ../viewlets_1.rst:115
msgid "In this example, :samp:`ISocial(self.context)` does return the context directly. It is still good to use this idiom for two reasons:"
msgstr ""

#: ../viewlets_1.rst:117
msgid "It makes it clear, that we only want to use the ISocial aspect of the object"
msgstr ""

#: ../viewlets_1.rst:118
msgid "If we decide to use a factory, for example to store our attributes in an annotation, we would `not` get back our context, but the adapter."
msgstr ""

#: ../viewlets_1.rst:120
msgid "Therefore in this example you could simply write ``return self.context.lanyrd``."
msgstr ""

#: ../viewlets_1.rst:135
msgid "So far, we"
msgstr ""

#: ../viewlets_1.rst:137
msgid "register the viewlet to content that has the ISocial Interface."
msgstr ""

#: ../viewlets_1.rst:138
msgid "adapt the object to it's behavior to be able to access the fields of the behavior"
msgstr ""

#: ../viewlets_1.rst:139
msgid "return the link"
msgstr ""

#: ../viewlets_1.rst:143
msgid "Exercise 1"
msgstr ""

#: ../viewlets_1.rst:145
msgid "Register a viewlet 'number_of_talks' in the footer that is only visible to admins (the permission you are looking for is ``cmf.ManagePortal``). Use only a template (no class) to display the number of talks already submitted. Hint: Use Aquisition to get the catalog (You know, you should not do this but there is plenty of code out there that does it...)"
msgstr ""

#: ../viewlets_1.rst:147
msgid "Solution"
msgstr ""

#: ../viewlets_1.rst:150
msgid "Register the viewlet in :file:`browser/configure.zcml`"
msgstr ""

#: ../viewlets_1.rst:164
msgid "For the ``for`` and ``layer``-parameters ``*`` is shorthand for ``zope.interface.Interface`` and the same effect as omitting them: The viewlet will be shown for all types of pages and for all Plone sites within your Zope instance."
msgstr ""

#: ../viewlets_1.rst:166
msgid "Add the template :file:`browser/templates/number_of_talks.pt`:"
msgstr ""

#: ../viewlets_1.rst:176
msgid "``python:context.portal_catalog`` will return the catalog through Acquisition. Be carefull if you want to use path-expressions: ``content/portal_catalog`` calls the catalog (and returns all brains). You need to prevent this by using ``nocall:content/portal_catalog``."
msgstr ""

#: ../viewlets_1.rst:178
msgid "Relying on Acquisition is a bad idea. It would be much better to use the helper view ``plone_tools`` from ``plone/app/layout/globals/tools.py`` to get the catalog."
msgstr ""

#: ../viewlets_1.rst:188
msgid "``context/@@plone_tools/catalog`` traverses to the view ``plone_tools`` and calls it's method ``catalog``. In python it would look like this:"
msgstr ""

#: ../viewlets_1.rst:199
msgid "It is not a good practice to query the catalog within a template since even simple logic like this should live in Python. But it is very powerful if you are debugging or need a quick and dirty solution."
msgstr ""

#: ../viewlets_1.rst:202
msgid "Exercise 2"
msgstr ""

#: ../viewlets_1.rst:204
msgid "Register a viewlet 'days_to_conference' in the header. Use a class and a template to display the number of days until the conference. You get many bonus-points if you display it in a nice format (think \"In 2 days\" and \"Last Month\") by using an existing javascript or python library."
msgstr ""

