# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-22 16:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../behaviors1.rst:2
msgid "Behaviors"
msgstr ""

#: ../behaviors1.rst:0
msgid "Get the code!"
msgstr ""

#: ../behaviors1.rst:6
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../behaviors1.rst:16
msgid "You can extend the functionality of your dexterity object by writing an adapter that adapts your dexterity object to add another feature or aspect."
msgstr ""

#: ../behaviors1.rst:18
msgid "But if you want to use this adapter, you must somehow know that an object implements that. Also, you could not easily add more fields to an object with such an approach."
msgstr ""

#: ../behaviors1.rst:21
msgid "Dexterity Approach"
msgstr ""

#: ../behaviors1.rst:25
msgid "Dexterity has a solution for it, with special adapters that are called and registered by the name behavior."
msgstr ""

#: ../behaviors1.rst:27
msgid "A behavior can be added to any content type through the web and during runtime."
msgstr ""

#: ../behaviors1.rst:29
msgid "All default views know about the concept of behaviors and when rendering forms, the views also check whether there are behaviors referenced with the current context and if these behavior have a schema of their own, these fields get shown in addition."
msgstr ""

#: ../behaviors1.rst:32
msgid "Names and Theory"
msgstr ""

#: ../behaviors1.rst:36
msgid "The name behavior is not a standard term in the software development. But it is a good idea to think of a behavior as an aspect. You are adding an aspect to your content type and you want to write your aspect in such a way, that it works independent of the content type on which the aspect is applied. You should not have dependencies to specific fields of your object or to other behaviors."
msgstr ""

#: ../behaviors1.rst:38
msgid "Such an object allows you to apply the `Open/closed principle`_ to your dexterity objects."
msgstr ""

#: ../behaviors1.rst:47
msgid "Practical example"
msgstr ""

#: ../behaviors1.rst:51
msgid "So, let us write our own small behavior."
msgstr ""

#: ../behaviors1.rst:53
msgid "In the future, we want our presentation be represented in Lanyrd (a Social Conference Directory - Lanyrd.com) too. For now we will just provide a link so that visitors can collaborate easily with the Lanyrd site."
msgstr ""

#: ../behaviors1.rst:55
msgid "So for now, our behavior just adds a new field for storing the url to Lanyrd."
msgstr ""

#: ../behaviors1.rst:57
msgid "We want to keep a clean structure, so we create a :file:`behaviors` directory first, and include it into the zcml declarations of our :file:`configure.zcml`."
msgstr ""

#: ../behaviors1.rst:63
msgid "Then, we add an empty :file:`behaviors/__init__.py` and a :file:`behaviors/configure.zcml` containing"
msgstr ""

#: ../behaviors1.rst:0
msgid "Advanced reference"
msgstr ""

#: ../behaviors1.rst:69
msgid "The original documentation is doctest code, so no documentation and no debuggable test."
msgstr ""

#: ../behaviors1.rst:71
msgid "It can be a bit confusing of when to use factory, or marker interfaces and when not."
msgstr ""

#: ../behaviors1.rst:73
msgid "If you do not define a factory, your attributes will be stored directly on the object. This can result in clashes with other behaviors."
msgstr ""

#: ../behaviors1.rst:75
msgid "You can avoid this by using the plone.behavior.AnnotationStorage factory. This one stores your attributes in an :ref:`Annotation <plone:annotations>`. But then you *must* use a marker interface if you want to have custom viewlets, browser views or portlets."
msgstr ""

#: ../behaviors1.rst:78
msgid "Without it, you would have no interface against which you could register your views."
msgstr ""

#: ../behaviors1.rst:99
msgid "And a :file:`behaviors/social.py` containing:"
msgstr ""

#: ../behaviors1.rst:130
msgid "Lets get through this step by step."
msgstr ""

#: ../behaviors1.rst:132
msgid "We register a behavior in :ref:`behaviors/configure.zcml <social-behavior-zcml-label>`. We do not say for which content type this behavior is valid. You do this, through the web or in the GenericSetup profile."
msgstr ""

#: ../behaviors1.rst:133
msgid "We create a marker interface in :ref:`behaviors/social.py <social-behavior-python-label>` for our behavior and make it also a schema containing the fields we want to declare. We could just use define schema fields on a zope.intereface class, but we use an extended form from `plone.supermodel`_, else we could not use the fieldset features."
msgstr ""

#: ../behaviors1.rst:135
msgid "We also add a `fieldset`_ so that our fields are not mixed with the normal fields of the object."
msgstr ""

#: ../behaviors1.rst:136
msgid "We add a normal `URI`_ schema field to store the URI to lanyrd."
msgstr ""

#: ../behaviors1.rst:137
msgid "We mark our schema as a class that also implements the `IFormFieldProvider`_ interface. This is a marker interface, we do not need to implement anything to provide the interface."
msgstr ""

#: ../behaviors1.rst:140
msgid "Adding it to our talk"
msgstr ""

#: ../behaviors1.rst:144
msgid "We could add this behavior now via the plone control panel. But instead, we will do it directly properly in our GenericSetup profile"
msgstr ""

#: ../behaviors1.rst:146
msgid "We must add the behavior to :file:`profiles/default/types/talk.xml`:"
msgstr ""

