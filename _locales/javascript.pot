# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Plone Training package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Training 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-02 12:20-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../javascript/development-process.rst:3
msgid "The JavaScript development process in Plone"
msgstr ""

#: ../javascript/development-process.rst:6
msgid "Code style"
msgstr ""

#: ../javascript/development-process.rst:8
msgid "Together with :py:mod:`plone.api` we developed `code style guidelines <https://github.com/plone/plone.api/blob/master/docs/contribute/conventions.rst>`_, which we are enforcing now for core Plone development. Finally! This makes code so much more readable. It currently doesn't cover JavaScript code guidelines, but those were considered when Mockup was developed. And luckily, similar to PEP 8 and the associated tooling (:program:`pep8`, :program:`pyflakes`, :program:`flake8`), JavaScript also has some guidelines - not official, but well respected. `Douglas Crockford <http://javascript.crockford.com/>`_ - besides of specifying the JSON standard - wrote the well known book \"JavaScript the good parts\". Out of that he developed the code linter `JSLint <http://www.jslint.com/>`_. Because this one was too strict, some other people wrote `JSHint <http://jshint.com/>`_."
msgstr ""

#: ../javascript/development-process.rst:17
msgid "Mockup uses JSHint with the following `.jshintrc configuration file <https://github.com/plone/mockup/blob/master/mockup/.jshintrc>`_:"
msgstr ""

#: ../javascript/development-process.rst:55
msgid "When working with JSHint or JSLint, it can be very useful to get some more context and explanation about several lint-errors. There is a lint-error database available, which can be very handy: http://jslinterrors.com/"
msgstr ""

#: ../javascript/development-process.rst:59
msgid "We strongly recommend to configure your editor of choice to do JavaScript code linting on save. The Mockup project is enforcing Lint-error-free code. Besides of that, this will also make you a better coder. The JSHint site lists some editors with Plugins to support JSHint linting: http://jshint.com/install/"
msgstr ""

#: ../javascript/development-process.rst:65
msgid "Regarding spaces/tabs and indentation:"
msgstr ""

#: ../javascript/development-process.rst:67
msgid "Spaces instead of tabs."
msgstr ""

#: ../javascript/development-process.rst:68
msgid "Tab indentation: 2 characters (to save screen estate)."
msgstr ""

#: ../javascript/development-process.rst:70
msgid "You have to configure your editor to respect these settings."
msgstr ""

#: ../javascript/development-process.rst:72
msgid "Confirming on a common code style makes contributing much more easier, friendly and fun!"
msgstr ""

#: ../javascript/development-process.rst:76
msgid "Mockup contributions"
msgstr ""

#: ../javascript/development-process.rst:78
msgid "For each feature, create a branch and make pull-requests on Github. Try to include all your changes in one commit only, so that our commit history stays clean. Still, you can do many commits to not accidentally loose changes and still commit to the last commit by doing::"
msgstr ""

#: ../javascript/development-process.rst:84
msgid "Don't forget to also include a change log entry in the :file:`CHANGES.rst` file."
msgstr ""

#: ../javascript/development-process.rst:88
msgid "Documentation"
msgstr ""

#: ../javascript/development-process.rst:90
msgid "Besides documenting your changes in the :file:`CHANGES.rst` file, also include user and developer documentation as appropriate."
msgstr ""

#: ../javascript/development-process.rst:92
msgid "For patterns, the user documentation is included in a comment in the header of the pattern file, as described in :ref:`mockup-writing-documentation`."
msgstr ""

#: ../javascript/development-process.rst:94
msgid "For function and methods, write an API documentation, following the `apidocjs <http://apidocjs.com/>`_ standard. You can find some examples throughout the source code."
msgstr ""

#: ../javascript/development-process.rst:97
msgid "We also very welcome contributions to the `training documentation <https://github.com/plone/training>`_ and the `official documentation <https://github.com/plone/documentation>`_. As with other contributions: please create branches and make pull-requests!"
msgstr ""

#: ../javascript/exercises/1.rst:2
msgid "Exercise 1: Include JavaScript in browser view"
msgstr ""

#: ../javascript/exercises/1.rst:6
#: ../javascript/exercises/10.rst:6
#: ../javascript/exercises/2.rst:6
#: ../javascript/exercises/3.rst:6
#: ../javascript/exercises/4.rst:6
#: ../javascript/exercises/5.rst:6
#: ../javascript/exercises/6.rst:6
#: ../javascript/exercises/7.rst:6
#: ../javascript/exercises/8.rst:6
#: ../javascript/exercises/9.rst:6
msgid "This exercise requires a working buildout using a fork of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/1.rst:10
msgid "For this exercise, we are simply including JavaScript in a browser view."
msgstr ""

#: ../javascript/exercises/1.rst:12
msgid "We will be working in the ``exercise1`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/1.rst:15
#: ../javascript/exercises/5.rst:20
#: ../javascript/exercises/7.rst:16
msgid "Add your JavaScript file"
msgstr ""

#: ../javascript/exercises/1.rst:17
msgid "First off, in your ``exercise1/static`` directory, add a file named ``script.js``. This exercise is open ended as to what you do with JavaScript on the page. We'll stay very simple for the sake of brevity, using jQuery to do a simple animation effect on the title of the page::"
msgstr ""

#: ../javascript/exercises/1.rst:50
msgid "Feel free to customize the script to do whatever you'd like."
msgstr ""

#: ../javascript/exercises/1.rst:54
#: ../javascript/exercises/10.rst:81
#: ../javascript/exercises/2.rst:42
#: ../javascript/exercises/3.rst:48
#: ../javascript/exercises/4.rst:48
#: ../javascript/exercises/6.rst:93
#: ../javascript/exercises/7.rst:72
#: ../javascript/exercises/8.rst:55
#: ../javascript/exercises/9.rst:66
msgid "Register static resource directory"
msgstr ""

#: ../javascript/exercises/1.rst:56
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise1/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/1.rst:68
#: ../javascript/exercises/2.rst:69
#: ../javascript/exercises/4.rst:75
#: ../javascript/exercises/7.rst:86
msgid "Register JavaScript resource"
msgstr ""

#: ../javascript/exercises/1.rst:70
msgid "Let’s register our script as a JavaScript resource with Plone. In the ``exercise1/profiles/default/registry.xml`` file, add configuration to register your script::"
msgstr ""

#: ../javascript/exercises/1.rst:81
#: ../javascript/exercises/2.rst:111
msgid "Create your browser view"
msgstr ""

#: ../javascript/exercises/1.rst:85
#: ../javascript/exercises/2.rst:115
msgid "This might be redundant with other documentation. Skip ahead if you know how to create browser views."
msgstr ""

#: ../javascript/exercises/1.rst:89
#: ../javascript/exercises/2.rst:119
msgid "Finally, let’s load our JavaScript file to only load on a specific page you need it on."
msgstr ""

#: ../javascript/exercises/1.rst:92
msgid "In our case, let’s add a basic new page view. The page template doesn’t need to implement any logic and we can use the main template to bring in the content of the page we’re using in the JavaScript(h1). Add this into your ``exercise1/page.pt`` file::"
msgstr ""

#: ../javascript/exercises/1.rst:110
#: ../javascript/exercises/2.rst:151
msgid "Load your JavaScript resource"
msgstr ""

#: ../javascript/exercises/1.rst:112
msgid "Add in view python code to tell Plone to render the script in the ``exercise1/browser.py`` file::"
msgstr ""

#: ../javascript/exercises/1.rst:127
#: ../javascript/exercises/2.rst:168
msgid "The most interesting part here is to look at ``add_resource_on_request``."
msgstr ""

#: ../javascript/exercises/1.rst:129
msgid "Finally, wire it up with ZCML registration in the ``exercise1/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/1.rst:141
#: ../javascript/exercises/10.rst:131
#: ../javascript/exercises/2.rst:182
#: ../javascript/exercises/3.rst:100
#: ../javascript/exercises/4.rst:99
#: ../javascript/exercises/5.rst:118
#: ../javascript/exercises/6.rst:166
#: ../javascript/exercises/7.rst:168
#: ../javascript/exercises/8.rst:124
#: ../javascript/exercises/9.rst:116
msgid "Installation"
msgstr ""

#: ../javascript/exercises/1.rst:143
#: ../javascript/exercises/10.rst:135
#: ../javascript/exercises/2.rst:184
#: ../javascript/exercises/3.rst:102
#: ../javascript/exercises/4.rst:101
#: ../javascript/exercises/5.rst:120
#: ../javascript/exercises/6.rst:168
#: ../javascript/exercises/7.rst:170
#: ../javascript/exercises/8.rst:128
#: ../javascript/exercises/9.rst:120
msgid "Start up your Plone instance"
msgstr ""

#: ../javascript/exercises/1.rst:144
msgid "Install the ``Exercise 1`` add-on"
msgstr ""

#: ../javascript/exercises/1.rst:147
msgid "Then, visit the URL: ``http://localhost:8080/Plone/front-page/@@exercise1``. This is assuming your Plone is is located at the URL ``http://localhost:8080/Plone``."
msgstr ""

#: ../javascript/exercises/1.rst:153
#: ../javascript/exercises/10.rst:155
#: ../javascript/exercises/2.rst:203
#: ../javascript/exercises/3.rst:133
#: ../javascript/exercises/4.rst:132
#: ../javascript/exercises/5.rst:135
#: ../javascript/exercises/6.rst:195
#: ../javascript/exercises/8.rst:157
#: ../javascript/exercises/9.rst:147
msgid "Production"
msgstr ""

#: ../javascript/exercises/1.rst:155
msgid "In this exercise, there is no special distinction between development and production builds. The JavaScript is developed without any build process."
msgstr ""

#: ../javascript/exercises/10.rst:2
msgid "Exercise 10: Customizing pattern"
msgstr ""

#: ../javascript/exercises/10.rst:10
msgid "In this exercise, we'll be walking through customizing the livesearch pattern."
msgstr ""

#: ../javascript/exercises/10.rst:12
msgid "We will be working in the ``exercise10`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/10.rst:15
#: ../javascript/exercises/6.rst:15
#: ../javascript/exercises/8.rst:17
#: ../javascript/exercises/9.rst:17
msgid "Add your pattern file"
msgstr ""

#: ../javascript/exercises/10.rst:17
msgid "In your ``exercise10/static`` directory, add a file named ``pattern.js``. Use this file to build your pattern. This example will define a new pattern to overwrite the existing livesearch pattern::"
msgstr ""

#: ../javascript/exercises/10.rst:56
msgid "Pay close attention to what we're doing here::"
msgstr ""

#: ../javascript/exercises/10.rst:63
msgid "We're deleting the existing registration of the livesearch pattern."
msgstr ""

#: ../javascript/exercises/10.rst:65
msgid "Next, we're extending the existing pattern::"
msgstr ""

#: ../javascript/exercises/10.rst:72
msgid "And just overriding the ``init`` function to provide our customization(default search current section)::"
msgstr ""

#: ../javascript/exercises/10.rst:83
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise10/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/10.rst:95
#: ../javascript/exercises/6.rst:106
#: ../javascript/exercises/8.rst:68
#: ../javascript/exercises/9.rst:79
msgid "Register your bundle"
msgstr ""

#: ../javascript/exercises/10.rst:97
msgid "Again, registration is done examctly the same as previous exercises::"
msgstr ""

#: ../javascript/exercises/10.rst:133
msgid "We have all the files necessary to run the pattern now."
msgstr ""

#: ../javascript/exercises/10.rst:136
msgid "Install the ``Exercise 10`` add-on"
msgstr ""

#: ../javascript/exercises/10.rst:140
#: ../javascript/exercises/3.rst:115
#: ../javascript/exercises/4.rst:106
#: ../javascript/exercises/6.rst:173
#: ../javascript/exercises/8.rst:133
#: ../javascript/exercises/9.rst:125
msgid "Running"
msgstr ""

#: ../javascript/exercises/10.rst:142
#: ../javascript/exercises/6.rst:175
#: ../javascript/exercises/8.rst:135
#: ../javascript/exercises/9.rst:127
msgid "At this point, we have no compiled version of the code that we're running with so our code doesn't do anything."
msgstr ""

#: ../javascript/exercises/10.rst:145
#: ../javascript/exercises/6.rst:178
#: ../javascript/exercises/8.rst:138
#: ../javascript/exercises/9.rst:130
msgid "Go into ``Site Setup`` -> ``Resource Registries``"
msgstr ""

#: ../javascript/exercises/10.rst:146
#: ../javascript/exercises/6.rst:179
#: ../javascript/exercises/8.rst:139
#: ../javascript/exercises/9.rst:131
msgid "Check \"Development Mode\""
msgstr ""

#: ../javascript/exercises/10.rst:147
msgid "Select to develop JavaScript and CSS for the ``exercise10`` bundle"
msgstr ""

#: ../javascript/exercises/10.rst:148
#: ../javascript/exercises/6.rst:181
#: ../javascript/exercises/8.rst:141
#: ../javascript/exercises/9.rst:133
msgid "Click save"
msgstr ""

#: ../javascript/exercises/10.rst:150
msgid "Now, you should see the livesearch pattern default to searching the current section."
msgstr ""

#: ../javascript/exercises/10.rst:157
#: ../javascript/exercises/6.rst:197
#: ../javascript/exercises/8.rst:159
#: ../javascript/exercises/9.rst:149
msgid "To build our bundle, we'll utilize the ``plone-compile-resources`` script that Plone ships with."
msgstr ""

#: ../javascript/exercises/10.rst:163
#: ../javascript/exercises/6.rst:203
#: ../javascript/exercises/8.rst:165
#: ../javascript/exercises/9.rst:155
msgid "If you're not running a ZEO setup, you'll need to shut down your Plone instance since the ZODB in this mode does not allow multiple processes to access it at the same time."
msgstr ""

#: ../javascript/exercises/10.rst:168
#: ../javascript/exercises/6.rst:208
#: ../javascript/exercises/8.rst:170
#: ../javascript/exercises/9.rst:160
msgid "An example command will look like this::"
msgstr ""

#: ../javascript/exercises/10.rst:173
#: ../javascript/exercises/6.rst:213
#: ../javascript/exercises/8.rst:175
#: ../javascript/exercises/9.rst:165
msgid "Once this command finishes, your bundle is built and will be deployed with your package package."
msgstr ""

#: ../javascript/exercises/2.rst:2
msgid "Exercise 2: NG2 APP component rendered in a browser view"
msgstr ""

#: ../javascript/exercises/2.rst:10
msgid "For this exercise, we will run an angular 2 application inside a plone browser view."
msgstr ""

#: ../javascript/exercises/2.rst:12
#: ../javascript/exercises/3.rst:12
msgid "We have most of the angular 2 boiler plate code created for you so let's just finish up a few things so you can customize it."
msgstr ""

#: ../javascript/exercises/2.rst:15
msgid "In this case we are going to use angular client to create the app inside the package."
msgstr ""

#: ../javascript/exercises/2.rst:17
msgid "We will be working in the ``exercise2`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/2.rst:20
#: ../javascript/exercises/3.rst:18
#: ../javascript/exercises/4.rst:18
msgid "Bootstrap"
msgstr ""

#: ../javascript/exercises/2.rst:22
#: ../javascript/exercises/3.rst:20
#: ../javascript/exercises/4.rst:20
msgid "Install npm dependencies::"
msgstr ""

#: ../javascript/exercises/2.rst:30
#: ../javascript/exercises/3.rst:27
#: ../javascript/exercises/4.rst:27
msgid "Add your angular 2 component"
msgstr ""

#: ../javascript/exercises/2.rst:32
msgid "In your ``exercise2/static/ng2app`` directory, there is a bolierplate code for an ng2 app. You can use ng2 cli to create new components, modules, services,... We hope you like typescript."
msgstr ""

#: ../javascript/exercises/2.rst:36
msgid "We can change the exercise2/static/src/app/app.component.html to create your own template."
msgstr ""

#: ../javascript/exercises/2.rst:38
msgid "Like I said, you can do whatever in this module."
msgstr ""

#: ../javascript/exercises/2.rst:44
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise2/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/2.rst:56
#: ../javascript/exercises/3.rst:62
#: ../javascript/exercises/4.rst:62
msgid "Build the file with webpack"
msgstr ""

#: ../javascript/exercises/2.rst:58
msgid "Our deployment is built using the ng cli tool::"
msgstr ""

#: ../javascript/exercises/2.rst:64
#: ../javascript/exercises/4.rst:70
msgid "Whenever you make a change to your component files, webpack will auto re-build the distribution"
msgstr ""

#: ../javascript/exercises/2.rst:71
msgid "Angular CLI creates three js, one for basic webpack instructions, one with the main js and another with the styling js. You will need to register the three on the ``exercise2/profiles/default/registry.xml``::"
msgstr ""

#: ../javascript/exercises/2.rst:91
msgid "Its really important that in case that you need to have dependency on loading the js you define on the registry.xml as its showen for the main js."
msgstr ""

#: ../javascript/exercises/2.rst:94
msgid "Finally we want to create a single entry point to load them, so we are going to create and register a js with the requires that are loading the app on a file called ``static/ng2app/main.js``::"
msgstr ""

#: ../javascript/exercises/2.rst:101
msgid "With the main.js defined on the filesystem we can now create the resource as a new resource::"
msgstr ""

#: ../javascript/exercises/2.rst:122
msgid "In our case, let’s add a basic new page view. The page template doesn’t need to implement any logic and we can use the main template to bring in the content of the page we’re using in the JavaScript(h1). Add this into your ``exercise2/page.pt`` file::"
msgstr ""

#: ../javascript/exercises/2.rst:146
msgid "The ``app-root`` tag is what is used for the component selector. You can customize this and use whatever selector you like."
msgstr ""

#: ../javascript/exercises/2.rst:153
msgid "Add in view python code to tell Plone to render the script in the ``exercise2/browser.py`` file::"
msgstr ""

#: ../javascript/exercises/2.rst:170
msgid "Finally, wire it up with ZCML registration in the ``exercise2/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/2.rst:185
msgid "Install the ``Exercise 2`` add-on"
msgstr ""

#: ../javascript/exercises/2.rst:186
msgid "Toggle development mode to make sure the new resources are included"
msgstr ""

#: ../javascript/exercises/2.rst:189
msgid "Then, visit the URL: ``http://localhost:8080/Plone/front-page/@@exercise2``. This is assuming your Plone is is located at the URL ``http://localhost:8080/Plone``."
msgstr ""

#: ../javascript/exercises/2.rst:196
#: ../javascript/exercises/3.rst:108
#: ../javascript/exercises/4.rst:118
#: ../javascript/exercises/7.rst:178
msgid "To make sure your resource registry configuration changes apply, you'll need to be in development mode. You can also toggle development mode on and off, click save, to force configuration to be re-built after changes instead of keeping development mode on."
msgstr ""

#: ../javascript/exercises/2.rst:205
msgid "In this exercise, there is no special distinction between development and production builds. Webpack re-builds the resource on every change for you and the JavaScript build file is not added to any bundle--it is just loaded for this particular page."
msgstr ""

#: ../javascript/exercises/3.rst:2
msgid "Exercise 3: NG2 APP component in a bundle"
msgstr ""

#: ../javascript/exercises/3.rst:10
#: ../javascript/exercises/4.rst:10
msgid "For this exercise, we will add an angular 2 application to a plone bundle."
msgstr ""

#: ../javascript/exercises/3.rst:15
msgid "We will be working in the ``exercise3`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/3.rst:29
msgid "In your ``exercise3/static/app`` directory, add a file named ``app.component.ts``. Use this file to do anything you would like to the page. This example will stick with the angular 2 quickstart code. We hope you like typescript::"
msgstr ""

#: ../javascript/exercises/3.rst:41
#: ../javascript/exercises/4.rst:41
msgid "You can do whatever in this module however, please notice how we changed the selector to ``.my-app``. In Angular 2, the selector can be anything. By changing it to a class name, it'll be easier for us to choose where we want to bootstrap our angular 2 component."
msgstr ""

#: ../javascript/exercises/3.rst:50
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise3/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/3.rst:64
#: ../javascript/exercises/4.rst:64
msgid "Our deployment is built using webpack::"
msgstr ""

#: ../javascript/exercises/3.rst:70
msgid "Whenever you make a change to your component files, webpack will auto re-build the distribution."
msgstr ""

#: ../javascript/exercises/3.rst:75
msgid "Register JavaScript resource as a bundle"
msgstr ""

#: ../javascript/exercises/3.rst:77
msgid "Register our script as a JavaScript resource with Plone. In the ``exercise3/profiles/default/registry.xml`` file, add configuration to register your script::"
msgstr ""

#: ../javascript/exercises/3.rst:92
msgid "A couple notes about this configuration:"
msgstr ""

#: ../javascript/exercises/3.rst:94
msgid "``merge_with`` tells plone to combine this file with the default Plone bundles"
msgstr ""

#: ../javascript/exercises/3.rst:95
msgid "``compile`` is distinguish this bundle as one that is compiled outside of Plone"
msgstr ""

#: ../javascript/exercises/3.rst:96
msgid "``jscompilation`` and ``csscompilation`` are what Plone uses as the final compiled output"
msgstr ""

#: ../javascript/exercises/3.rst:103
msgid "Install the ``Exercise 3`` add-on"
msgstr ""

#: ../javascript/exercises/3.rst:117
#: ../javascript/exercises/4.rst:108
msgid "It's up to you how to apply the component class name to an element of your choice. A couple options available to you are:"
msgstr ""

#: ../javascript/exercises/3.rst:120
#: ../javascript/exercises/4.rst:111
msgid "use TinyMCE source view and add ``class=\"my-app\"`` onto any tag"
msgstr ""

#: ../javascript/exercises/3.rst:121
#: ../javascript/exercises/4.rst:112
#: ../javascript/exercises/6.rst:190
#: ../javascript/exercises/8.rst:152
#: ../javascript/exercises/9.rst:142
msgid "customize the theme on your site and add it to an element in your theme file or use a diazo rule diazo rule to dynamically add the class to an element"
msgstr ""

#: ../javascript/exercises/3.rst:126
#: ../javascript/exercises/4.rst:125
msgid "Development"
msgstr ""

#: ../javascript/exercises/3.rst:128
#: ../javascript/exercises/4.rst:127
msgid "To make sure your changes are loaded after every build with webpack, make sure to go into Site setup -> Resource registries and enabled development mode."
msgstr ""

#: ../javascript/exercises/3.rst:135
#: ../javascript/exercises/4.rst:134
msgid "Production for this is simple when you're no longer in development mode on your Plone site. Webpack rebuilds the JavaScript distribution on every change."
msgstr ""

#: ../javascript/exercises/4.rst:2
msgid "Exercise 4: NG2 APP in logged in bundle"
msgstr ""

#: ../javascript/exercises/4.rst:12
msgid "We have most of the angular 2 boilerplate code created for you so let's just finish up a few things so you can customize it."
msgstr ""

#: ../javascript/exercises/4.rst:15
msgid "We will be working in the ``exercise4`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/4.rst:29
msgid "In your ``exercise4/static/app`` directory, add a file named ``app.component.ts``. Use this file to do anything you would like to the page. This example will stick with the angular 2 quickstart code. We hope you like typescript::"
msgstr ""

#: ../javascript/exercises/4.rst:50
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise4/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/4.rst:77
msgid "Let’s register our script as a JavaScript resource with Plone. In the ``exercise4/profiles/default/registry.xml`` file, add configuration to register your script::"
msgstr ""

#: ../javascript/exercises/4.rst:93
msgid "Pay attention to this part of the exercise. Here we merge the bundle with ``logged-in`` instead of ``default``. We also added an ``expression`` configuration option to specify that we only want this bundle to load for logged in users."
msgstr ""

#: ../javascript/exercises/4.rst:102
msgid "Install the ``Exercise 4`` add-on"
msgstr ""

#: ../javascript/exercises/5.rst:2
msgid "Exercise 5: Gallery integration with theme"
msgstr ""

#: ../javascript/exercises/5.rst:10
msgid "In this exercise, we'll be walking through how to include custom JavaScript into your theme."
msgstr ""

#: ../javascript/exercises/5.rst:13
msgid "This example essentially re-uses the Barceloneta theme. It's more important to pay attention to how the integration with the theme works, than worrying about diazo/theming details for this exercise."
msgstr ""

#: ../javascript/exercises/5.rst:17
msgid "We will be working in the ``exercise5`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/5.rst:22
msgid "The lightGallery distribution files are already included in the ``collective.jstraining`` package you're working with."
msgstr ""

#: ../javascript/exercises/5.rst:25
msgid "In your ``exercise5/theme`` directory, add a file named ``integration.js``. We'll use this file to integrate with Plone's album view::"
msgstr ""

#: ../javascript/exercises/5.rst:49
msgid "Let's talk about each part of this file in detail..."
msgstr ""

#: ../javascript/exercises/5.rst:51
msgid "Require the lightGallery JavaScript::"
msgstr ""

#: ../javascript/exercises/5.rst:60
msgid "This tells RequirejS to load the jQuery and the lightGallery JavaScript."
msgstr ""

#: ../javascript/exercises/5.rst:62
msgid "What is important to pay attention to in this example is that we're seeing if there are any ``photoAlbumEntry`` elements on the page."
msgstr ""

#: ../javascript/exercises/5.rst:65
msgid "If there are any, we modify the DOM structure slightly to work seemlessly with lightGallery::"
msgstr ""

#: ../javascript/exercises/5.rst:80
msgid "Finally, we call the lightGallery initialization with our configuration::"
msgstr ""

#: ../javascript/exercises/5.rst:90
msgid "Including JavaScript/CSS into your theme"
msgstr ""

#: ../javascript/exercises/5.rst:92
msgid "For JavaScript and CSS, you can include resources with convenience theme configuration settings of ``development-css``, ``production-css``, ``development-js`` and ``production-js``."
msgstr ""

#: ../javascript/exercises/5.rst:96
msgid "Since we're reusing the existing Barceloneta theme with this example though, we'll simple include the JavaScript/CSS into the theme ``index.html`` file."
msgstr ""

#: ../javascript/exercises/5.rst:101
msgid "CSS"
msgstr ""

#: ../javascript/exercises/5.rst:103
msgid "At the bottom of the head section in the ``index.html`` file, add::"
msgstr ""

#: ../javascript/exercises/5.rst:110
msgid "JavaScript"
msgstr ""

#: ../javascript/exercises/5.rst:112
msgid "At the bottom of the ``index.html`` file, before the ``</body>`` closing tag, add::"
msgstr ""

#: ../javascript/exercises/5.rst:121
msgid "Install the ``Exercise 5`` add-on"
msgstr ""

#: ../javascript/exercises/5.rst:125
msgid "Trying it out"
msgstr ""

#: ../javascript/exercises/5.rst:127
msgid "Create a folder and add some images to it in your Plone site."
msgstr ""

#: ../javascript/exercises/5.rst:129
msgid "Specify ``Album view`` for your folder."
msgstr ""

#: ../javascript/exercises/5.rst:131
msgid "Now when you click on an image, it should show the gallery viewer."
msgstr ""

#: ../javascript/exercises/5.rst:137
msgid "In this example, there is no difference with development vs production."
msgstr ""

#: ../javascript/exercises/5.rst:139
msgid "You can combine this example with other examples of building JavaScript projects to build, compile and minify your resources."
msgstr ""

#: ../javascript/exercises/6.rst:2
msgid "Exercise 6: Simple Pattern"
msgstr ""

#: ../javascript/exercises/6.rst:10
msgid "In this exercise, we'll be walking through creating a simple Plone pattern."
msgstr ""

#: ../javascript/exercises/6.rst:12
msgid "We will be working in the ``exercise6`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/6.rst:17
msgid "First off, in your ``exercise6/static`` directory, add a file named ``pattern.js``. Use this file to build your pattern. This example will stay very simple we’ll use jQuery to do a simply modify the content of an element::"
msgstr ""

#: ../javascript/exercises/6.rst:43
msgid "For more details on how to write a mockup pattern, utilize the various resources available."
msgstr ""

#: ../javascript/exercises/6.rst:46
msgid "`Minimal pattern <https://github.com/collective/mockup-minimalpattern>`_"
msgstr ""

#: ../javascript/exercises/6.rst:47
msgid "`Mockup docs <http://plone.github.io/mockup/dev/>`_"
msgstr ""

#: ../javascript/exercises/6.rst:48
msgid "`Patternslib <http://patternslib.com/>`_"
msgstr ""

#: ../javascript/exercises/6.rst:51
msgid "In our example, we're using the RequireJS ``define`` function to define our pattern as a JavaScript module."
msgstr ""

#: ../javascript/exercises/6.rst:56
msgid "Integrating with LESS"
msgstr ""

#: ../javascript/exercises/6.rst:58
msgid "Add a ``pattern.less`` file to the ``exercise6/static`` directory and provide whatever styles you'd like for your pattern::"
msgstr ""

#: ../javascript/exercises/6.rst:67
msgid "Creating your bundle"
msgstr ""

#: ../javascript/exercises/6.rst:69
msgid "To register the pattern, we'll create a bundle. Recall the difference between using ``require`` and ``define`` from the RequireJS docs."
msgstr ""

#: ../javascript/exercises/6.rst:72
msgid "Our bundle will use the ``require`` function to include the JavaScript module pattern we created our previously."
msgstr ""

#: ../javascript/exercises/6.rst:75
msgid "Create a ``bundle.js`` file in your ``exercise6/static`` directory::"
msgstr ""

#: ../javascript/exercises/6.rst:83
msgid "The only thing we're doing in this file is including the ``exercise6`` module we defined earlier--that's it. Bundles can do more as well. Then can include initialization code for example. See Plone's `default bundle <https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/static/plone.js>`_."
msgstr ""

#: ../javascript/exercises/6.rst:88
msgid "Bundles more or less tell the compiler what we care about loading. They do the dependency resolution and include the modules that were required with them."
msgstr ""

#: ../javascript/exercises/6.rst:95
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise6/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/6.rst:108
#: ../javascript/exercises/8.rst:70
msgid "Registering your bundle is done by adding Generic Setup xml configuration to the Plone registry. This is done in the ``registry.xml`` file in the ``profiles/default`` directory."
msgstr ""

#: ../javascript/exercises/6.rst:114
msgid "Resource"
msgstr ""

#: ../javascript/exercises/6.rst:116
#: ../javascript/exercises/8.rst:78
msgid "Resource is done exactly the same as in Exercise 1::"
msgstr ""

#: ../javascript/exercises/6.rst:125
#: ../javascript/exercises/8.rst:87
msgid "Bundle resource"
msgstr ""

#: ../javascript/exercises/6.rst:127
msgid "The bundle resource is just another resource registration like any other. Remember, the only difference here is in the content of the JavaScript file. One file uses ``require``, the other uses ``define``. Addditionally, we include our CSS/LESS dependencies here::"
msgstr ""

#: ../javascript/exercises/6.rst:141
#: ../javascript/exercises/8.rst:102
msgid "Bundle"
msgstr ""

#: ../javascript/exercises/6.rst:143
#: ../javascript/exercises/8.rst:104
msgid "Finally, let's create our bundle registration::"
msgstr ""

#: ../javascript/exercises/6.rst:169
msgid "Install the ``Exercise 6`` add-on"
msgstr ""

#: ../javascript/exercises/6.rst:180
msgid "Select to develop JavaScript and CSS for the ``exercise6`` bundle"
msgstr ""

#: ../javascript/exercises/6.rst:183
msgid "This should load your JavaScript and LESS files now; however, we don't have any elements with the ``pat-exercise6`` class assigned to them."
msgstr ""

#: ../javascript/exercises/6.rst:186
#: ../javascript/exercises/8.rst:146
#: ../javascript/exercises/9.rst:138
msgid "It's up to you how to apply the pattern class to an element of your choice. A couple options available to you are:"
msgstr ""

#: ../javascript/exercises/6.rst:189
msgid "use TinyMCE source view and add ``class=\"pat-exercise6\"`` onto any ``p`` tag"
msgstr ""

#: ../javascript/exercises/7.rst:2
msgid "Exercise 7: Using a pattern in a z3c form widget"
msgstr ""

#: ../javascript/exercises/7.rst:10
msgid "This exercise will go through adding a widget that checks the minimum size of an image before it is uploaded."
msgstr ""

#: ../javascript/exercises/7.rst:13
msgid "We will be working in the ``exercise7`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/7.rst:18
msgid "First off, in your ``exercise7/static`` directory, add a file named ``script.js``. Use this file to do anything you would like to the page::"
msgstr ""

#: ../javascript/exercises/7.rst:67
msgid "This pattern simply has ``minWidth`` and ``minHeight`` options and when a file is selected for upload, will check to make sure it is a valid size."
msgstr ""

#: ../javascript/exercises/7.rst:74
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise7/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/7.rst:88
msgid "Register our script as a JavaScript resource with Plone. In the ``exercise7/profiles/default/registry.xml`` file, add configuration to register your script::"
msgstr ""

#: ../javascript/exercises/7.rst:99
msgid "Create a custom widget"
msgstr ""

#: ../javascript/exercises/7.rst:101
msgid "Our custom widget will apply to all lead images. Add a file ``widget.py`` to your ``exercise7`` directory with the follow contents::"
msgstr ""

#: ../javascript/exercises/7.rst:144
msgid "Notice in the ``render`` method we utilize the ``add_resource_on_request`` function to load our pattern."
msgstr ""

#: ../javascript/exercises/7.rst:148
msgid "The code for ``image_widget.pt`` is already provided for this example since it is quite long. Review the file and notice where we are passing the value from the ``pattern_options`` method into our widget."
msgstr ""

#: ../javascript/exercises/7.rst:154
msgid "Register widget customization"
msgstr ""

#: ../javascript/exercises/7.rst:156
msgid "Next, we need to register our custom widget so it is used. In your ``configure.zcml`` file, add the following::"
msgstr ""

#: ../javascript/exercises/7.rst:171
msgid "Install the ``Exercise 7`` add-on"
msgstr ""

#: ../javascript/exercises/7.rst:174
msgid "Now, try to add/edit a lead image to content on the site."
msgstr ""

#: ../javascript/exercises/8.rst:2
msgid "Exercise 8: Pattern wrapping a 3rd party library"
msgstr ""

#: ../javascript/exercises/8.rst:10
msgid "In this exercise, we'll be walking through wrapping the tablesorter JavaScript library into a pattern"
msgstr ""

#: ../javascript/exercises/8.rst:13
msgid "We will be working in the ``exercise8`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/8.rst:19
msgid "First off, in your ``exercise8/static`` directory, add a file named ``pattern.js``. Use this file to build your pattern. This example will simply load and initialize the table sorter js::"
msgstr ""

#: ../javascript/exercises/8.rst:48
msgid "Notice in this example how we're not using ``define`` for this pattern. In this example, we are defining our pattern right inside what will be our bundle."
msgstr ""

#: ../javascript/exercises/8.rst:51
msgid "``tablesorter`` will be our registered 3rd party library include."
msgstr ""

#: ../javascript/exercises/8.rst:57
msgid "Register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise8/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/8.rst:76
msgid "Tablesorter"
msgstr ""

#: ../javascript/exercises/8.rst:89
msgid "Our pattern is a bundle-able resource since it uses the ``require`` function instead of the ``define`` function::"
msgstr ""

#: ../javascript/exercises/8.rst:126
#: ../javascript/exercises/9.rst:118
msgid "At this point, we have all the files necessary to run the pattern."
msgstr ""

#: ../javascript/exercises/8.rst:129
msgid "Install the ``Exercise 8`` add-on"
msgstr ""

#: ../javascript/exercises/8.rst:140
msgid "Select to develop JavaScript and CSS for the ``exercise8`` bundle"
msgstr ""

#: ../javascript/exercises/8.rst:143
msgid "This should load your JavaScript and LESS files now; however, we don't have any elements with the ``pat-exercise8`` class assigned to them."
msgstr ""

#: ../javascript/exercises/8.rst:149
msgid "use TinyMCE source view and add ``class=\"pat-tablesorter\"`` onto any ``table`` tag. You need to use ``th`` tags for the top row in your header in order for tablesorter to know to do anything."
msgstr ""

#: ../javascript/exercises/9.rst:2
msgid "Exercise 9: Pattern with react"
msgstr ""

#: ../javascript/exercises/9.rst:10
msgid "In this exercise, we'll be walking through creating a pattern that uses ReactJS."
msgstr ""

#: ../javascript/exercises/9.rst:13
msgid "We will be working in the ``exercise9`` directory of the collective.jstraining package."
msgstr ""

#: ../javascript/exercises/9.rst:19
msgid "First off, in your ``exercise9/static`` directory, add a file named ``pattern.js``. Use this file to build your pattern. This example will bind a React component to a pattern element::"
msgstr ""

#: ../javascript/exercises/9.rst:59
msgid "Notice that the ``init`` of the pattern utilizes the React element binding syntax. From there, react takes over and options from the pattern go into ``props`` for the React component."
msgstr ""

#: ../javascript/exercises/9.rst:68
msgid "Next, let’s register the static directory we just placed our script into. To register, you need to add ZCML registration for the static directory your script is in. Add this to the ``exercise9/configure.zcml`` file::"
msgstr ""

#: ../javascript/exercises/9.rst:81
msgid "Registration is done exactly like the other examples::"
msgstr ""

#: ../javascript/exercises/9.rst:121
msgid "Install the ``Exercise 9`` add-on"
msgstr ""

#: ../javascript/exercises/9.rst:132
msgid "Select to develop JavaScript and CSS for the ``exercise9`` bundle"
msgstr ""

#: ../javascript/exercises/9.rst:135
msgid "This should load your JavaScript and LESS files now; however, we don't have any elements with the ``pat-exercise9`` class assigned to them."
msgstr ""

#: ../javascript/exercises/9.rst:141
msgid "use TinyMCE source view and add ``class=\"pat-exercise9\"`` onto any tag"
msgstr ""

#: ../javascript/exercises/index.rst:4
msgid "Exercises"
msgstr ""

#: ../javascript/exercises/index.rst:6
msgid "**Prerequisites**"
msgstr ""

#: ../javascript/exercises/index.rst:8
msgid "Follow the instructions here to get a training buildout installed: https://training.plone.org/5/plone_training_config/instructions.html"
msgstr ""

#: ../javascript/exercises/index.rst:10
msgid "Fork https://github.com/collective/collective.jstraining and install your fork into your buildout from the previous step"
msgstr ""

#: ../javascript/exercises/index.rst:12
msgid "npm/nodejs install on your system"
msgstr ""

#: ../javascript/exercises/index.rst:13
msgid "webpack installed on your system"
msgstr ""

#: ../javascript/exercises/index.rst:14
msgid "grunt-cli installed on your system(``npm install -g grunt-cli``)"
msgstr ""

#: ../javascript/exercises/index.rst:17
msgid "**Install forked collective.jstraining**"
msgstr ""

#: ../javascript/exercises/index.rst:19
msgid "Add this line to the end of your ``buildout.cfg`` file:"
msgstr ""

#: ../javascript/exercises/index.rst:21
msgid "collective.jstraining = git <location of your fork>"
msgstr ""

#: ../javascript/exercises/index.rst:23
msgid "``<location of your fork>`` should be replaced with where your fork is."
msgstr ""

#: ../javascript/exercises/index.rst:25
msgid "Also, add ``collective.jstraining`` to the auto-checkout list::"
msgstr ""

#: ../javascript/exercises/index.rst:32
msgid "And one more spot to add collective.jstraining to: eggs::"
msgstr ""

#: ../javascript/exercises/index.rst:40
msgid "**Exercises**"
msgstr ""

#: ../javascript/index.rst:4
msgid "JavaScript for Plone Developers"
msgstr ""

#: ../javascript/index.rst:6
msgid "The definitive location for documentation regarding Plone's JavaScript and Resource Registries is located at: http://docs.plone.org/adapt-and-extend/theming/resourceregistry.html"
msgstr ""

#: ../javascript/index.rst:11
msgid "**Training Objective**"
msgstr ""

#: ../javascript/index.rst:13
msgid "The most important objective of this training is mostly to explain how to integrate JavaScript applications and integrations into Plone in many different scenarios. Secondly, it is to explain the JavaScript technologies used in Plone itself(RequireJS, Patterns, Resource registry)."
msgstr ""

#: ../javascript/index.rst:18
msgid "This training is *not* about:"
msgstr ""

#: ../javascript/index.rst:20
msgid "how to write JavaScript"
msgstr ""

#: ../javascript/index.rst:21
msgid "how to write React/Angular 2/JS framework of the week"
msgstr ""

#: ../javascript/index.rst:24
msgid "**Sections**"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:2
msgid "Through-The-Web development"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:4
msgid "It is possible to include Javascript functionality without the need to know about any of the tools involved. This is not reccommended for when you need to do a complex and modular implementation."
msgstr ""

#: ../javascript/javascript-3-ttw.rst:9
msgid "portal_javascript & portal_css"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:11
msgid "These two portal tools are no longer used in Plone 5. They are still present, but nothing should be included in them."
msgstr ""

#: ../javascript/javascript-3-ttw.rst:16
msgid "Resource Registries"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:18
msgid "This is the new tool included in Plone 5. From here we will manage everything related to Javascript and CSS resources. It can be found right at the bottom of Plone's Control Panel, in the :guilabel:`Advanced` section."
msgstr ""

#: ../javascript/javascript-3-ttw.rst:27
msgid "Add files"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:29
msgid "We are going to include 2 new resources, a Javascript file, and a LESS file."
msgstr ""

#: ../javascript/javascript-3-ttw.rst:31
msgid "The Javascript will look like this:"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:40
msgid "The LESS will look like this:"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:50
msgid "Go to the :guilabel:`Overrides` tab"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:51
msgid "Click the :guilabel:`Add file` button"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:52
msgid "Name the new file :file:`++plone++static/custom-links.js`"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:53
msgid "Paste the contents of the Javascript section into the textarea"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:54
#: ../javascript/javascript-3-ttw.rst:58
#: ../javascript/javascript-3-ttw.rst:76
#: ../javascript/javascript-3-ttw.rst:94
msgid "Click :guilabel:`Save`"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:55
msgid "Click the :guilabel:`Add file` button again"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:56
msgid "Name the new file :file:`++plone++static/custom-links.less`"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:57
msgid "Paste the contents of the CSS section into the textarea"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:62
msgid "Create the resource"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:64
#: ../javascript/javascript-3-ttw.rst:82
msgid "Go to the :guilabel:`Registry` tab"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:65
msgid "Click the :guilabel:`Add resource` button"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:66
msgid "Name it ``training-custom-links``"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:67
msgid "Under ``JS`` enter ``++plone++static/custom-links.js``"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:68
msgid "For the :guilabel:`CSS/LESS` section, click :guilabel:`Add`"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:69
msgid "Enter :file:`++plone++static/custom-links.less`"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:71
#: ../javascript/javascript-3-ttw.rst:89
msgid "It should look somthing like this:"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:80
msgid "Create the bundle and wire everything up"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:83
msgid "Click the :guilabel:`Add bundle` button"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:84
msgid "Name it ``training-custom-bundle``"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:85
msgid "Under :guilabel:`Resources` enter ``training-custom-links``"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:86
msgid "For the :guilabel:`Depends` section, we'll use ``plone``"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:87
msgid "Make sure :guilabel:`Enabled` is checked"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:98
msgid "Build the bundle"
msgstr ""

#: ../javascript/javascript-3-ttw.rst:100
msgid "In order for changes to be included, you need to build your bundle. For doing this, you just need to click the :guilabel:`Build` under the bundle you want to build."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:2
msgid "Scratchpad"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:4
msgid "Scratchpat for text snippets to be included somewhere else in the training."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:8
msgid "General advises"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:12
msgid "When providing static resources (JS/Less/CSS) for Plone 5's resource registry, use :py:mod:`plone.resource` based resources instead of Zope's browser resources. The latter are cached heavily and you won't get your changes built with Zope resources."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:17
msgid "A bundle can depend on another. This is mainly used for the order of inclusion in the rendered content. Currently, it doesn't hook in the require JavaScript dependency mechanism. This means, each bundle gets all their dependencies compiled in, which raise the response payload unnecessarily. To avoid this, add your resources to existing bundles, like the ``plone`` bundle."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:25
msgid "The mockup grunt infrastructure is build with a convention over configuration approach in mind. It's actually very picky about a lot of things: locations of your bundle files, location of your bundle Less files, location of your pattern JavaScript and Less files and the require JavaScript ids of those. Bundles have to be named ``mockup-bundles-BUNDLENAME``, patterns have to be named ``mockup-patterns-PATTERNNAME``."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:32
msgid "There is currently no API to build JavaScript and Less resources programmatically after importing them. Both build steps need the Client side RequireJS respectively Less compilers. The resources are downloaded to your browser, compiled there and re-upload to the Plone server, where they are stored in ZODB as :py:mod:`plone.resource` resources. We can pre-build everything using standard JavaScript and Less development frameworks, e.g. via ``mockup``'s Grunt infrastructure."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:39
msgid "Structure"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:49
msgid "About this training"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:49
msgid "Training Agenda"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:46
msgid "DAY1"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:45
msgid "Framework Tools Create Mockup Pattern Integrate Other (Non-Mockup based) Javascript"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:49
msgid "DAY2"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:49
msgid "Practicing"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:53
msgid "Preparing for the training"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:53
msgid "About Javascript, Mockup, Patternslib and Plone 5"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:53
msgid "History of everything, What's what."
msgstr ""

#: ../javascript/javascript-scratchpad.rst:55
msgid "Installation Mockup"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:63
msgid "Development environment"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:59
msgid "Javascript and editor support Code Linter Grunt Bower Testing"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:69
msgid "Whirlwind tour through Mockup, Patternslib and Javascript in Plone 5"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:66
msgid "Short explanation of the code tree / main modules: Mockup Patternslib Plone 5"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:80
msgid "Developing a Pattern"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:75
msgid "A Barebone Pattern"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:73
msgid "Based on collective.minimalpattern"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:75
msgid "Pattern explained"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:77
msgid "Adding a bower.json dependency"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:79
msgid "Testing the Pattern"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:86
msgid "Integrating the Pattern"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:83
msgid "Integration in Plone 5 Integration in Plone 4 Integration in Mockup w/out Plone"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:88
msgid "No-Pattern Javascript in Plone"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:90
msgid "The require JS way"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:92
msgid "The old, require JS-less way"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:95
msgid "Using other Frameworks in Plone"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:97
msgid "Angular JS React JS"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:101
msgid "Comparison to other frameworks"
msgstr ""

#: ../javascript/javascript-scratchpad.rst:103
msgid "Patternslib and Web Components Patternslib and React Components Patternslib and Angular JS directives Plone and ES 6"
msgstr ""

#: ../javascript/mockup.rst:3
msgid "Mockup - A Patternslib based collection of components"
msgstr ""

#: ../javascript/mockup.rst:6
msgid "Plone 5 ships with a revamped UI. An important part of the new UI is a collection of new input widgets, that we are used to work with in the so called Web 2.0 era."
msgstr ""

#: ../javascript/mockup.rst:9
msgid "For Plone, it was high time to update and modernize its input widgets. Not because the new ones look much better, but because they offer a much more comfortable way of entering data. To update Plone's widgets was the goal of :py:mod:`plone.app.widgets`, started by Nathan van Gheem and pushed wide forward by Rok Garbas. Rok forked Patternslib and created the Mockup project. Patternslib used a complex configuration syntax parser instead of a simple JSON based approach and the test coverage was not high enough. Besides it was fun to create something new, so Mockup was born. There were concerns about having two projects with the same goal, so JC Brand took the initiative and brought the two projects back together. Where Mockup had a dependency on :py:mod:`mockup-core` with a base pattern to extend from, a configuration parser, pattern registry and Grunt infrastructure, this dependency was removed and replaced by a dependency on :py:mod:`patternslib`."
msgstr ""

#: ../javascript/mockup.rst:18
msgid "Those projects led the foundation to the new way of developing JavaScript in Plone."
msgstr ""

#: ../javascript/mockup.rst:22
msgid "The Mockup project structure"
msgstr ""

#: ../javascript/mockup.rst:24
msgid "This is how Mockup is structured on the filesystem::"
msgstr ""

#: ../javascript/mockup.rst:104
msgid "A minimal pattern"
msgstr ""

#: ../javascript/mockup.rst:106
msgid "The following is a minimal pattern example, except that it uses jQuery and changes some HTML elements' text."
msgstr ""

#: ../javascript/mockup.rst:131
msgid "For a complete example including tests, bundle config und Plone integration see: https://github.com/collective/mockup-minimalpattern"
msgstr ""

#: ../javascript/mockup-writing-documentation.rst:4
msgid "Writing documentation for Mockup"
msgstr ""

#: ../javascript/mockup-writing-documentation.rst:6
msgid "The documentation for Mockup is automatically generated from comments in pattern code. The structure is as follows::"
msgstr ""

#: ../javascript/requirejs-modules.rst:3
msgid "RequireJS and JavaScript modules"
msgstr ""

#: ../javascript/requirejs-modules.rst:5
msgid "One of the great new features, Plone 5 gives us, is the ability to define and use JavaScript modules."
msgstr ""

#: ../javascript/requirejs-modules.rst:7
msgid "Most serious programming languages provide the concept of namespaces and module dependencies, like Python's :keyword:`import` mechanism. Python code would be unmanageable, if we'd rely on the existence of global variables and objects in our own scripts."
msgstr ""

#: ../javascript/requirejs-modules.rst:10
msgid "But JavaScript doesn't have any concept for declaring dependencies. Only the new and finalized ECMAScript 6 (ES6) standard finally comes with a module definition system (actually directly inspired by RequireJS and CommonJS), along other great features like proper variable scoping."
msgstr ""

#: ../javascript/requirejs-modules.rst:13
msgid "In Plone, we use `RequireJS <http://requirejs.org>`_ as a framework to define and load modules. RequireJS is an implementation of the `Asynchronous Module Definition API <https://github.com/amdjs/amdjs-api/blob/master/AMD.md>`_. The module definition and loading standard of CommonJS is used by NodeJS. RequireJS adds the ability to load modules asynchronously, which can be better for performance. The CommonJS module loading syntax can also be used in RequireJS. But the main point why Plone uses RequireJS is, that there is a JavaScript based compiler, which allows us to build bundles (a combined, optimized and minified form with all dependencies) Through-The-Web. RequireJS and CommonJS are also forward compatible with ES6's module definition standard."
msgstr ""

#: ../javascript/requirejs-modules.rst:21
msgid "Finally we can use JavaScript in Plone like it is a proper programming language! No need to depend on the existence of global variables and a strict order, in which scripts have to be loaded. You can still use legacy-style JavaScript, but Plone encourages you to enter the modern world of JavaScript development."
msgstr ""

#: ../javascript/requirejs-modules.rst:27
msgid "Defining a module"
msgstr ""

#: ../javascript/requirejs-modules.rst:29
msgid "In the past years, a common pattern of defining anonymous function calls has evolved. This allows to better scope variables and not clutter the global namespace. The pattern is discussed in depth at `JavaScript Module Pattern: In-Depth <http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html>`_ and basically comes down to the following Pattern:"
msgstr ""

#: ../javascript/requirejs-modules.rst:40
msgid "If your code should be reused like a library, you can define a module export."
msgstr ""

#: ../javascript/requirejs-modules.rst:53
msgid "RequireJS extends this pattern and removes the necessity for globals to refer to other modules. In RequireJS, you're wrapping your code like this:"
msgstr ""

#: ../javascript/requirejs-modules.rst:67
msgid "No need for any globals anymore (except for the ``define`` and ``require`` methods)!"
msgstr ""

#: ../javascript/requirejs-modules.rst:69
msgid "Also note, that the code within the RequireJS define wrapper is exactly the same as in the module pattern example above. Using RequireJS doesn't mean, you have to rewrite everything. It's just about modularizing code."
msgstr ""

#: ../javascript/requirejs-modules.rst:72
msgid "To be able to use the defined module somewhere else, you need to be able to reference it by a module id. You can pass it as very first argument to the ``define`` function, but you might better do that in the RequireJS configuration. If you don't do it at all, it gets automatically assigned the name of the file. For example, let's assume a project structure like follows and the ``define`` example from above living in a file called ``my_module.js``::"
msgstr ""

#: ../javascript/requirejs-modules.rst:84
msgid "Let's do the RequireJS configuration in :file:`main.js` and use that as main entry point also to finally let something happen:"
msgstr ""

#: ../javascript/requirejs-modules.rst:99
msgid "You can use your defined module as a dependency in another ``define`` module definition - if you just want to run some non-reusable code - as a dependency in a ``require`` call. While you have to return a module export in ``define``, you don't need that for ``require``. So, ``require`` corresponds to the first form of the module pattern explained above."
msgstr ""

#: ../javascript/requirejs-modules.rst:103
msgid "When using in the browser (and not in NodeJS, for example), we have to include an entry point as script tag in our HTML markup:"
msgstr ""

#: ../javascript/requirejs-modules.rst:110
msgid "Alternatively, you can define a script as main entry point in RequireJS as data attribute on the script tag, which loads require.js. In that case, you could omit the configuration, because the entry point script is used as ``baseUrl``, if nothing else is defined:"
msgstr ""

#: ../javascript/requirejs-modules.rst:119
msgid "More information"
msgstr ""

#: ../javascript/requirejs-modules.rst:121
msgid "More on RequireJS' API and how to include legacy code, which doesn't use the ``define`` module definition pattern, see the `RequireJS API documentation <http://requirejs.org/docs/api.html#define>`_."
msgstr ""

#: ../javascript/training_installation.rst:2
msgid "Installing Plone and example packages for the Training"
msgstr ""

#: ../javascript/training_installation.rst:4
msgid "To get Plone and example packages for this training installed, please follow the installation instructions at :doc:`/plone_training_config/instructions`."
msgstr ""

#: ../javascript/training_installation.rst:6
msgid "After that, issue the following command to get the development environment for the ``mockup-minimalpattern`` example package installed::"
msgstr ""

#: ../javascript/training_installation.rst:12
msgid "To be able to install the JavaScript development tools, you need `NodeJS <https://nodejs.org/en/download/>`_ installed on your development computer."
msgstr ""

#: ../javascript/training_installation.rst:16
msgid "Installing Mockup"
msgstr ""

#: ../javascript/training_installation.rst:18
msgid "Optionally you can install Mockup. Mockup is already included in the `training_buildout <https://github.com/collective/training_buildout/blob/plone5/buildout.cfg>`_. Uncomment the \"mockup\" lines in the buildout's ``auto-checkout`` and ``eggs`` sections."
msgstr ""

#: ../javascript/training_installation.rst:21
msgid "After that, run buildout:"
msgstr ""

#: ../javascript/training_installation.rst:29
msgid "If you are running buildout inside vagrant, always remember to use specify :file:`vagrant.cfg`: :command:`bin/buildout -Nc vagrant.cfg`"
msgstr ""

