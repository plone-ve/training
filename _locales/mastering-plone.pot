# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Plone 5 Training package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone 5 Training 2017\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-04-26 08:29-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../mastering-plone/about_mastering.rst:4
msgid "About Mastering Plone"
msgstr ""

#: ../mastering-plone/about_mastering.rst:6
msgid "This training was created by Philip Bauer and Patrick Gerken of `starzel.de <https://www.starzel.de>`_ to create a canonical training for future Plone developers."
msgstr ""

#: ../mastering-plone/about_mastering.rst:9
msgid "The aim is that anyone with the appropriate knowledge can give a training based on it and contribute to it. It is published as Open Source on `GitHub <https://github.com/plone/training>`_ and `training.plone.org <https://training.plone.org/>`_."
msgstr ""

#: ../mastering-plone/about_mastering.rst:12
msgid "If you want to inquire the original authors about organizing a training please contact them at team@starzel.de."
msgstr ""

#: ../mastering-plone/about_mastering.rst:18
msgid "Upcoming Trainings"
msgstr ""

#: ../mastering-plone/about_mastering.rst:20
msgid "If you want to have a training near you please ask for trainings on https://community.plone.org"
msgstr ""

#: ../mastering-plone/about_mastering.rst:25
msgid "Previous Trainings"
msgstr ""

#: ../mastering-plone/about_mastering.rst:27
msgid "The Mastering Plone Training was so far held publicly at the following occasions:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:29
msgid "`Ploneconf 2017 in Barcelona <https://2017.ploneconf.org/>`_"
msgstr ""

#: ../mastering-plone/about_mastering.rst:30
msgid "`Ploneconf 2016 in Boston <https://2016.ploneconf.org/>`_"
msgstr ""

#: ../mastering-plone/about_mastering.rst:31
msgid "October 2015, Bucharest"
msgstr ""

#: ../mastering-plone/about_mastering.rst:32
msgid "`March 2015, Munich <https://www.starzel.de/leistungen/training/>`_"
msgstr ""

#: ../mastering-plone/about_mastering.rst:33
msgid "Plone Conference 2014, Bristol"
msgstr ""

#: ../mastering-plone/about_mastering.rst:34
msgid "`June 2014, Caracas <https://twitter.com/hellfish2/status/476906131970068480>`_"
msgstr ""

#: ../mastering-plone/about_mastering.rst:35
msgid "`May 2014, Munich <https://www.starzel.de/blog/mastering-plone>`_"
msgstr ""

#: ../mastering-plone/about_mastering.rst:36
msgid "`PythonBrasil/Plone Conference 2013, Brasilia <https://2013.pythonbrasil.org.br/>`_"
msgstr ""

#: ../mastering-plone/about_mastering.rst:37
msgid "PyCon DE 2012, Leipzig"
msgstr ""

#: ../mastering-plone/about_mastering.rst:38
msgid "Plone Conference 2012, Arnheim"
msgstr ""

#: ../mastering-plone/about_mastering.rst:39
msgid "PyCon De 2011, Leipzig"
msgstr ""

#: ../mastering-plone/about_mastering.rst:45
msgid "Trainers"
msgstr ""

#: ../mastering-plone/about_mastering.rst:47
msgid "The following trainers have given trainings based on Mastering Plone:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:53
msgid "Philip Bauer"
msgstr ""

#: ../mastering-plone/about_mastering.rst:50
msgid "Philip Bauer is a web developer from Munich who fell in love with Plone in 2005 and since then works almost exclusively with Plone. A historian by education he drifted towards creating websites in the 90's and founded the company Starzel.de in 2000. He is a member of the Plone foundation, loves teaching and is dedicated to Open Source. Among other Plone-related projects he started creating the Mastering Plone Training so that everyone can become a Plone-Developer."
msgstr ""

#: ../mastering-plone/about_mastering.rst:58
msgid "Patrick Gerken"
msgstr ""

#: ../mastering-plone/about_mastering.rst:56
msgid "Patrick Gerken works with Python since 2002. He started working with pure Zope applications and now develops mainly with Plone, Pyramid and JavaScript as well as doing what is called DevOps. He works at Zumtobel Group."
msgstr ""

#: ../mastering-plone/about_mastering.rst:63
msgid "Steve McMahon"
msgstr ""

#: ../mastering-plone/about_mastering.rst:61
msgid "Steve McMahon is a long-time Plone community member, contributor and trainer. He is the creator of PloneFormGen and maintainer of the Unified installer. Steve also wrote several chapters of Practical Plone and is an experienced speaker and instructor."
msgstr ""

#: ../mastering-plone/about_mastering.rst:68
msgid "Steffen Lindner"
msgstr ""

#: ../mastering-plone/about_mastering.rst:66
msgid "Steffen Lindner started developing Plone in 2006. He worked on small Plone sites and also with huge intranet sites. As Open Source / Free Software developer he joined the Plone core developer team 2011 and works at Starzel.de."
msgstr ""

#: ../mastering-plone/about_mastering.rst:76
msgid "Fulvio Casali"
msgstr ""

#: ../mastering-plone/about_mastering.rst:71
msgid "Fulvio Casali has been working almost exclusively with Plone since 2008. He struggled for years to find his way around the source code of Plone when there was no documentation and no trainings, and feels passionate about helping users and developers become proficient."
msgstr ""

#: ../mastering-plone/about_mastering.rst:75
msgid "He loves participating in Plone community events, and organized two strategic Plone sprints on the northwest coast of the USA and helped galvanized the developer community there."
msgstr ""

#: ../mastering-plone/about_mastering.rst:82
msgid "Johannes Raggam"
msgstr ""

#: ../mastering-plone/about_mastering.rst:79
msgid "Johannes Raggam from Graz/Austria works most of the time with a technology stack based around Python, Plone, Pyramid and JavaScript. As an active Open Source / Free Software developer he believes in the power of collaborative work."
msgstr ""

#: ../mastering-plone/about_mastering.rst:82
msgid "He is a BlueDynamics Alliance Partner and Plone Core Contributor since 2009, a member of the Plone Framework Team since 2012 and Plone Foundation member."
msgstr ""

#: ../mastering-plone/about_mastering.rst:87
msgid "Franco Pellegrini"
msgstr ""

#: ../mastering-plone/about_mastering.rst:85
msgid "Franco Pellegrini is a software developer from Cordoba, Argentina. He started developing Plone in 2005 in a small software company, and as an independent contractor since 2011. He believes in free software philosophy, and so, he has been a Plone core developer since 2010 and Framework Team member since 2012."
msgstr ""

#: ../mastering-plone/about_mastering.rst:94
msgid "Fred van Dijk"
msgstr ""

#: ../mastering-plone/about_mastering.rst:90
msgid "Fred, from Rotterdam the Netherlands, has been exposed to Plone early on as a user. In 2007 he joined Zest Software to work on and with Plone and Python web apps full time."
msgstr ""

#: ../mastering-plone/about_mastering.rst:93
msgid "He can focus on the business side, helping users decide on which features are most valuable to develop or when to stick with standard functionality. He also gives training on using and administering the CMS. On the IT side he has plenty technical knowledge to work on code, system administration and do project management in a team of developers."
msgstr ""

#: ../mastering-plone/about_mastering.rst:102
msgid "Leonardo Caballero"
msgstr ""

#: ../mastering-plone/about_mastering.rst:97
msgid "Leonardo J. Caballero G. of Maracaibo, Venezuela, is a Technical Director at Covantec R.L. and Conectivo C.A. Leonardo maintains the Spanish translations of more than 49 Plone Add-ons as well as Spanish-language documentation for Plone itself."
msgstr ""

#: ../mastering-plone/about_mastering.rst:100
msgid "He has contributed several Plone Add-ons that are part of PloneGov. Currently serving the Plone Board as a Plone Ambassador, Leonardo has also served as an Advisory Board member and has spoken at or helped organize Plone and open-source events throughout South America."
msgstr ""

#: ../mastering-plone/about_mastering.rst:108
msgid "Using the documentation for a training"
msgstr ""

#: ../mastering-plone/about_mastering.rst:110
msgid "Feel free to organize a training yourself. Please be so kind to contribute any bug fixes or enhancements you made to the documentation for your training."
msgstr ""

#: ../mastering-plone/about_mastering.rst:113
msgid "The training is rendered using Sphinx and builds in two flavors:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:117
msgid "default"
msgstr ""

#: ../mastering-plone/about_mastering.rst:116
msgid "The verbose version used for the online documentation and for the trainer. Build it in Sphinx with ``make html`` or use the online version."
msgstr ""

#: ../mastering-plone/about_mastering.rst:122
msgid "presentation"
msgstr ""

#: ../mastering-plone/about_mastering.rst:120
msgid "An abbreviated version used for the projector during a training. It should use more bullet points than verbose text. Build it in Sphinx with ``make presentation``."
msgstr ""

#: ../mastering-plone/about_mastering.rst:126
msgid "By prefixing an indented block of text or code with ``.. only:: presentation`` you can control that this block is used for the presentation version only."
msgstr ""

#: ../mastering-plone/about_mastering.rst:129
msgid "To hide a block from the presentation version use ``.. only:: not presentation``"
msgstr ""

#: ../mastering-plone/about_mastering.rst:131
msgid "Content without a prefix will be included in both versions."
msgstr ""

#: ../mastering-plone/about_mastering.rst:135
msgid "The readthedocs theme"
msgstr ""

#: ../mastering-plone/about_mastering.rst:137
msgid "We slightly tweaked the `Read the Docs Theme <https://github.com/rtfd/sphinx_rtd_theme>`_ in ``_static/custom.css`` so that it works better with projectors:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:140
msgid "We start hiding the navigation bar much earlier so that it does not interfere with the text."
msgstr ""

#: ../mastering-plone/about_mastering.rst:141
msgid "We enlarge the default width of the content-area."
msgstr ""

#: ../mastering-plone/about_mastering.rst:144
#: ../mastering-plone/behaviors_2.rst:325
#: ../mastering-plone/dexterity.rst:237
#: ../mastering-plone/eggs1.rst:239
#: ../mastering-plone/features.rst:78
#: ../mastering-plone/views_3.rst:230
msgid "Exercises"
msgstr ""

#: ../mastering-plone/about_mastering.rst:146
msgid "Some additional JavaScript shows hidden solutions for exercises by clicking."
msgstr ""

#: ../mastering-plone/about_mastering.rst:148
msgid "Prepend the solution with this markup::"
msgstr ""

#: ../mastering-plone/about_mastering.rst:153
msgid "Here is a full example"
msgstr ""

#: ../mastering-plone/about_mastering.rst:171
msgid "It will be rendered like this:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:174
#: ../mastering-plone/behaviors_2.rst:328
#: ../mastering-plone/dexterity.rst:240
#: ../mastering-plone/dexterity_2.rst:455
#: ../mastering-plone/dexterity_3.rst:347
#: ../mastering-plone/events.rst:166
#: ../mastering-plone/export_code.rst:402
#: ../mastering-plone/features.rst:81
#: ../mastering-plone/frontpage.rst:226
#: ../mastering-plone/testing.rst:165
#: ../mastering-plone/user_generated_content.rst:227
#: ../mastering-plone/viewlets_1.rst:151
#: ../mastering-plone/views_3.rst:235
#: ../mastering-plone/zpt.rst:510
msgid "Exercise 1"
msgstr ""

#: ../mastering-plone/about_mastering.rst:176
msgid "Your mission, should you choose to accept it..."
msgstr ""

#: ../mastering-plone/about_mastering.rst:178
#: ../mastering-plone/anatomy.rst:190
#: ../mastering-plone/behaviors_2.rst:332
#: ../mastering-plone/behaviors_2.rst:392
#: ../mastering-plone/dexterity.rst:244
#: ../mastering-plone/dexterity.rst:273
#: ../mastering-plone/dexterity_2.rst:341
#: ../mastering-plone/dexterity_2.rst:461
#: ../mastering-plone/dexterity_3.rst:351
#: ../mastering-plone/dexterity_3.rst:626
#: ../mastering-plone/dexterity_3.rst:765
#: ../mastering-plone/events.rst:170
#: ../mastering-plone/events.rst:202
#: ../mastering-plone/export_code.rst:406
#: ../mastering-plone/features.rst:85
#: ../mastering-plone/features.rst:113
#: ../mastering-plone/features.rst:123
#: ../mastering-plone/frontpage.rst:230
#: ../mastering-plone/restapi.rst:69
#: ../mastering-plone/restapi.rst:494
#: ../mastering-plone/testing.rst:181
#: ../mastering-plone/user_generated_content.rst:231
#: ../mastering-plone/viewlets_1.rst:158
#: ../mastering-plone/viewlets_1.rst:237
#: ../mastering-plone/views_2.rst:355
#: ../mastering-plone/views_3.rst:239
#: ../mastering-plone/views_3.rst:261
#: ../mastering-plone/views_3.rst:392
#: ../mastering-plone/zpt.rst:547
#: ../mastering-plone/zpt.rst:583
#: ../mastering-plone/zpt.rst:623
#: ../mastering-plone/zpt.rst:673
#: ../mastering-plone/zpt.rst:717
#: ../mastering-plone/zpt.rst:755
#: ../mastering-plone/zpt.rst:795
msgid "Solution"
msgstr ""

#: ../mastering-plone/about_mastering.rst:181
msgid "To save the world with only seconds to spare do the following:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:189
msgid "Building the documentation locally"
msgstr ""

#: ../mastering-plone/about_mastering.rst:192
msgid "Dependencies"
msgstr ""

#: ../mastering-plone/about_mastering.rst:194
msgid "Please make sure that you have `Enchant <https://www.abisource.com/projects/enchant/>`_ installed. This is needed for spell-checking."
msgstr ""

#: ../mastering-plone/about_mastering.rst:196
msgid "Install Enchant on macOS:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:202
msgid "Install Enchant on Ubuntu:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:209
msgid "To build the documentation follow these steps:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:218
msgid "Now install dependencies and build."
msgstr ""

#: ../mastering-plone/about_mastering.rst:225
msgid "You can now open the output from ``_build/html/index.html``. To build the presentation version use ``make presentation`` instead of ``make html``."
msgstr ""

#: ../mastering-plone/about_mastering.rst:228
msgid "You can open the presentation at ``presentation/index.html``."
msgstr ""

#: ../mastering-plone/about_mastering.rst:231
msgid "Build new"
msgstr ""

#: ../mastering-plone/about_mastering.rst:242
msgid "Now you can open documentation with your web-bowser."
msgstr ""

#: ../mastering-plone/about_mastering.rst:244
msgid "If you use macOS you can do:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:250
msgid "In the case of Linux, Ubuntu for example you can do:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:258
msgid "If you do not use Firefox but Chrome, please replace firefox with google-chrome e.g"
msgstr ""

#: ../mastering-plone/about_mastering.rst:268
msgid "Update existing"
msgstr ""

#: ../mastering-plone/about_mastering.rst:279
msgid "Technical set up to do before a training (as a trainer)"
msgstr ""

#: ../mastering-plone/about_mastering.rst:281
msgid "Prepare a mailserver for the user registration mail (See :ref:`features-mailserver-label`)"
msgstr ""

#: ../mastering-plone/about_mastering.rst:282
msgid "If you do only a part of the training (Advanced) prepare a database with the steps of the previous sections. Be aware that the file- and blobstorage in the Vagrant box is here: /home/vagrant/var/ (not at the buildout path /vagrant/buildout/)"
msgstr ""

#: ../mastering-plone/about_mastering.rst:286
msgid "Upgrade the vagrant and buildout to a new Plone-version"
msgstr ""

#: ../mastering-plone/about_mastering.rst:288
msgid "In https://github.com/collective/training_buildout change `buildout.cfg <https://github.com/collective/training_buildout/blob/master/buildout.cfg>`_ to extend from the new `versions.cfg` on http://dist.plone.org/release"
msgstr ""

#: ../mastering-plone/about_mastering.rst:289
msgid "Check if we should to update any versions in https://github.com/collective/training_buildout/blob/master/versions.cfg"
msgstr ""

#: ../mastering-plone/about_mastering.rst:290
msgid "Commit and push the changes to the training_buildout"
msgstr ""

#: ../mastering-plone/about_mastering.rst:291
msgid "Modify the vagrant-setup by modifying :file:`plone_training_config/manifests/plone.pp`. Set the new Plone-version as `$plone_version` in line 3."
msgstr ""

#: ../mastering-plone/about_mastering.rst:292
msgid "Test the vagrant-setup it by creating a new vagrant-box using the new config."
msgstr ""

#: ../mastering-plone/about_mastering.rst:293
msgid "Create a new zip-file of all files in `plone_training_config` and move it to `_static`:"
msgstr ""

#: ../mastering-plone/about_mastering.rst:300
msgid "Commit and push the changes to https://github.com/plone/training"
msgstr ""

#: ../mastering-plone/about_mastering.rst:304
msgid "Train the trainer"
msgstr ""

#: ../mastering-plone/about_mastering.rst:306
msgid "If you are a trainer there is a special mini training about giving technical trainings. We really want this material to be used, re-used, expanded, and improved by Plone trainers world wide."
msgstr ""

#: ../mastering-plone/about_mastering.rst:309
msgid "These chapters don't contain any Plone specific advice. There's background, theory, check lists, and tips for anyone trying to teach technical subjects."
msgstr ""

#: ../mastering-plone/about_mastering.rst:312
msgid ":doc:`../teachers-training/index`"
msgstr ""

#: ../mastering-plone/about_mastering.rst:317
msgid "Contributing"
msgstr ""

#: ../mastering-plone/about_mastering.rst:319
msgid "Everyone is **very welcome** to contribute. Minor bug fixes can be pushed directly in the `repository <https://github.com/plone/training>`_, bigger changes should made as `pull-requests <https://github.com/plone/training/pulls/>`_ and discussed previously in tickets."
msgstr ""

#: ../mastering-plone/about_mastering.rst:327
msgid "License"
msgstr ""

#: ../mastering-plone/about_mastering.rst:329
msgid "The Mastering Plone Training is licensed under a `Creative Commons Attribution 4.0 International License <https://creativecommons.org/licenses/by/4.0/>`_."
msgstr ""

#: ../mastering-plone/about_mastering.rst:331
msgid "Make sure you have filled out a `Contributor Agreement <https://plone.org/foundation/contributors-agreement>`_."
msgstr ""

#: ../mastering-plone/about_mastering.rst:333
msgid "If you haven't filled out a Contributor Agreement, you can still contribute. Contact the Documentation team, for instance via the `mailinglist <https://sourceforge.net/p/plone/mailman/plone-docs/>`_ or directly send a mail to plone-docs@lists.sourceforge.net"
msgstr ""

#: ../mastering-plone/about_mastering.rst:337
msgid "Basically, all we need is your written confirmation that you are agreeing your contribution can be under Creative Commons."
msgstr ""

#: ../mastering-plone/about_mastering.rst:339
msgid "You can also add in a comment with your pull request \"I, <full name>, agree to have this published under Creative Commons 4.0 International BY\"."
msgstr ""

#: ../mastering-plone/add-ons.rst:4
msgid "Extend Plone With Add-On Packages"
msgstr ""

#: ../mastering-plone/add-ons.rst:6
msgid "There are more than 2,000 add-ons for Plone. We will cover only a handful today."
msgstr ""

#: ../mastering-plone/add-ons.rst:7
msgid "Using them saves a lot of time"
msgstr ""

#: ../mastering-plone/add-ons.rst:8
msgid "The success of a project often depends on finding the right add-on"
msgstr ""

#: ../mastering-plone/add-ons.rst:9
msgid "Their use, usefulness, quality and complexity varies a lot"
msgstr ""

#: ../mastering-plone/add-ons.rst:15
msgid "Some notable add-ons"
msgstr ""

#: ../mastering-plone/add-ons.rst:31
msgid "`collective.easyform <https://pypi.org/project/collective.easyform>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:18
msgid "A form generator and the successor to `Products.PloneFormGen <https://docs.plone.org/develop/plone/forms/ploneformgen.html>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:24
msgid "A simple form created with collective.easyform."
msgstr ""

#: ../mastering-plone/add-ons.rst:30
msgid "Editing a form field through the web."
msgstr ""

#: ../mastering-plone/add-ons.rst:34
msgid "`plone.app.mosaic <https://github.com/plone/plone.app.mosaic>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:34
msgid "Layout solution to easily create complex layouts through the web."
msgstr ""

#: ../mastering-plone/add-ons.rst:37
msgid "`collective.geo <http://collectivegeo.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:37
msgid "Flexible bundle of add-ons to geo-reference content and display in maps"
msgstr ""

#: ../mastering-plone/add-ons.rst:40
msgid "`collective.mailchimp <https://pypi.org/project/collective.mailchimp>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:40
msgid "Allows visitors to subscribe to mailchimp newsletters"
msgstr ""

#: ../mastering-plone/add-ons.rst:43
msgid "`eea.facetednavigation <https://pypi.org/project/eea.facetednavigation/>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:43
msgid "Create faceted navigation and searches through the web."
msgstr ""

#: ../mastering-plone/add-ons.rst:46
msgid "`collective.lineage <https://pypi.org/project/collective.lineage>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:46
msgid "Microsites for Plone - makes subfolders appear to be autonomous Plone sites"
msgstr ""

#: ../mastering-plone/add-ons.rst:49
msgid "`Products.Doormat <https://pypi.org/project/Products.Doormat>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:49
msgid "A flexible doormat"
msgstr ""

#: ../mastering-plone/add-ons.rst:52
msgid "`collective.behavior.banner <https://github.com/collective/collective.behavior.banner>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:52
msgid "Add decorative banners and sliders"
msgstr ""

#: ../mastering-plone/add-ons.rst:55
msgid "`Rapido <https://rapidoplone.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:55
msgid "Allows developers with a little knowledge of HTML and a little knowledge of Python to implement custom elements and insert them anywhere they want."
msgstr ""

#: ../mastering-plone/add-ons.rst:58
msgid "`Plomino <http://plomino.net/>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:58
msgid "Powerful and flexible web-based application builder for Plone"
msgstr ""

#: ../mastering-plone/add-ons.rst:61
msgid "`collective.disqus <https://pypi.org/project/collective.disqus/>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:61
msgid "Integrates the Disqus commenting platform API into Plone"
msgstr ""

#: ../mastering-plone/add-ons.rst:65
msgid "`collective.plonetruegallery <https://pypi.org/project/collective.plonetruegallery>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:64
msgid "Photo galleries with a huge selection of various js-libraries."
msgstr ""

#: ../mastering-plone/add-ons.rst:70
msgid "How to find add-ons"
msgstr ""

#: ../mastering-plone/add-ons.rst:72
msgid "It can be very hard to find the right addon for your requirements. Here are some tips:"
msgstr ""

#: ../mastering-plone/add-ons.rst:74
msgid "Make a list of required features. You'll almost never find an add-on that exactly ﬁts your needs."
msgstr ""

#: ../mastering-plone/add-ons.rst:75
msgid "Either adapt your requirements to what is available, invest the time & money to modify an existing addons to ﬁt your needs or create a new addon that does exactly what you need."
msgstr ""

#: ../mastering-plone/add-ons.rst:76
msgid "Then search using the following links below."
msgstr ""

#: ../mastering-plone/add-ons.rst:78
msgid "https://plone.org/download/add-ons"
msgstr ""

#: ../mastering-plone/add-ons.rst:79
msgid "https://pypi.org >3400 Plone related packages - use the search form!"
msgstr ""

#: ../mastering-plone/add-ons.rst:80
msgid "https://github.com/collective >1500 repos"
msgstr ""

#: ../mastering-plone/add-ons.rst:81
msgid "https://github.com/plone >310 repos"
msgstr ""

#: ../mastering-plone/add-ons.rst:82
msgid "google (e.g. `Plone+Slider <http://lmgtfy.com/?q=plone+slider>`_)"
msgstr ""

#: ../mastering-plone/add-ons.rst:84
msgid "Once you have a shortlist test these addons. Here are the main issues you need to test before you install a addon on a production site:"
msgstr ""

#: ../mastering-plone/add-ons.rst:86
msgid "Test all required features. Read but do not trust the documentation"
msgstr ""

#: ../mastering-plone/add-ons.rst:87
msgid "Check if the addon runs on your required version and is currently maintained"
msgstr ""

#: ../mastering-plone/add-ons.rst:88
msgid "Does it have i18n-support, i.e. is the user-interface translated to your language?"
msgstr ""

#: ../mastering-plone/add-ons.rst:89
msgid "Does it uninstall cleanly? A tough one. See http://blog.keul.it/2013/05/how-to-make-your-plone-add-on-products.html for the reason why."
msgstr ""

#: ../mastering-plone/add-ons.rst:90
msgid "Check for unwanted dependencies"
msgstr ""

#: ../mastering-plone/add-ons.rst:92
msgid "Once you found an addon you like you should ask the community if you made a good choice or if you missed something:"
msgstr ""

#: ../mastering-plone/add-ons.rst:94
msgid "Message Board: https://community.plone.org"
msgstr ""

#: ../mastering-plone/add-ons.rst:95
msgid "Chat: https://plone.org/support/chat"
msgstr ""

#: ../mastering-plone/add-ons.rst:97
msgid "There is also a talk that discusses in depth how to find the right addon: https://www.youtube.com/watch?v=Sc6NkqaSjqw"
msgstr ""

#: ../mastering-plone/add-ons.rst:102
msgid "Installing Add-ons"
msgstr ""

#: ../mastering-plone/add-ons.rst:104
msgid "Installation is a two-step process."
msgstr ""

#: ../mastering-plone/add-ons.rst:107
msgid "Making the add-on packages available to Zope"
msgstr ""

#: ../mastering-plone/add-ons.rst:109
msgid "First, we must make the add-on packages available to Zope. This means that Zope can import the code. Buildout is responsible for this."
msgstr ""

#: ../mastering-plone/add-ons.rst:111
msgid "Look at the :file:`buildout.cfg` file in :file:`/vagrant/buildout`."
msgstr ""

#: ../mastering-plone/add-ons.rst:115
msgid "If you're using our Vagrant kit, the Plone configuration is available in a folder that is shared between the host and guest operating systems. Look in your Vagrant install directory for the :file:`buildout` folder. You may edit configuration files using your favorite text editor in the host operating system, then switch into your virtual machine to run buildout on the guest operating system."
msgstr ""

#: ../mastering-plone/add-ons.rst:119
msgid "In the section ``[instance]`` there is a variable called ``eggs``, which has a list of *eggs* as a value. For example::"
msgstr ""

#: ../mastering-plone/add-ons.rst:126
msgid "You add an egg by adding a new line containing the package name to the configuration. You must write the egg name indented: this way, buildout understands that the current line is part of the last variable and not a new variable."
msgstr ""

#: ../mastering-plone/add-ons.rst:129
msgid "If you add new add-ons here you will have to run buildout and restart the site:"
msgstr ""

#: ../mastering-plone/add-ons.rst:136
msgid "Now the code is available from within Plone."
msgstr ""

#: ../mastering-plone/add-ons.rst:139
msgid "Installing add-ons in your Plone Site"
msgstr ""

#: ../mastering-plone/add-ons.rst:141
msgid "Your Plone site has not yet been told to use the add-on. For this, you have to activate the add-on in your Plone Site."
msgstr ""

#: ../mastering-plone/add-ons.rst:145
msgid "Why the extra step of activating the add-on package? You may have multiple Plone sites in a single Zope installation. It's common to want to activate some add-ons in one site, others in another."
msgstr ""

#: ../mastering-plone/add-ons.rst:147
msgid "In your browser, go to Site Setup (shortcut: add ``/@@overview-controlpanel`` to the Plone site URL), and open the ``Add-ons`` Panel. You will see that you can install the add-ons there."
msgstr ""

#: ../mastering-plone/add-ons.rst:149
msgid "Install EasyForm (the human-readable name of :py:mod:`collective.easyform`) now."
msgstr ""

#: ../mastering-plone/add-ons.rst:151
msgid "This is what happens: The GenericSetup profile of the product gets loaded. This does things like:"
msgstr ""

#: ../mastering-plone/add-ons.rst:153
msgid "Configuring new actions"
msgstr ""

#: ../mastering-plone/add-ons.rst:154
msgid "Registering new content types"
msgstr ""

#: ../mastering-plone/add-ons.rst:155
msgid "Registering css and js files"
msgstr ""

#: ../mastering-plone/add-ons.rst:156
msgid "Creating some content/configuration objects in your Plone site."
msgstr ""

#: ../mastering-plone/add-ons.rst:158
msgid "Let's have a look at what we just installed."
msgstr ""

#: ../mastering-plone/add-ons.rst:164
msgid "collective.easyform"
msgstr ""

#: ../mastering-plone/add-ons.rst:166
msgid "There are many ways to create forms in Plone:"
msgstr ""

#: ../mastering-plone/add-ons.rst:168
msgid "Pure: html and python in a BrowserView"
msgstr ""

#: ../mastering-plone/add-ons.rst:169
msgid "Framework: :py:mod:`z3c.form`"
msgstr ""

#: ../mastering-plone/add-ons.rst:170
msgid "TTW: :py:mod:`Products.PloneFormGen` and :py:mod:`collective.easyform`"
msgstr ""

#: ../mastering-plone/add-ons.rst:172
msgid "The concept of :py:mod:`collective.easyform` is that you add a form, to which you add form fields as schema-fields exactly like the dexterity schema-editor. Fields are added, deleted, edited and moved just as with any other type of content. Form submissions may be automatically emailed and/or saved for download."
msgstr ""

#: ../mastering-plone/add-ons.rst:174
msgid "Let's build a registration form:"
msgstr ""

#: ../mastering-plone/add-ons.rst:176
msgid "Add an object of the new type 'EasyForm' in the site root. Call it \"Registration\""
msgstr ""

#: ../mastering-plone/add-ons.rst:177
msgid "Save and view the result, a simple contact form that we may customize"
msgstr ""

#: ../mastering-plone/add-ons.rst:178
msgid "In the `Actions` Menu click on \"Define form fields\""
msgstr ""

#: ../mastering-plone/add-ons.rst:179
msgid "Remove field \"comments\""
msgstr ""

#: ../mastering-plone/add-ons.rst:180
msgid "Add fields for food preference (a choice field) and shirt size (also choice)"
msgstr ""

#: ../mastering-plone/add-ons.rst:181
msgid "In the `Actions` Menu click on \"Define form actions\""
msgstr ""

#: ../mastering-plone/add-ons.rst:182
msgid "Add a new action and select \"Save Data\" as the type. This stores all entered data."
msgstr ""

#: ../mastering-plone/add-ons.rst:183
msgid "Customize the mailer"
msgstr ""

#: ../mastering-plone/add-ons.rst:187
msgid "Need CAPTCHAs? Read the `instructions how to add Recapcha-field to easyform <https://github.com/collective/collective.easyform#recaptcha-support>`_"
msgstr ""

#: ../mastering-plone/add-ons.rst:193
msgid "Add Photo Gallery with :py:mod:`collective.plonetruegallery`"
msgstr ""

#: ../mastering-plone/add-ons.rst:195
msgid "To advertise the conference we want to show some photos showing past conferences and the city where the conference is taking place."
msgstr ""

#: ../mastering-plone/add-ons.rst:197
msgid "Instead of creating new content types for galleries, it integrates with the Plone functionality to choose different views for folderish content types."
msgstr ""

#: ../mastering-plone/add-ons.rst:199
msgid "https://pypi.org/project/collective.plonetruegallery"
msgstr ""

#: ../mastering-plone/add-ons.rst:201
msgid "Activate the add-on"
msgstr ""

#: ../mastering-plone/add-ons.rst:202
msgid "Enable the behavior ``Plone True Gallery`` on the type ``Folder``: http://localhost:8080/Plone/dexterity-types/Folder/@@behaviors"
msgstr ""

#: ../mastering-plone/add-ons.rst:203
msgid "Add a folder ``/the-event/location``"
msgstr ""

#: ../mastering-plone/add-ons.rst:204
msgid "Upload some photos from lorempixel.com"
msgstr ""

#: ../mastering-plone/add-ons.rst:205
msgid "Enable the view ``galleryview``"
msgstr ""

#: ../mastering-plone/add-ons.rst:211
msgid "Internationalization"
msgstr ""

#: ../mastering-plone/add-ons.rst:213
msgid "Plone can run the same site in many different languages."
msgstr ""

#: ../mastering-plone/add-ons.rst:215
msgid "We're not doing this with the conference site since the *lingua franca* of the Plone community is English."
msgstr ""

#: ../mastering-plone/add-ons.rst:217
msgid "We would use the built-in addon https://pypi.org/project/plone.app.multilingual for this."
msgstr ""

#: ../mastering-plone/add-ons.rst:219
msgid "Building a multi-lingual site requires activating :py:mod:`plone.app.multilingual`, but no add-on is necessary to build a site in only one language. Just select a different site language when creating a Plone site, and all text in the user-interface will be switched to that language."
msgstr ""

#: ../mastering-plone/add-ons.rst:225
#: ../mastering-plone/configuring_customizing.rst:310
#: ../mastering-plone/dexterity_2.rst:640
#: ../mastering-plone/eggs1.rst:247
#: ../mastering-plone/events.rst:290
#: ../mastering-plone/export_code.rst:423
#: ../mastering-plone/views_3.rst:471
#: ../mastering-plone/zpt_2.rst:492
msgid "Summary"
msgstr ""

#: ../mastering-plone/add-ons.rst:227
msgid "You are now able to customize and extend many parts of our website. You can even install extensions that add new functionality."
msgstr ""

#: ../mastering-plone/add-ons.rst:229
msgid "But:"
msgstr ""

#: ../mastering-plone/add-ons.rst:231
msgid "Can we submit talks now?"
msgstr ""

#: ../mastering-plone/add-ons.rst:232
msgid "Can we create lists with the most important properties of each talk?"
msgstr ""

#: ../mastering-plone/add-ons.rst:233
msgid "Can we allow a jury to vote on talks?"
msgstr ""

#: ../mastering-plone/add-ons.rst:235
msgid "We often have to work with structured data. Up to a degree we can do all this TTW, but at some point we run into barriers. In the next part of the training, we'll teach you how to break through these barriers."
msgstr ""

#: ../mastering-plone/anatomy.rst:4
msgid "The Anatomy of Plone"
msgstr ""

#: ../mastering-plone/anatomy.rst:6
#: ../mastering-plone/api.rst:6
#: ../mastering-plone/behaviors_1.rst:14
#: ../mastering-plone/behaviors_2.rst:6
#: ../mastering-plone/buildout_1.rst:6
#: ../mastering-plone/dexterity.rst:6
#: ../mastering-plone/eggs1.rst:17
#: ../mastering-plone/eggs2.rst:8
#: ../mastering-plone/embed.rst:6
#: ../mastering-plone/export_code.rst:16
#: ../mastering-plone/extending.rst:6
#: ../mastering-plone/ide.rst:6
#: ../mastering-plone/registry.rst:15
#: ../mastering-plone/reusable.rst:6
#: ../mastering-plone/viewlets_1.rst:15
#: ../mastering-plone/viewlets_2.rst:12
#: ../mastering-plone/views_1.rst:15
#: ../mastering-plone/views_2.rst:14
#: ../mastering-plone/views_3.rst:14
#: ../mastering-plone/zpt.rst:15
#: ../mastering-plone/zpt_2.rst:14
msgid "In this part you will:"
msgstr ""

#: ../mastering-plone/anatomy.rst:8
msgid "Learn a bit about the history of Plone."
msgstr ""

#: ../mastering-plone/anatomy.rst:10
#: ../mastering-plone/api.rst:11
#: ../mastering-plone/behaviors_1.rst:18
#: ../mastering-plone/behaviors_2.rst:10
#: ../mastering-plone/buildout_1.rst:10
#: ../mastering-plone/dexterity.rst:11
#: ../mastering-plone/eggs1.rst:23
#: ../mastering-plone/eggs2.rst:12
#: ../mastering-plone/embed.rst:10
#: ../mastering-plone/export_code.rst:22
#: ../mastering-plone/extending.rst:10
#: ../mastering-plone/ide.rst:10
#: ../mastering-plone/registry.rst:21
#: ../mastering-plone/reusable.rst:10
#: ../mastering-plone/testing.rst:19
#: ../mastering-plone/viewlets_1.rst:19
#: ../mastering-plone/viewlets_2.rst:18
#: ../mastering-plone/views_1.rst:21
#: ../mastering-plone/views_2.rst:20
#: ../mastering-plone/views_3.rst:20
#: ../mastering-plone/zpt.rst:20
#: ../mastering-plone/zpt_2.rst:18
msgid "Topics covered:"
msgstr ""

#: ../mastering-plone/anatomy.rst:12
msgid "CMF"
msgstr ""

#: ../mastering-plone/anatomy.rst:13
msgid "Zope"
msgstr ""

#: ../mastering-plone/anatomy.rst:14
#: ../mastering-plone/anatomy.rst:162
msgid "Pyramid"
msgstr ""

#: ../mastering-plone/anatomy.rst:15
msgid "Bluebream"
msgstr ""

#: ../mastering-plone/anatomy.rst:18
msgid "Python, Zope, CMF, Plone ... -- how does all that fit together?"
msgstr ""

#: ../mastering-plone/anatomy.rst:24
msgid "Zope2"
msgstr ""

#: ../mastering-plone/anatomy.rst:26
msgid "Zope is a web application framework that Plone runs on top of."
msgstr ""

#: ../mastering-plone/anatomy.rst:27
msgid "The majority of Zope's code is written in Python, like everything else written on top of it."
msgstr ""

#: ../mastering-plone/anatomy.rst:28
msgid "It serves applications that communicate with users via http."
msgstr ""

#: ../mastering-plone/anatomy.rst:32
msgid "Before Zope, there usually was an Apache server that would call a script and give the request as an input. The script would then just print HTML to the standard output. Apache returned that to the user. Opening database connections, checking permission constraints, generating valid HTML, configuring caching, interpreting form data and everything else: you have to do it on your own."
msgstr ""

#: ../mastering-plone/anatomy.rst:38
msgid "When the second request comes in, you have to do everything again."
msgstr ""

#: ../mastering-plone/anatomy.rst:40
msgid "Jim Fulton thought that this was slightly tedious. So he wrote code to handle requests. He believed that site content is object-oriented and that the URL should somehow point directly into the object hierarchy, so he wrote an object-oriented database, called `ZODB <http://www.zodb.org/en/latest/>`_."
msgstr ""

#: ../mastering-plone/anatomy.rst:45
msgid "The ZODB is a fully `ACID <https://en.wikipedia.org/wiki/ACID>`_ compliant database with automatic transactional integrity. It automatically maps traversal in the object hierarchy to URL paths, there is no need to \"wire\" objects or database nodes to URLs."
msgstr ""

#: ../mastering-plone/anatomy.rst:48
msgid "This gives Plone its easy SEO-friendly URLs."
msgstr ""

#: ../mastering-plone/anatomy.rst:50
msgid "Traversal through the object database is security checked at every point via very fine grained access-control lists."
msgstr ""

#: ../mastering-plone/anatomy.rst:52
msgid "One missing piece is important and complicated: ``Acquisition``."
msgstr ""

#: ../mastering-plone/anatomy.rst:54
msgid "Acquisition is a kind of magic. Imagine a programming system where you do not access the file system and where you do not need to import code. You work with objects. An object can be a folder that contains more objects, an HTML page, data, or another script."
msgstr ""

#: ../mastering-plone/anatomy.rst:58
msgid "To access an object, you need to know where the object is. Objects are found by paths that look like URLs, but without the domain name. Now Acquisition allows you to write an incomplete path."
msgstr ""

#: ../mastering-plone/anatomy.rst:62
msgid "An incomplete path is a relative path, it does not explicitly state that the path starts from the root, it starts relative to where the content object is -- its context."
msgstr ""

#: ../mastering-plone/anatomy.rst:65
msgid "If Zope cannot resolve the path to an object relative to your code, it tries the same path in the containing folder. And then the folder containing the folder."
msgstr ""

#: ../mastering-plone/anatomy.rst:68
msgid "This might sound weird, what do I gain with this?"
msgstr ""

#: ../mastering-plone/anatomy.rst:70
msgid "You can have different data or code depending on your :py:obj:`context`. Imagine you want to have header images differing for each section of your page, sometimes even differing for a specific subsection of your site."
msgstr ""

#: ../mastering-plone/anatomy.rst:73
msgid "You define a path ``header_image`` and put a header image at the root of your site. If you want a folder with a different header image, you put the header image into this folder."
msgstr ""

#: ../mastering-plone/anatomy.rst:76
msgid "Please take a minute to let this settle and think about what this allows you to do."
msgstr ""

#: ../mastering-plone/anatomy.rst:78
msgid "contact forms with different e-mail addresses per section"
msgstr ""

#: ../mastering-plone/anatomy.rst:79
msgid "different CSS styles for different parts of your site"
msgstr ""

#: ../mastering-plone/anatomy.rst:80
msgid "One site, multiple customers, everything looks different for each customer."
msgstr ""

#: ../mastering-plone/anatomy.rst:82
msgid "As with all programming magic, acquisition exacts a price. Zope code must be written carefully in order to avoid inheriting side effects via acquisition."
msgstr ""

#: ../mastering-plone/anatomy.rst:85
msgid "The Zope community expresses this with the Python (Monty) maxim: Beware the `Spammish Acquisition`."
msgstr ""

#: ../mastering-plone/anatomy.rst:87
msgid "Basically this is Zope."
msgstr ""

#: ../mastering-plone/anatomy.rst:91
msgid "http://www.zope.org/en/latest/world.html"
msgstr ""

#: ../mastering-plone/anatomy.rst:92
msgid "https://zope.readthedocs.io/en/latest/zope2book/"
msgstr ""

#: ../mastering-plone/anatomy.rst:98
msgid "Content Management Framework"
msgstr ""

#: ../mastering-plone/anatomy.rst:100
msgid "`CMF (Content Management Framework) <http://old.zope.org/Products/CMF/index.html/>`_ is add-on for Zope to build Content Management Systems (like Plone)."
msgstr ""

#: ../mastering-plone/anatomy.rst:105
msgid "After many websites were successfully created using Zope, a number of recurring requirements emerged, and some Zope developers started to write CMF, the Content Management Framework."
msgstr ""

#: ../mastering-plone/anatomy.rst:108
msgid "The CMF offers many services that help you to write a CMS based on Zope. Most objects you see in the ZMI are part of the CMF somehow."
msgstr ""

#: ../mastering-plone/anatomy.rst:111
msgid "The developers behind CMF do not see CMF as a ready to use CMS. They created a CMS Site which was usable out of the box, but made it deliberately ugly, because you have to customize it anyway."
msgstr ""

#: ../mastering-plone/anatomy.rst:114
msgid "We are still in prehistoric times here. There were no eggs (Python packages), Zope did not consist of 100 independent software components but was one big file set."
msgstr ""

#: ../mastering-plone/anatomy.rst:117
msgid "Many parts of Plone are derived from the CMF, but it's a mixed heritage. The CMF is an independent software project, and has often moved more slowly than Plone."
msgstr ""

#: ../mastering-plone/anatomy.rst:120
msgid "Plone is gradually eliminating dependence on most parts of the CMF."
msgstr ""

#: ../mastering-plone/anatomy.rst:125
msgid "Zope Toolkit / Zope3"
msgstr ""

#: ../mastering-plone/anatomy.rst:127
msgid "Zope 3 was originally intended as a rewrite of Zope from the ground up."
msgstr ""

#: ../mastering-plone/anatomy.rst:128
msgid "Plone uses parts of it provided by the `Zope Toolkit (ZTK) <https://zopetoolkit.readthedocs.io/en/latest/>`_."
msgstr ""

#: ../mastering-plone/anatomy.rst:132
msgid "Unfortunately, only few people started to use Zope 3, nobody migrated to Zope 3 because nobody knew how."
msgstr ""

#: ../mastering-plone/anatomy.rst:134
msgid "But there were many useful things in Zope 3 that people wanted to use in Zope 2, thus the Zope community adapted some parts so that they could use them in Zope 2."
msgstr ""

#: ../mastering-plone/anatomy.rst:137
msgid "Sometimes, a wrapper of some sort was necessary, these usually are being provided by packages from the :py:mod:`five` namespace.  (Zope 2 + Zope 3 = \"five\")"
msgstr ""

#: ../mastering-plone/anatomy.rst:140
msgid "To make the history complete, since people stayed on Zope 2, the Zope community renamed Zope 3 to Bluebream, so that people would not think that Zope 3 was the future."
msgstr ""

#: ../mastering-plone/anatomy.rst:143
msgid "It wasn't anymore."
msgstr ""

#: ../mastering-plone/anatomy.rst:149
msgid "Zope Component Architecture (ZCA)"
msgstr ""

#: ../mastering-plone/anatomy.rst:151
msgid "The `Zope Component Architecture <https://zopecomponent.readthedocs.io/en/latest/>`_, which was developed as part of Zope 3, is a system which allows for component pluggability and complex dispatching based on objects which implement an interface (a description of a functionality)."
msgstr ""

#: ../mastering-plone/anatomy.rst:155
msgid "It is a subset of the ZTK but can be used standalone. Plone makes extensive use of the ZCA in its codebase."
msgstr ""

#: ../mastering-plone/anatomy.rst:164
msgid "`Pyramid <https://trypyramid.com>`_ is a Python web application development framework that is often seen as the successor to Zope."
msgstr ""

#: ../mastering-plone/anatomy.rst:165
msgid "It does less than Zope, is very pluggable and `uses the Zope Component Architecture <https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/zca.html>`_ \"under the hood\" to perform view dispatching and other application configuration tasks."
msgstr ""

#: ../mastering-plone/anatomy.rst:169
msgid "You can use it with a relational Database instead of ZODB if you want, or you can use both databases or none of them."
msgstr ""

#: ../mastering-plone/anatomy.rst:171
msgid "Apart from the fact that Pyramid was not forced to support all legacy functionality, which can make things more complicated, the original developer had a very different stance on how software must be developed. While both Zope and Pyramid have good test coverage, Pyramid has good documentation; something that was very neglected in Zope, and at times in Plone too."
msgstr ""

#: ../mastering-plone/anatomy.rst:176
msgid "Whether the component architecture is better in Pyramid or not we don't dare say, but we like it more. But maybe it's just because it was documented."
msgstr ""

#: ../mastering-plone/anatomy.rst:181
msgid "https://docs.pylonsproject.org/projects/pyramid/en/latest/index.html"
msgstr ""

#: ../mastering-plone/anatomy.rst:184
#: ../mastering-plone/dexterity_2.rst:337
#: ../mastering-plone/restapi.rst:62
#: ../mastering-plone/restapi.rst:489
#: ../mastering-plone/views_2.rst:347
#: ../mastering-plone/views_3.rst:388
msgid "Exercise"
msgstr ""

#: ../mastering-plone/anatomy.rst:186
msgid "Definition of the PYTHON_PATH makes up most of the `bin/instance` script's code. Look at the package list (and maybe also the links provided in the respective sections of this chapter). Try to identify 3 packages that belong to the original Zope2, 3 packages from CMF, 3 Zope Toolkit packages and 3 packages from the ZCA."
msgstr ""

#: ../mastering-plone/anatomy.rst:193
msgid "Zope2: Zope2, ZODB, Acquisition, AccessControl, ..."
msgstr ""

#: ../mastering-plone/anatomy.rst:194
msgid "CMF: Products.CMFCore, Products.CMFUid, Products.CMFEditions, ... Products.DCWorkflow doesn't fit the pattern but is a very important part of the CMF"
msgstr ""

#: ../mastering-plone/anatomy.rst:195
msgid "ZTK: zope.browser, zope.container, zope.pagetemplate, ... You can find a complete list `here <https://dist.plone.org/versions/zopetoolkit-1-0-8-zopeapp-versions.cfg>`_"
msgstr ""

#: ../mastering-plone/anatomy.rst:196
msgid "ZCA: zope.component, zope.interface, zope.event"
msgstr ""

#: ../mastering-plone/api.rst:4
msgid "Programming Plone"
msgstr ""

#: ../mastering-plone/api.rst:8
msgid "Learn about the right ways to do something in code in Plone."
msgstr ""

#: ../mastering-plone/api.rst:9
msgid "Learn to debug"
msgstr ""

#: ../mastering-plone/api.rst:13
#: ../mastering-plone/api.rst:82
msgid "Debugging"
msgstr ""

#: ../mastering-plone/api.rst:14
msgid "Plone API"
msgstr ""

#: ../mastering-plone/api.rst:15
msgid "Portal tools"
msgstr ""

#: ../mastering-plone/api.rst:21
#: ../mastering-plone/views_3.rst:23
msgid "plone.api"
msgstr ""

#: ../mastering-plone/api.rst:23
msgid "The most important tool nowadays for plone developers is the add-on `plone.api <https://docs.plone.org/develop/plone.api/docs/index.html>`_ that covers 20% of the tasks any Plone developer does 80% of the time. If you are not sure how to handle a certain task be sure to first check if plone.api has a solution for you."
msgstr ""

#: ../mastering-plone/api.rst:25
msgid "The API is divided in five sections. Here is one example from each:"
msgstr ""

#: ../mastering-plone/api.rst:27
msgid "`Content:` `Create content <https://docs.plone.org/develop/plone.api/docs/content.html#create-content>`_"
msgstr ""

#: ../mastering-plone/api.rst:28
msgid "`Portal:` `Send E-Mail <https://docs.plone.org/develop/plone.api/docs/portal.html#send-e-mail>`_"
msgstr ""

#: ../mastering-plone/api.rst:29
msgid "`Groups:` `Grant roles to group <https://docs.plone.org/develop/plone.api/docs/group.html#grant-roles-to-group>`_"
msgstr ""

#: ../mastering-plone/api.rst:30
msgid "`Users:` `Get user roles <https://docs.plone.org/develop/plone.api/docs/user.html#get-user-roles>`_"
msgstr ""

#: ../mastering-plone/api.rst:31
msgid "`Environment:` `Switch roles inside a block <https://docs.plone.org/develop/plone.api/docs/env.html#switch-roles-inside-a-block>`_"
msgstr ""

#: ../mastering-plone/api.rst:33
msgid ":py:mod:`plone.api` is a great tool for integrators and developers that is included when you install Plone, though for technical reasons it is not used by the code of Plone itself."
msgstr ""

#: ../mastering-plone/api.rst:35
msgid "In existing code you'll often encounter methods that don't mean anything to you. You'll have to use the source to find out  what they do."
msgstr ""

#: ../mastering-plone/api.rst:37
msgid "Some of these methods will be replaced by :py:mod:`plone.api` in the future:"
msgstr ""

#: ../mastering-plone/api.rst:39
msgid ":py:meth:`Products.CMFCore.utils.getToolByName` -> :py:meth:`api.portal.get_tool`"
msgstr ""

#: ../mastering-plone/api.rst:40
msgid ":py:meth:`zope.component.getMultiAdapter` -> :py:meth:`api.content.get_view`"
msgstr ""

#: ../mastering-plone/api.rst:46
msgid "portal-tools"
msgstr ""

#: ../mastering-plone/api.rst:48
msgid "Some parts of Plone are very complex modules in themselves (e.g. the versioning machinery of :py:mod:`Products.CMFEditions`). Most of them have an API of themselves that you will have to look up at when you need to implement a feature that is not covered by plone.api."
msgstr ""

#: ../mastering-plone/api.rst:51
msgid "Here are a few examples:"
msgstr ""

#: ../mastering-plone/api.rst:56
#: ../mastering-plone/views_3.rst:24
msgid "portal_catalog"
msgstr ""

#: ../mastering-plone/api.rst:54
msgid ":py:meth:`unrestrictedSearchResults()` returns search results without checking if the current user has the permission to access the objects."
msgstr ""

#: ../mastering-plone/api.rst:56
msgid ":py:meth:`uniqueValuesFor()` returns all entries in an index"
msgstr ""

#: ../mastering-plone/api.rst:59
msgid "portal_setup"
msgstr ""

#: ../mastering-plone/api.rst:59
msgid ":py:meth:`runAllExportSteps()` generates a tarball containing artifacts from all export steps."
msgstr ""

#: ../mastering-plone/api.rst:62
msgid "portal_quickinstaller"
msgstr ""

#: ../mastering-plone/api.rst:62
msgid ":py:meth:`isProductInstalled()` checks if a product is installed."
msgstr ""

#: ../mastering-plone/api.rst:64
msgid "Usually the best way to learn about the API of a tool is to look in the :file:`interfaces.py` in the respective package and read the docstrings. But sometimes the only way to figure out which features a tool offers is to read its code."
msgstr ""

#: ../mastering-plone/api.rst:66
msgid "To use a tool you usually first get the tool with :py:mod:`plone.api` and then invoke the method."
msgstr ""

#: ../mastering-plone/api.rst:68
msgid "Here is an example where we get the tool `portal_membership` and use one of its methods to logout a user:"
msgstr ""

#: ../mastering-plone/api.rst:77
msgid "The code for :py:meth:`logoutUser()` is in :py:meth:`Products.PlonePAS.tools.membership.MembershipTool.logoutUser`. Many tools that are used in Plone are actually subclasses of tools from the package :py:mod:`Products.CMFCore`. For example `portal_membership` is subclassing and extending the same tool from :py:class:`Products.CMFCore.MembershipTool.MembershipTool`. That can make it hard to know which options a tool has. There is a ongoing effort by the Plone Community to consolidate tools to make it easier to work with them as a developer."
msgstr ""

#: ../mastering-plone/api.rst:84
msgid "Here are some tools and techniques we often use when developing and debugging. We use some of them in various situations during the training."
msgstr ""

#: ../mastering-plone/api.rst:87
msgid "tracebacks and the log"
msgstr ""

#: ../mastering-plone/api.rst:87
msgid "The log (and the console when running in foreground) collects all log messages Plone prints. When an exception occurs Plone throws a traceback. Most of the time the traceback is everything you need to find out what is going wrong. Also adding your own information to the log is very simple."
msgstr ""

#: ../mastering-plone/api.rst:92
msgid "pdb"
msgstr ""

#: ../mastering-plone/api.rst:90
msgid "The python debugger pdb is the single most important tool for us when programming. Just add ``import pdb; pdb.set_trace()`` in your code and debug away!"
msgstr ""

#: ../mastering-plone/api.rst:92
msgid "Since Plone 5 you can even add it to templates: add ``<?python import pdb; pdb.set_trace() ?>`` to a template and you end up in a pdb shell on calling the template. Look at the variable :py:obj:`econtext` to see what might have gone wrong."
msgstr ""

#: ../mastering-plone/api.rst:95
msgid "pdbpp"
msgstr ""

#: ../mastering-plone/api.rst:95
msgid "A great drop-in replacement for pdb with tab completion, syntax highlighting, better tracebacks,  introspection and more. And the best feature ever: The command :command:`ll` prints the whole current method."
msgstr ""

#: ../mastering-plone/api.rst:98
msgid "ipdb"
msgstr ""

#: ../mastering-plone/api.rst:98
msgid "Another enhanced pdb with the power of IPython, e.g. tab completion, syntax highlighting, better tracebacks and introspection. It also works nicely with :py:mod:`Products.PDBDebugMode`. Needs to be invoked with ``import ipdb; ipdb.set_trace()``."
msgstr ""

#: ../mastering-plone/api.rst:105
msgid "Products.PDBDebugMode"
msgstr ""

#: ../mastering-plone/api.rst:101
msgid "An add-on that has two killer features."
msgstr ""

#: ../mastering-plone/api.rst:103
msgid "**Post-mortem debugging**: throws you in a pdb whenever an exception occurs. This way you can find out what is going wrong."
msgstr ""

#: ../mastering-plone/api.rst:105
msgid "**pdb view**: simply adding ``/pdb`` to a url drops you in a pdb session with the current context as :py:obj:`self.context`. From there you can do just about anything."
msgstr ""

#: ../mastering-plone/api.rst:108
msgid "Debug mode"
msgstr ""

#: ../mastering-plone/api.rst:108
msgid "When starting Plone using :command:`./bin/instance debug` you'll end up in an interactive debugger."
msgstr ""

#: ../mastering-plone/api.rst:111
msgid "plone.app.debugtoolbar"
msgstr ""

#: ../mastering-plone/api.rst:111
msgid "An add-on that allows you to inspect nearly everything. It even has an interactive console, a tester for TALES-expressions and includs a reload-feature like :py:mod:`plone.reload`."
msgstr ""

#: ../mastering-plone/api.rst:114
msgid "plone.reload"
msgstr ""

#: ../mastering-plone/api.rst:114
msgid "An add-on that allows to reload code that you changed without restarting the site. It is also used by :py:mod:`plone.app.debugtoolbar`."
msgstr ""

#: ../mastering-plone/api.rst:117
msgid "Products.PrintingMailHost"
msgstr ""

#: ../mastering-plone/api.rst:117
msgid "An add-on that prevents Plone from sending mails. Instead, they are logged."
msgstr ""

#: ../mastering-plone/api.rst:120
msgid "Products.enablesettrace or Products.Ienablesettrace"
msgstr ""

#: ../mastering-plone/api.rst:120
msgid "Add-on that allows to use pdb and ipdb in Python skin scripts. Very useful when debugging terrible legacy code."
msgstr ""

#: ../mastering-plone/api.rst:123
msgid "``verbose-security = on``"
msgstr ""

#: ../mastering-plone/api.rst:123
msgid "An option for the recipe :py:mod:`plone.recipe.zope2instance` that logs the detailed reasons why a user might not be authorized to see something."
msgstr ""

#: ../mastering-plone/api.rst:126
msgid ":command:`./bin/buildout annotate`"
msgstr ""

#: ../mastering-plone/api.rst:126
msgid "An option when running buildout that logs all the pulled packages and versions."
msgstr ""

#: ../mastering-plone/api.rst:130
msgid "Sentry"
msgstr ""

#: ../mastering-plone/api.rst:129
msgid "`Sentry <https://github.com/getsentry/sentry>`_ is an error logging application you can host yourself. It aggregates tracebacks from many sources and (here comes the killer feature) even the values of variables in the traceback. We use it in all our production sites."
msgstr ""

#: ../mastering-plone/api.rst:138
msgid "zopepy"
msgstr ""

#: ../mastering-plone/api.rst:133
msgid "Buildout can create a python shell for you that has all the packages from your Plone site in its python path. Add the part like this::"
msgstr ""

#: ../mastering-plone/api.rst:142
msgid "A video of the talk `Debug like a pro. How to become a better programmer through pdb-driven development <http://pyvideo.org/pycon-de-2016/debug-like-a-pro-how-to-become-a-better-programmer-through-pdb-driven-development.html>`_"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:4
#: ../mastering-plone/behaviors_1.rst:20
msgid "Behaviors"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:8
#: ../mastering-plone/dexterity_2.rst:8
#: ../mastering-plone/dexterity_3.rst:8
#: ../mastering-plone/eggs1.rst:8
#: ../mastering-plone/events.rst:8
#: ../mastering-plone/export_code.rst:9
#: ../mastering-plone/frontpage.rst:8
#: ../mastering-plone/registry.rst:8
#: ../mastering-plone/resources.rst:9
#: ../mastering-plone/restapi.rst:6
#: ../mastering-plone/testing.rst:8
#: ../mastering-plone/user_generated_content.rst:8
#: ../mastering-plone/viewlets_1.rst:8
#: ../mastering-plone/views_1.rst:8
#: ../mastering-plone/views_2.rst:8
#: ../mastering-plone/views_3.rst:8
#: ../mastering-plone/zpt.rst:8
#: ../mastering-plone/zpt_2.rst:8
msgid "Get the code for this chapter (:doc:`More info <code>`):"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:16
msgid "Add another field to talks by using a behavior"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:25
msgid "You can extend the functionality of your dexterity object by writing an adapter that adapts your dexterity object to add another feature or aspect."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:27
msgid "But if you want to use this adapter, you must somehow know that an object implements that. Also, adding more fields to an object would not be easy with such an approach."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:32
msgid "Dexterity Approach"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:36
msgid "Dexterity has a solution for it, with special adapters that are called and registered by the name behavior."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:38
msgid "A behavior can be added to any content type through the web and at runtime."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:40
msgid "All default views (e.g. the add- and edit-forms) know about the concept of behaviors and when rendering forms, the views also check whether there are behaviors referenced with the current context and if these behaviors have a schema of their own, these fields get shown in addition."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:45
msgid "Names and Theory"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:49
msgid "The name behavior is not a standard term in software development. But it is a good idea to think of a behavior as an aspect. You are adding an aspect to your content type and you want to write your aspect in such a way that it works independently of the content type on which the aspect is applied. You should not have dependencies to specific fields of your object or to other behaviors."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:51
msgid "Such an object allows you to apply the `Open/closed principle`_ to your dexterity objects."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:55
msgid "`Open/closed principle`_"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:62
msgid "Practical example"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:66
msgid "So, let us write our own small behavior."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:68
msgid "In the future, we want our presentation to be represented in Lanyrd (a Social Conference Directory - Lanyrd.com) too. For now we will just provide a link so that visitors can collaborate easily with the Lanyrd site."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:70
msgid "So for now, our behavior just adds a new field for storing the url to Lanyrd."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:72
msgid "We want to keep a clean structure, so we create a :file:`behaviors` directory first, and include it into the zcml declarations of our :file:`configure.zcml`."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:78
msgid "Then, we add an empty :file:`behaviors/__init__.py` and a :file:`behaviors/configure.zcml` containing"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:84
msgid "It can be a bit confusing when to use factories or marker interfaces and when not to."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:86
msgid "If you do not define a factory, your attributes will be stored directly on the object. This can result in clashes with other behaviors."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:88
msgid "You can avoid this by using the :py:class:`plone.behavior.AnnotationStorage` factory. This stores your attributes in an `Annotation <https://docs.plone.org/develop/plone/misc/annotations.html>`_. But then you *must* use a marker interface if you want to have custom viewlets, browser views or portlets."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:92
msgid "Without it, you would have no interface against which you could register your views."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:113
msgid "And a :file:`behaviors/social.py` containing:"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:146
msgid "Let's go through this step by step."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:148
msgid "We register a behavior in :ref:`behaviors/configure.zcml <social-behavior-zcml-label>`. We do not say for which content type this behavior is valid. You do this through the web or in the GenericSetup profile."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:149
msgid "We create a marker interface in :ref:`behaviors/social.py <social-behavior-python-label>` for our behavior and make it also a schema containing the fields we want to declare. We could just define schema fields on a zope.interface class, but we use an extended form from `plone.supermodel`_, else we could not use the fieldset features."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:151
msgid "We also add a `fieldset`_ so that our fields are not mixed with the normal fields of the object."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:152
msgid "We add a normal `URI`_ schema field to store the URI to lanyrd."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:153
msgid "We mark our schema as a class that also implements the `IFormFieldProvider`_ interface. This is a marker interface, we do not need to implement anything to provide the interface."
msgstr ""

#: ../mastering-plone/behaviors_1.rst:158
msgid "Adding it to our talk"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:162
msgid "We could add this behavior now via the plone control panel. But instead, we will do it directly and properly in our GenericSetup profile"
msgstr ""

#: ../mastering-plone/behaviors_1.rst:164
msgid "We must add the behavior to :file:`profiles/default/types/talk.xml`:"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:4
msgid "More Complex Behaviors"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:8
msgid "Write an annotation"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:12
msgid "Annotation Marker Interfaces"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:17
msgid "Using Annotations"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:20
msgid "We are going to store the information in an annotation. Not because it is needed but because you will find code that uses annotations and need to understand the implications."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:22
msgid "`Annotations`_ in Zope/Plone mean that data won't be stored directly on an object but in an indirect way and with namespaces so that multiple packages can store information under the same attribute, without colliding."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:24
msgid "So using annotations avoids namespace conflicts. The cost is an indirection. The dictionary is persistent so it has to be stored separately. Also, one could give attributes a name containing a namespace prefix to avoid naming collisions."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:28
msgid "What are annotations"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:29
msgid "When to use them"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:36
msgid "Using Schema"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:40
msgid "The attribute where we store our data will be declared as a schema field. We mark the field as an omitted field (using schema directive similar to ``read_permission`` or ``widget``), because we are not going to create :py:mod:`z3c.form` widgets for entering or displaying them. We do provide a schema, because many other packages use the schema information to get knowledge of the relevant fields."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:42
msgid "For example, when files were migrated to blobs, new objects had to be created and every schema field was copied. The code can't know about our field, except if we provide schema information."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:46
msgid "Why to use schemas always"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:51
msgid "Writing Code"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:53
msgid "To start, we create a directory :file:`behavior` with an empty :file:`behavior/__init__.py` file."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:55
msgid "Next we must, as always, register our ZCML."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:57
msgid "First, add the information that there will be another ZCML file in :file:`configure.zcml`"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:71
msgid "Next, create :file:`behavior/configure.zcml`"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:90
msgid "There are some important differences to our first behavior:"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:92
msgid "There is a marker interface"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:93
msgid "There is a factory"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:97
msgid "The factory is a class that provides the behavior logic and gives access to the attributes we provide. Factories in Plone/Zope land are retrieved by adapting an object to an interface. If you want your behavior, you would write :samp:`IVoting(object)`"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:101
msgid "But in order for this to work, your object may *not* be implementing the IVoting interface, because if it did, :samp:`IVoting(object)` would return the object itself! If I need a marker interface for objects providing my behavior, I must provide one, for this we use the marker attribute. My object implements :samp:`IVotable` and because of this, we can write views and viewlets just for this content type."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:104
msgid "The interfaces need to be written, in our case into a file :file:`interfaces.py`:"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:180
msgid "This is a lot of code. The IVotableLayer we will need later for viewlets and browser views. Let's add it right here. The IVotable interface is the simple marker interface. It will only be used to bind browser views and viewlets to contenttypes that provide our behavior, so no code needed."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:183
msgid "The IVoting class is more complex, as you can see. While IVoting is just an interface, we use :samp:`plone.supermodel.model.Schema` for advanced dexterity features. Zope.schema provides no means for hiding fields. The directives :samp:`form.omitted` from :samp:`plone.autoform` allow us to annotate this additional information so that the autoform renderers for forms can use the additional information."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:186
msgid "We make this omit conditional. If we run Plone in debug mode, we will be able to see the internal data in the edit form."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:188
msgid "We create minimal schema fields for our internal data structures. For a small test, I removed the form omitted directives and opened the edit view of a talk that uses the behavior. After seeing the ugliness, I decided that I should provide at least  minimum of information. Titles and required are purely optional, but very helpful if the fields won't be omitted, something that can be helpful when debugging the behavior. Later, when we implement the behavior, the :samp:`votes` and :samp:`voted` attributes are implemented in such a way that you can't just modify these fields, they are read only."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:191
msgid "Then we define the API that we are going to use in browser views and viewlets."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:193
msgid "The last line ensures that the schema fields are known to other packages. Whenever some code wants all schemas from an object, it receives the schema defined directly on the object and the additional schemata. Additional schemata are compiled by looking for behaviors and whether they provide the :samp:`IFormFieldProvider` functionality. Only then the fields are known as schema fields."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:195
msgid "Now the only thing that is missing is the behavior, which we must put into :file:`behavior/voting.py`"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:230
msgid "In our :samp:`__init__` method we get *annotations* from the object. We look for data with a specific key."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:233
msgid "The key in this example is the same as what I would get with :samp:`__name__+Vote.__name__`. But we won't create a dynamic name, this would be very clever and clever is bad."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:235
msgid "By declaring a static name, we won't run into problems if we restructure the code."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:237
msgid "You can see that we initialize the data if it doesn't exist. We work with PersistentDict and PersistentList. To understand why we do this, it is important to understand how the ZODB works."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:241
msgid "The ZODB can store objects. It has a special root object that you will never touch. Whatever you store there, will be part of the root object, except if it is an object subclassing :samp:`persistent.Persistent` Then it will be stored independently."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:243
msgid "Zope/ZODB Persistent objects note when you change an attribute on it and mark itself as changed. Changed objects will be saved to the database. This happens automatically. Each request begins a transaction and after our code runs and the Zope Server is preparing to send back the response we generated, the transaction will be committed and everything we changed will be saved."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:245
msgid "Now, if have a normal dictionary on a persistent object, and you will only change the dictionary, the persistent object has no way to know if the dictionary has been changed. This `happens`_ from time to time."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:247
msgid "So one solution is to change the special attribute :samp:`_p_changed` to :samp:`True` on the persistent object, or to use a PersistentDict. That is what we are doing here."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:249
msgid "An important thing to note about PersistentDict and PersistentList is that they cannot handle write conflicts. What happens if two users rate the same content independently at the same time? In this case, a database conflict will occur because there is no way for Plone to know how to handle the concurrent write access. Although this is rather unlikely during this training, it is a very common problem on high traffic websites."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:253
msgid "You can find more information in the documentation of the ZODB, in particular `Rules for Persistent Classes <http://www.zodb.org/en/latest/guide/writing-persistent-objects.html>`_"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:256
msgid "Next we provide the internal fields via properties. Using this form of property makes them read only properties, as we did not define write handlers. We don't need them so we won't add them."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:258
msgid "As you have seen in the Schema declaration, if you run your site in debug mode, you will see an edit field for these fields. But trying to change these fields will throw an exception."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:264
msgid "Explain ZODB and Persistent Classes"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:266
msgid "Let's continue with this file:"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:316
msgid "We start with a little helper method which is not exposed via the interface. We don't want people to vote twice. There are many ways to ensure this and each one has flaws."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:318
msgid "We chose this way to show you how to access information from the request the browser of the user sent to us. First, we get the ip of the user, then we access a small set of headers from the user's browser and generate an md5 checksum of this."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:320
msgid "The vote method wants a vote and a request. We check the preconditions, then we convert the vote to an integer, store the request to :samp:`voted` and the votes into the :samp:`votes` dictionary. We just count there how often any vote has been given."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:322
msgid "Everything else is just python."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:330
msgid "Refactor the voting behavior so that it uses `BTrees` instead of `PersistentDict` and `PersistentList`. Use `OOBTree` to replace `PersistentDict` and `OIBTree` to replace `PersistentList`."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:335
msgid "change :file:`behavior/voting.py`"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:385
#: ../mastering-plone/dexterity.rst:255
#: ../mastering-plone/dexterity_3.rst:609
#: ../mastering-plone/events.rst:198
#: ../mastering-plone/features.rst:109
#: ../mastering-plone/viewlets_1.rst:230
#: ../mastering-plone/views_3.rst:257
msgid "Exercise 2"
msgstr ""

#: ../mastering-plone/behaviors_2.rst:387
msgid "Write a unit test that simulates concurrent voting. The test should raise a `ConflictError` on the original voting behavior implementation. The solution from the first exercise should pass. Look at the file `ZODB/ConflictResolution.txt` in the `ZODB3` egg for how to create a suitable test fixture for conflict testing. Look at the test code in `zope.annotation` for how to create annotatable dummy content. You will also have to write a 'request' dummy that mocks the `getClientAddr` and `getHeader` methods of Zope's HTTP request object to make the `_hash` method of the voting behavior work."
msgstr ""

#: ../mastering-plone/behaviors_2.rst:395
msgid "There are no tests for `starzel.votablebehavior` at all at the moment. But you can refer to chapter 22 for how to setup unit testing for a package. Put the particular test for this exercise into a file named :file:`starzel.votable_behavior/starzel/votable_behavior/tests/test_voting`. Remember you need an empty :file:`__init__.py` file in the :file:`tests` directory to make testing work. You also need to add `starzel.votable_behavior` to `test-eggs` in :file:`buildout.cfg` and re-run buildout."
msgstr ""

#: ../mastering-plone/buildout_1.rst:4
msgid "Buildout I"
msgstr ""

#: ../mastering-plone/buildout_1.rst:8
msgid "Learn about Buildout"
msgstr ""

#: ../mastering-plone/buildout_1.rst:12
msgid "Buildout"
msgstr ""

#: ../mastering-plone/buildout_1.rst:13
#: ../mastering-plone/buildout_1.rst:48
msgid "Recipes"
msgstr ""

#: ../mastering-plone/buildout_1.rst:14
msgid "Buildout Configuration"
msgstr ""

#: ../mastering-plone/buildout_1.rst:15
#: ../mastering-plone/buildout_1.rst:367
msgid "mr.developer"
msgstr ""

#: ../mastering-plone/buildout_1.rst:19
msgid "`Buildout <https://pypi.org/project/zc.buildout>`_ composes your application for you, according to your rules."
msgstr ""

#: ../mastering-plone/buildout_1.rst:21
msgid "To compose your application you must define the eggs you need, which version, what configuration files Buildout has to generate for you, what to download and compile, and so on. Buildout downloads the eggs you requested and resolves all dependencies. You might need five different eggs, but in the end, Buildout has to install 300 eggs, all with the correct version in order to resolve all the dependencies."
msgstr ""

#: ../mastering-plone/buildout_1.rst:24
msgid "Buildout does this without touching your system Python or affecting any other package. The commands created by buildout bring all the required packages into the Python environment. Each command it creates may use different libraries or even different versions of the same library."
msgstr ""

#: ../mastering-plone/buildout_1.rst:26
msgid "Plone needs folders for logfiles, databases and configuration files. Buildout assembles all of this for you."
msgstr ""

#: ../mastering-plone/buildout_1.rst:28
msgid "You will need a lot of functionality that Buildout does not provide out of the box, so you'll need several extensions. Some extensions provide new functionality, like mr.developer, the best way to manage your checked out sources."
msgstr ""

#: ../mastering-plone/buildout_1.rst:35
msgid "Syntax"
msgstr ""

#: ../mastering-plone/buildout_1.rst:39
msgid "The syntax of Buildout configuration files is similar to classic ini files. You write a parameter name, an equals sign and the value. If you enter another value in the next line and indent it, Buildout understands that both values belong to the parameter name, and the parameter stores all values as a list."
msgstr ""

#: ../mastering-plone/buildout_1.rst:41
msgid "A Buildout consists of multiple sections. Sections start with the section name in square brackets. Each section declares a different part of your application. As a rough analogy, your Buildout file is a cookbook with multiple recipes."
msgstr ""

#: ../mastering-plone/buildout_1.rst:43
msgid "There is a special section, called `[buildout]`. This section can change the behavior of Buildout itself. The variable :samp:`parts` defines which of the existing sections should actually be used."
msgstr ""

#: ../mastering-plone/buildout_1.rst:50
msgid "Buildout itself has no idea how to install Zope. Buildout is a plugin based system, it comes with a small set of plugins to create configuration files and download eggs with their dependencies and the proper version."
msgstr ""

#: ../mastering-plone/buildout_1.rst:54
msgid "To install a Zope site, you need a third-party plugin. The plugins provide new recipes that you have to declare and configure in their own respective sections."
msgstr ""

#: ../mastering-plone/buildout_1.rst:57
msgid "One example is the section"
msgstr ""

#: ../mastering-plone/buildout_1.rst:65
msgid "This uses the python package `plone.recipe.zope2instance <https://pypi.org/project/plone.recipe.zope2instance>`_ to create and configure the Zope 2 instance which we use to run Plone."
msgstr ""

#: ../mastering-plone/buildout_1.rst:68
msgid "All the lines after :samp:`recipe = xyz` are the configuration of the specified recipe."
msgstr ""

#: ../mastering-plone/buildout_1.rst:72
msgid "There are way to many buildout-recipes. See https://pypi.org/search/?q=buildout+recipe"
msgstr ""

#: ../mastering-plone/buildout_1.rst:77
msgid "References"
msgstr ""

#: ../mastering-plone/buildout_1.rst:81
msgid "Buildout allows you to use references in the configuration. A variable declaration may not only hold the variable value, but also a reference to where to look for the variable value."
msgstr ""

#: ../mastering-plone/buildout_1.rst:83
msgid "If you have a big setup with many Plone sites with minor changes between each configuration, you can generate a template configuration, and each site references everything from the template and overrides just what needs to be changed."
msgstr ""

#: ../mastering-plone/buildout_1.rst:85
msgid "Even in smaller buildouts this is a useful feature. We are using `collective.recipe.omelette <https://pypi.org/project/collective.recipe.omelette>`_. A very practical recipe that creates a virtual directory that eases the navigation to the source code of each egg."
msgstr ""

#: ../mastering-plone/buildout_1.rst:87
msgid "The omelette recipe needs to know which eggs to reference. We want the same eggs that our instance uses, so we reference the eggs of the instance instead of repeating the whole list."
msgstr ""

#: ../mastering-plone/buildout_1.rst:89
msgid "Another example: Say you create configuration files for a webserver like nginx, you can define the target port for the reverse proxy by looking it up from the zope2instance recipe."
msgstr ""

#: ../mastering-plone/buildout_1.rst:91
msgid "Configuring complex systems always involves a lot of duplication of information. Using references in the buildout configuration allows you to minimize these duplications."
msgstr ""

#: ../mastering-plone/buildout_1.rst:96
msgid "A real life example"
msgstr ""

#: ../mastering-plone/buildout_1.rst:98
msgid "Let us walk through the :file:`buildout.cfg` for the training and look at some important variables:"
msgstr ""

#: ../mastering-plone/buildout_1.rst:217
msgid "When you run :command:`./bin/buildout` without any arguments, Buildout will look for this file."
msgstr ""

#: ../mastering-plone/buildout_1.rst:220
msgid "If you are using the vagrant installation, you will have to activate your `virtualenv` and run the command :command:`buildout` only. In the vagrant setup `zc.buildout` and `setuptools` are installed in the virtualenv and therefore available without specifying the preceding path. This is possible because in recent versions of `zc.buildout` the `bootstrap` step is no longer necessary."
msgstr ""

#: ../mastering-plone/buildout_1.rst:226
msgid "Let us look closer at some variables."
msgstr ""

#: ../mastering-plone/buildout_1.rst:235
msgid "This line tells Buildout to read another configuration file. You can refer to configuration files on your computer or to configuration files on the Internet, reachable via http. You can use multiple configuration files to share configurations between multiple Buildouts, or to separate different aspects of your configuration into different files. Typical examples are version specifications, or configurations that differ between different environments."
msgstr ""

#: ../mastering-plone/buildout_1.rst:264
msgid "This is the list of eggs that we configure to be available for Zope. These eggs are put in the python path of the script :command:`bin/instance` with which we start and stop Plone."
msgstr ""

#: ../mastering-plone/buildout_1.rst:266
msgid "The egg ``Plone`` is a wrapper without code. Among its dependencies is :py:mod:`Products.CMFPlone`  which is the egg that is at the center of Plone."
msgstr ""

#: ../mastering-plone/buildout_1.rst:268
msgid "The rest are add-ons we already used or will use later. The last eggs are commented out so they will not be installed by Buildout."
msgstr ""

#: ../mastering-plone/buildout_1.rst:270
msgid "The file :file:`versions.cfg` that is included by the :samp:`extends = ...` statement holds the version pins:"
msgstr ""

#: ../mastering-plone/buildout_1.rst:283
msgid "This is another special section. By default buildout will look for version pins in a section called ``[versions]``. This is why we included the file :file:`versions.cfg`."
msgstr ""

#: ../mastering-plone/buildout_1.rst:288
msgid "Mr. Developer"
msgstr ""

#: ../mastering-plone/buildout_1.rst:292
msgid "There are many more important things to know, and we can't go through them all in detail but I want to focus on one specific feature: :py:mod:`mr.developer`"
msgstr ""

#: ../mastering-plone/buildout_1.rst:294
msgid "With :py:mod:`mr.developer` you can declare which packages you want to check out from which version control system and which repository URL. You can check out sources from git, svn, bzr, hg and maybe more. Also, you can say that some sources are in your local file system."
msgstr ""

#: ../mastering-plone/buildout_1.rst:296
msgid ":py:mod:`mr.developer` comes with a command, :command:`./bin/develop`. You can use it to update your code, to check for changes and so on. You can activate and deactivate your source checkouts. If you develop your extensions in eggs with separate checkouts, which is a good practice, you can plan releases by having all source checkouts deactivated, and only activate them when you write changes that require a new release. You can activate and deactivate eggs via the :command:`develop` command or the Buildout configuration. You should always use the Buildout way. Your commit serves as documentation."
msgstr ""

#: ../mastering-plone/buildout_1.rst:301
msgid "Extensible"
msgstr ""

#: ../mastering-plone/buildout_1.rst:305
msgid "You might have noticed that most if not all functionality is only available via plugins. One of the things that Buildout excels at without any plugin is the dependency resolution. You can help Plone in dependency resolution by declaring exactly which version of an egg you want."
msgstr ""

#: ../mastering-plone/buildout_1.rst:309
msgid "This is only one use case. Another one is much more important: If you want to have a repeatable Buildout, one that works two months from now."
msgstr ""

#: ../mastering-plone/buildout_1.rst:312
msgid "Also, you *must* declare all your egg versions, else Buildout might install newer versions."
msgstr ""

#: ../mastering-plone/buildout_1.rst:317
msgid "Be McGuyver"
msgstr ""

#: ../mastering-plone/buildout_1.rst:321
msgid "As you can see, you can build very complex systems with Buildout. It is time for some warnings. Be selective in your recipes. Supervisor is a program to manage running servers, and it's pretty good. There is a recipe for it."
msgstr ""

#: ../mastering-plone/buildout_1.rst:323
msgid "The configuration for this recipe is more complicated than the supervisor configuration itself! By using this recipe, you force others to understand the recipe's specific configuration syntax *and* the supervisor syntax. For such cases, `collective.recipe.template <https://pypi.org/project/collective.recipe.template>`_ is a better match."
msgstr ""

#: ../mastering-plone/buildout_1.rst:325
msgid "Another problem is error handling. Buildout tries to install a weird dependency you do not actually want? Buildout will not tell you where it is coming from."
msgstr ""

#: ../mastering-plone/buildout_1.rst:327
msgid "If there is a problem, you can always run Buildout with :option:`-v` to get more verbose output, sometimes it helps."
msgstr ""

#: ../mastering-plone/buildout_1.rst:333
msgid "If strange egg versions are requested, check the dependencies declaration of your eggs and your version pinnings. Here is an invaluable shell command that allows you to find all packages that depend on a particular egg and version:"
msgstr ""

#: ../mastering-plone/buildout_1.rst:340
msgid "Put the name of the egg with a version conflict as the first argument.  Also, change the path to the buildout cache folder according to your installation (the vagrant buildout is assumed in the example)."
msgstr ""

#: ../mastering-plone/buildout_1.rst:342
msgid "Some parts of Buildout interpret egg names case sensitively, others don't. This can result in funny problems."
msgstr ""

#: ../mastering-plone/buildout_1.rst:344
msgid "Always check out the ordering of your extends, always use the :samp:`annotate` command of Buildout to see if it interprets your configuration differently than you. Restrict yourself to simple Buildout files. You can reference variables from other sections, you can even use a whole section as a template. We learned that this does not work well with complex hierarchies and had to abandon that feature."
msgstr ""

#: ../mastering-plone/buildout_1.rst:346
msgid "In the chapter :doc:`deployment_sites` we will have a look at a production-ready buildout for Plone that has many useful features."
msgstr ""

#: ../mastering-plone/buildout_1.rst:351
msgid "Buildout-Documentation"
msgstr ""

#: ../mastering-plone/buildout_1.rst:351
msgid "http://docs.buildout.org/en/latest/contents.html"
msgstr ""

#: ../mastering-plone/buildout_1.rst:354
msgid "Troubleshooting"
msgstr ""

#: ../mastering-plone/buildout_1.rst:354
msgid "https://docs.plone.org/manage/troubleshooting/buildout.html"
msgstr ""

#: ../mastering-plone/buildout_1.rst:357
msgid "A minimal buildout for Plone 5"
msgstr ""

#: ../mastering-plone/buildout_1.rst:357
msgid "https://github.com/collective/minimalplone5"
msgstr ""

#: ../mastering-plone/buildout_1.rst:360
msgid "A minimal buildout for Plone 4"
msgstr ""

#: ../mastering-plone/buildout_1.rst:360
msgid "https://github.com/collective/minimalplone4"
msgstr ""

#: ../mastering-plone/buildout_1.rst:365
msgid "The buildout of the unified installer has some valuable documentation as inline-comment"
msgstr ""

#: ../mastering-plone/buildout_1.rst:363
msgid "https://github.com/plone/Installers-UnifiedInstaller/blob/master/buildout_templates/buildout.cfg"
msgstr ""

#: ../mastering-plone/buildout_1.rst:364
msgid "https://github.com/plone/Installers-UnifiedInstaller/blob/master/base_skeleton/base.cfg"
msgstr ""

#: ../mastering-plone/buildout_1.rst:365
msgid "https://github.com/plone/Installers-UnifiedInstaller/blob/master/base_skeleton/develop.cfg"
msgstr ""

#: ../mastering-plone/buildout_1.rst:368
msgid "https://pypi.org/project/mr.developer/"
msgstr ""

#: ../mastering-plone/case.rst:4
msgid "The Case Study"
msgstr ""

#: ../mastering-plone/case.rst:6
msgid "For this training we will build a website for a fictional Plone conference."
msgstr ""

#: ../mastering-plone/case.rst:11
msgid "Background"
msgstr ""

#: ../mastering-plone/case.rst:13
msgid "The Plone conference takes place every year and all Plone developers at least try to go there."
msgstr ""

#: ../mastering-plone/case.rst:18
msgid "Requirements"
msgstr ""

#: ../mastering-plone/case.rst:20
msgid "Here are some requirements that we want to meet when the site is done:"
msgstr ""

#: ../mastering-plone/case.rst:22
msgid "As a visitor I want to find current information on the conference."
msgstr ""

#: ../mastering-plone/case.rst:23
msgid "As a visitor I want to register for the conference."
msgstr ""

#: ../mastering-plone/case.rst:24
msgid "As a visitor I want to see the talks and sort them by my preferences."
msgstr ""

#: ../mastering-plone/case.rst:25
msgid "As a speaker I want to be able to submit talks."
msgstr ""

#: ../mastering-plone/case.rst:26
msgid "As a speaker I want to see and edit my submitted talks."
msgstr ""

#: ../mastering-plone/case.rst:27
msgid "As an organizer I want to see a list of all proposed talks."
msgstr ""

#: ../mastering-plone/case.rst:28
msgid "As an organizer I want to have an overview about how many people registered."
msgstr ""

#: ../mastering-plone/case.rst:29
msgid "As a jury member I want to vote on talks."
msgstr ""

#: ../mastering-plone/case.rst:30
msgid "As a jury member I want to decide which talks to accept, and which not."
msgstr ""

#: ../mastering-plone/case.rst:32
msgid "Note that all of our requirements connect roles with capabilities. This is important because we'll want to limit the capabilities to those to whom we assign particular roles."
msgstr ""

#: ../mastering-plone/code.rst:2
msgid "Using the code for the training"
msgstr ""

#: ../mastering-plone/code.rst:4
msgid "You can get the complete code for this training from `GitHub <https://github.com/collective/ploneconf.site>`_."
msgstr ""

#: ../mastering-plone/code.rst:7
msgid "The code-package"
msgstr ""

#: ../mastering-plone/code.rst:9
msgid "The package"
msgstr ""

#: ../mastering-plone/code.rst:13
msgid "If you want to do it by hand do the following:"
msgstr ""

#: ../mastering-plone/code.rst:22
msgid "Getting the code for a certain chapter"
msgstr ""

#: ../mastering-plone/code.rst:24
msgid "To use the code for a certain chapter you need to checkout the appropriate tag for the chapter. The package will then contain the complete code for that chapter (excluding exercises)."
msgstr ""

#: ../mastering-plone/code.rst:27
msgid "If you want to add the code for the chapter yourself you have to checkout the tag for the previous chapter."
msgstr ""

#: ../mastering-plone/code.rst:30
msgid "Here is a example:"
msgstr ""

#: ../mastering-plone/code.rst:36
msgid "The names of the tags are the same as the URL of the chapter. The tag for the chapter https://training.plone.org/5/mastering-plone/registry.html is ``registry`` and you can get it with :command:`git checkout registry`."
msgstr ""

#: ../mastering-plone/code.rst:42
msgid "Moving from chapter to chapter"
msgstr ""

#: ../mastering-plone/code.rst:44
msgid "To change the code to the state of the next chapter checkout the tag for the next chapter:"
msgstr ""

#: ../mastering-plone/code.rst:51
msgid "If you made any changes to the code you have to get them out of the way first:"
msgstr ""

#: ../mastering-plone/code.rst:57
msgid "This will stash away your changes but not delete them. You can get them back later. You should learn about the command :command:`git stash` before you try reapply stashed changes."
msgstr ""

#: ../mastering-plone/code.rst:60
msgid "If you want to remove any changes you made locally you can delete them with this command:"
msgstr ""

#: ../mastering-plone/code.rst:71
msgid "Telling Plone about ploneconf.site"
msgstr ""

#: ../mastering-plone/code.rst:73
msgid "If you did not yet do this (it is covered in chapter :ref:`eggs1-label`) you will have to modify :file:`buildout.cfg` to have Plone expect the egg :py:mod:`ploneconf.site` to be in :file:`src`."
msgstr ""

#: ../mastering-plone/code.rst:95
msgid "Tags"
msgstr ""

#: ../mastering-plone/code.rst:97
msgid "These are the tags for which there is code:"
msgstr ""

#: ../mastering-plone/code.rst:100
#: ../mastering-plone/timing.rst:11
msgid "Chapter"
msgstr ""

#: ../mastering-plone/code.rst:100
msgid "Tag-Name"
msgstr ""

#: ../mastering-plone/code.rst:102
msgid ":doc:`about_mastering`"
msgstr ""

#: ../mastering-plone/code.rst:103
msgid ":doc:`intro`"
msgstr ""

#: ../mastering-plone/code.rst:104
msgid ":doc:`installation`"
msgstr ""

#: ../mastering-plone/code.rst:105
msgid ":doc:`case`"
msgstr ""

#: ../mastering-plone/code.rst:106
msgid ":doc:`features`"
msgstr ""

#: ../mastering-plone/code.rst:107
msgid ":doc:`anatomy`"
msgstr ""

#: ../mastering-plone/code.rst:108
msgid ":doc:`plone5`"
msgstr ""

#: ../mastering-plone/code.rst:109
msgid ":doc:`configuring_customizing`"
msgstr ""

#: ../mastering-plone/code.rst:110
msgid ":doc:`theming`"
msgstr ""

#: ../mastering-plone/code.rst:111
msgid ":doc:`extending`"
msgstr ""

#: ../mastering-plone/code.rst:112
msgid ":doc:`add-ons`"
msgstr ""

#: ../mastering-plone/code.rst:113
msgid ":doc:`dexterity`"
msgstr ""

#: ../mastering-plone/code.rst:114
msgid ":doc:`buildout_1`"
msgstr ""

#: ../mastering-plone/code.rst:114
msgid "``buildout_1``"
msgstr ""

#: ../mastering-plone/code.rst:115
msgid ":doc:`eggs1`"
msgstr ""

#: ../mastering-plone/code.rst:115
msgid "``eggs1``"
msgstr ""

#: ../mastering-plone/code.rst:116
msgid ":doc:`export_code`"
msgstr ""

#: ../mastering-plone/code.rst:116
msgid "``export_code``"
msgstr ""

#: ../mastering-plone/code.rst:117
msgid ":doc:`views_1`"
msgstr ""

#: ../mastering-plone/code.rst:117
msgid "``views_1``"
msgstr ""

#: ../mastering-plone/code.rst:118
msgid ":doc:`zpt`"
msgstr ""

#: ../mastering-plone/code.rst:118
msgid "``zpt``"
msgstr ""

#: ../mastering-plone/code.rst:119
msgid ":doc:`zpt_2`"
msgstr ""

#: ../mastering-plone/code.rst:119
msgid "``zpt_2``"
msgstr ""

#: ../mastering-plone/code.rst:120
msgid ":doc:`views_2`"
msgstr ""

#: ../mastering-plone/code.rst:120
msgid "``views_2``"
msgstr ""

#: ../mastering-plone/code.rst:121
msgid ":doc:`views_3`"
msgstr ""

#: ../mastering-plone/code.rst:121
msgid "``views_3``"
msgstr ""

#: ../mastering-plone/code.rst:122
msgid ":doc:`testing`"
msgstr ""

#: ../mastering-plone/code.rst:122
msgid "``testing``"
msgstr ""

#: ../mastering-plone/code.rst:123
msgid ":doc:`behaviors_1`"
msgstr ""

#: ../mastering-plone/code.rst:123
msgid "``behaviors_1``"
msgstr ""

#: ../mastering-plone/code.rst:124
msgid ":doc:`viewlets_1`"
msgstr ""

#: ../mastering-plone/code.rst:124
msgid "``viewlets_1``"
msgstr ""

#: ../mastering-plone/code.rst:125
msgid ":doc:`api`"
msgstr ""

#: ../mastering-plone/code.rst:126
msgid ":doc:`ide`"
msgstr ""

#: ../mastering-plone/code.rst:127
msgid ":doc:`dexterity_2`"
msgstr ""

#: ../mastering-plone/code.rst:127
msgid "``dexterity_2``"
msgstr ""

#: ../mastering-plone/code.rst:128
msgid ":doc:`custom_search`"
msgstr ""

#: ../mastering-plone/code.rst:129
msgid ":doc:`events`"
msgstr ""

#: ../mastering-plone/code.rst:129
msgid "``events``"
msgstr ""

#: ../mastering-plone/code.rst:130
msgid ":doc:`user_generated_content`"
msgstr ""

#: ../mastering-plone/code.rst:130
msgid "``user_generated_content``"
msgstr ""

#: ../mastering-plone/code.rst:131
msgid ":doc:`resources`"
msgstr ""

#: ../mastering-plone/code.rst:131
msgid "``resources``"
msgstr ""

#: ../mastering-plone/code.rst:132
msgid ":doc:`thirdparty_behaviors`"
msgstr ""

#: ../mastering-plone/code.rst:132
msgid "``thirdparty_behaviors``"
msgstr ""

#: ../mastering-plone/code.rst:133
msgid ":doc:`dexterity_3`"
msgstr ""

#: ../mastering-plone/code.rst:133
msgid "``dexterity_3``"
msgstr ""

#: ../mastering-plone/code.rst:134
msgid ":doc:`relations`"
msgstr ""

#: ../mastering-plone/code.rst:134
msgid "``relations``"
msgstr ""

#: ../mastering-plone/code.rst:135
msgid ":doc:`registry`"
msgstr ""

#: ../mastering-plone/code.rst:135
msgid "``registry``"
msgstr ""

#: ../mastering-plone/code.rst:136
msgid ":doc:`frontpage`"
msgstr ""

#: ../mastering-plone/code.rst:136
msgid "``frontpage``"
msgstr ""

#: ../mastering-plone/code.rst:137
msgid ":doc:`eggs2`"
msgstr ""

#: ../mastering-plone/code.rst:138
msgid ":doc:`behaviors_2`"
msgstr ""

#: ../mastering-plone/code.rst:139
msgid ":doc:`viewlets_2`"
msgstr ""

#: ../mastering-plone/code.rst:140
msgid ":doc:`reusable`"
msgstr ""

#: ../mastering-plone/code.rst:141
msgid ":doc:`embed`"
msgstr ""

#: ../mastering-plone/code.rst:142
#: ../mastering-plone/optional.rst:18
msgid ":doc:`deployment_code`"
msgstr ""

#: ../mastering-plone/code.rst:143
msgid ":doc:`deployment_sites`"
msgstr ""

#: ../mastering-plone/code.rst:148
msgid "Updating the code-package"
msgstr ""

#: ../mastering-plone/code.rst:150
msgid "This section if for training who want to update the code in :py:mod:`ploneconf.site` wfter changing something in the training documentation."
msgstr ""

#: ../mastering-plone/code.rst:152
msgid "The current model uses only one branch of commits and maintains the integrity through rebases."
msgstr ""

#: ../mastering-plone/code.rst:154
msgid "It goes like this:"
msgstr ""

#: ../mastering-plone/code.rst:156
msgid "Only one one branch (master)"
msgstr ""

#: ../mastering-plone/code.rst:157
msgid "Write the code for chapter 1 and commit"
msgstr ""

#: ../mastering-plone/code.rst:158
msgid "Write the code for chapter 2 and commit"
msgstr ""

#: ../mastering-plone/code.rst:159
msgid "Add the code for chapter 3 and commit"
msgstr ""

#: ../mastering-plone/code.rst:160
msgid "You realize that something or wrong in chapter 1"
msgstr ""

#: ../mastering-plone/code.rst:161
msgid "You branch off at the commit id for chapter 1 `git checkout -b temp 123456`"
msgstr ""

#: ../mastering-plone/code.rst:163
msgid "You change the code and do a commit. `git commit -am 'Changed foo to also do bar'`"
msgstr ""

#: ../mastering-plone/code.rst:165
msgid "Switch to master and rebase on the branch holding the fix which will inject your new commit into master at the right place: `git checkout master` `git rebase temp` That inserts the changes into master in the right place. You only maintain a master branch that is a sequence of commits."
msgstr ""

#: ../mastering-plone/code.rst:169
msgid "You then can update your chapter-docs to point to the corresponding commit ids: chapter one: `git checkout 121431243` chapter two: `git checkout 498102980`"
msgstr ""

#: ../mastering-plone/code.rst:173
msgid "Additionally you can"
msgstr ""

#: ../mastering-plone/code.rst:175
msgid "set tags on the respective commits and move the tags. This way the docs do not need to change"
msgstr ""

#: ../mastering-plone/code.rst:176
msgid "squash the commits between the chapters to every chapter is one commit."
msgstr ""

#: ../mastering-plone/code.rst:178
msgid "To move tags after changes you do:"
msgstr ""

#: ../mastering-plone/code.rst:180
msgid "Move a to another commit: `git tag -a <tagname> <commithash> -f`"
msgstr ""

#: ../mastering-plone/code.rst:181
msgid "Move the tag on the server `git push --tags -f`"
msgstr ""

#: ../mastering-plone/code.rst:183
msgid "The final result should look like this:"
msgstr ""

#: ../mastering-plone/code.rst:188
msgid "I earlier versions we used a folder-based such as in https://github.com/collective/ploneconf.site_sneak. It proved to be a lot a lot of work to maintain that."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:4
msgid "Configuring and Customizing Plone \"Through The Web\""
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:8
msgid "This chapter has not yet been updated for Plone 5!"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:15
msgid "The Control Panel"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:17
msgid "The most important parts of Plone can be configured in the control panel."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:19
msgid "Click on the portrait/username in the toolbar"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:20
msgid "Click :guilabel:`Site Setup`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:22
msgid "We'll explain every page and mention some of the actions you can perform here."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:26
msgid "General"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:28
msgid "Date and Time"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:29
msgid "Language"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:30
msgid "Mail"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:31
msgid "Navigation"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:32
msgid "Site"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:33
msgid "Add-ons"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:34
msgid "Search"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:35
msgid "Discussion"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:36
#: ../mastering-plone/theming.rst:5
msgid "Theming"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:37
msgid "Social Media"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:38
msgid "Syndication"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:39
msgid "TinyMCE"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:43
msgid "Content"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:45
#: ../mastering-plone/features.rst:376
msgid "Content Rules"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:46
msgid "Editing"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:47
msgid "Image Handling"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:48
msgid "Markup"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:49
msgid "Content Settings"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:50
msgid "Dexterity Content Types"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:53
#: ../mastering-plone/features.rst:195
msgid "Users"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:55
msgid "Users and Groups"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:58
#: ../mastering-plone/configuring_customizing.rst:61
msgid "Security"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:60
msgid "HTML Filtering"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:62
msgid "Errors"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:65
msgid "Advanced"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:67
msgid "Maintenance"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:68
msgid "Management Interface"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:69
msgid "Caching"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:70
msgid "Configuration Registry"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:71
msgid "Resource Registries"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:74
msgid "Below the links you will find information on your Plone, Zope and Python Versions and an indicator as to whether you're running in production or development mode."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:77
msgid "Change the logo"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:79
msgid "Let's change the logo."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:81
msgid "Download a ploneconf logo: https://www.starzel.de/plone-tutorial/ploneconf-logo-2014"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:82
msgid "Go to http://localhost:8080/Plone/@@site-controlpanel"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:83
msgid "Upload the Logo."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:89
msgid "The view of the homepage with the customized logo."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:93
msgid "https://docs.plone.org/adapt-and-extend/change-the-logo.html"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:99
#: ../mastering-plone/optional.rst:7
msgid "Portlets"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:101
msgid "In the toolbar under :guilabel:`More options` you can open the configuration for the different places where you can have portlets."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:103
msgid "UI fit for smart content editors"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:104
msgid "Various types"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:105
msgid "Portlet configuration is inherited"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:106
msgid "Managing"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:107
msgid "Ordering/weighting"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:108
msgid "The future: may be replaced by tiles"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:109
msgid "``@@manage-portlets``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:111
#: ../mastering-plone/zpt.rst:378
msgid "Example:"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:113
msgid "Go to http://localhost:8080/Plone/@@manage-portlets"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:114
msgid "Add a static portlet \"Sponsors\" on the right side."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:115
msgid "Remove the news portlet and add a new one on the left side."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:116
msgid "Go to the training folder: http://localhost:8080/Plone/the-event/training and click :guilabel:`Manage portlets`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:117
msgid "Add a static portlet. \"Featured training: Become a Plone-Rockstar at Mastering Plone!\""
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:118
msgid "Use the toolbar to configure the portlets of the footer:"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:120
msgid "Hide the portlets \"Footer\" and \"Colophon\"."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:121
msgid "Add a :guilabel:`Static text portlet` and enter \"Copyright 2015 by Plone Community\"."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:122
msgid "Use :menuselection:`Insert --> Special Character` to add a real © sign."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:123
msgid "You could turn that into a link to a copyright page later."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:129
#: ../mastering-plone/intro.rst:70
#: ../mastering-plone/viewlets_1.rst:21
#: ../mastering-plone/viewlets_2.rst:20
msgid "Viewlets"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:131
msgid "Portlets save data, Viewlets usually don't. Viewlets are often used for UI-Elements and have no nice UI to customize them."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:133
msgid "``@@manage-viewlets``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:134
msgid "Viewlets have no nice UI"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:135
msgid "Not aimed at content editors"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:136
msgid "Not locally addable, no configurable inheritance."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:137
msgid "Usually global (depends on code)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:138
msgid "Will be replaced by tiles?"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:139
msgid "The code is much simpler (we'll create one tomorrow)."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:140
msgid "Live in viewlet managers, can be nested (by adding a viewlet that contains a viewlet manager)."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:141
msgid "TTW reordering only within the same viewlet manager."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:142
msgid "The code decides when it is shown and what it shows."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:148
msgid "ZMI (Zope Management Interface)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:150
msgid "Go to http://localhost:8080/Plone/manage"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:152
msgid "Zope is the foundation of Plone. Here you can access the inner workings of Zope and Plone alike."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:156
msgid "Here you can easily break your site so you should know what you are doing!"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:160
msgid "We only cover three parts of customization in the ZMI now. Later on when we added our own code we'll come back to the ZMI and will look for it."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:163
msgid "At some point you'll have to learn what all those objects are about. But not today."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:167
msgid "Actions (portal_actions)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:169
msgid "Actions are mostly links. But **really flexible** links."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:170
msgid "Actions are configurable TTW (Through-The-Web) and through code."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:171
msgid "These actions are usually iterated over in viewlets and displayed."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:173
#: ../mastering-plone/custom_search.rst:31
#: ../mastering-plone/zpt.rst:355
msgid "Examples:"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:175
msgid "Links in the Footer (``site_actions``)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:176
msgid "Actions Dropdown (``folder_buttons``)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:178
msgid "Actions have properties like:"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:180
msgid "description"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:181
msgid "url"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:182
msgid "i18n-domain"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:183
#: ../mastering-plone/zpt.rst:451
msgid "condition"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:184
msgid "permissions"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:189
msgid "``site_actions``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:191
msgid "These are the links at the bottom of the page:"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:193
msgid ":guilabel:`Site Map`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:194
msgid ":guilabel:`Accessibility`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:195
msgid ":guilabel:`Contact`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:196
msgid ":guilabel:`Site Setup`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:198
msgid "We want a new link to legal information, called \"Imprint\"."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:200
msgid "Go to ``site_actions`` (we know that because we checked in ``@@manage-viewlets``)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:201
msgid "Add a CMF Action ``imprint``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:202
msgid "Set URL to ``string:${portal_url}/imprint``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:203
msgid "Leave *condition* empty"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:204
msgid "Set permission to ``View``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:205
msgid "Save"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:209
msgid "explain"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:211
msgid "Check if the link is on the page"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:212
msgid "Create new Document \"Imprint\" and publish"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:216
msgid "https://docs.plone.org/develop/plone/functionality/actions.html"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:220
msgid "Global navigation"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:222
msgid "The horizontal navigation is called ``portal_tabs``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:223
msgid "Go to :menuselection:`portal_actions --> portal_tabs` `Link <http://localhost:8080/Plone/portal_actions/portal_tabs/manage_main>`_"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:224
msgid "Edit ``index_html``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:226
msgid "Where is the navigation?"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:228
msgid "The navigation shows content-objects, which are in Plone's root. Plus all actions in ``portal_tabs``."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:230
msgid "Explain & edit ``index_html``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:232
msgid "Configuring the navigation itself is done elsewhere: http://localhost:8080/Plone/@@navigation-controlpanel"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:234
msgid "If time explain:"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:236
msgid "user > undo (cool!)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:237
msgid "user > login/logout"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:241
msgid "Skins (``portal_skins``)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:243
msgid "In ``portal_skins`` we can change certain images, CSS-files and templates."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:245
msgid "``portal_skins`` is deprecated technology"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:246
msgid "Plone 5 got rid of most files that lived in ``portal_skins``."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:250
msgid "Change some CSS"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:252
msgid "Go to ZMI"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:253
msgid "Go to ``portal_skins``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:254
msgid "Go to ``plone_styles``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:255
msgid "Go to :file:`ploneCustom.css`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:256
msgid "Click :guilabel:`customize`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:258
msgid "The CSS you add to this file is instantly active on the site."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:262
msgid "portal_view_customizations"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:265
msgid "Change the footer"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:267
msgid "Go to ``portal_view_customizations``"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:268
msgid "Search ``plone.footer``, click and customize"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:269
msgid "Replace the content with the following"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:285
msgid "https://docs.plone.org/adapt-and-extend/theming/templates_css/skin_layers.html"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:289
msgid "CSS Registry (``portal_css``)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:291
msgid "*deprecated* (See the chapter on theming)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:295
msgid "Further tools in the ZMI"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:297
msgid "There are many more notable items in the ZMI. We'll visit some of them later."
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:299
msgid ":guilabel:`acl_users`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:300
msgid ":guilabel:`error_log`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:301
msgid ":guilabel:`portal_properties` (deprecated)"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:302
msgid ":guilabel:`portal_setup`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:303
msgid ":guilabel:`portal_workflow`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:304
msgid ":guilabel:`portal_catalog`"
msgstr ""

#: ../mastering-plone/configuring_customizing.rst:312
msgid "You can configure and customize a lot in Plone through the web. The most important options are accessible in the `Plone control panel <http://localhost:8080/Plone/@@overview-controlpanel>`_ but some are hidden away in the `ZMI <http://localhost:8080/Plone/manage>`_. The amount and presentation of information is overwhelming but you'll get the hang of it through a lot of practice."
msgstr ""

#: ../mastering-plone/custom_search.rst:4
msgid "Custom Search"
msgstr ""

#: ../mastering-plone/custom_search.rst:6
msgid "If the chapters about views seem complex, the custom search add-ons shown below might be a great alternative until you feel comfortable writing views and templates."
msgstr ""

#: ../mastering-plone/custom_search.rst:9
msgid "Here are two add-ons that allow you to add custom searches and content listings through the web in Plone."
msgstr ""

#: ../mastering-plone/custom_search.rst:14
msgid "eea.facetednavigation"
msgstr ""

#: ../mastering-plone/custom_search.rst:16
msgid "eea.facetednavigation is a full-featured and a very powerful add-on to improve search within large collections of items. No programming skills are required to configure it since the configuration is done TTW (Through-The-Web)."
msgstr ""

#: ../mastering-plone/custom_search.rst:19
msgid "It lets you gradually select and explore different facets (metadata/properties) of the site content and narrow down you search quickly and dynamically."
msgstr ""

#: ../mastering-plone/custom_search.rst:22
msgid "Install `eea.facetednavigation <https://pypi.org/project/eea.facetednavigation/>`_"
msgstr ""

#: ../mastering-plone/custom_search.rst:23
msgid "Enable it on a new folder \"Discover talks\" by clicking on :guilabel:`Actions > Enable faceted navigation`."
msgstr ""

#: ../mastering-plone/custom_search.rst:24
msgid "Click on the :guilabel:`Faceted > Configure` to configure it through the web."
msgstr ""

#: ../mastering-plone/custom_search.rst:26
msgid "Select 'Talk' for *Portal type*, hide *Results per page*"
msgstr ""

#: ../mastering-plone/custom_search.rst:27
msgid "Add a checkboxes widget to the left and use the catalog index *Audience* for it."
msgstr ""

#: ../mastering-plone/custom_search.rst:28
msgid "Add a select widget for speaker"
msgstr ""

#: ../mastering-plone/custom_search.rst:29
msgid "Add a radio widget for type_of_talk"
msgstr ""

#: ../mastering-plone/custom_search.rst:33
msgid "https://www.dipf.de/en/research/projects"
msgstr ""

#: ../mastering-plone/custom_search.rst:34
msgid "https://www.mountaineers.org/courses/courses-clinics-seminars"
msgstr ""

#: ../mastering-plone/custom_search.rst:35
msgid "https://www.dyna-jet.com/hochdruckreiniger"
msgstr ""

#: ../mastering-plone/custom_search.rst:39
msgid "We use the new catalog indexes to provide the data for the widgets and search the results. For other use cases we could also use either the built-in vocabularies (https://pypi.org/project/plone.app.vocabularies) or create custom vocabularies for this."
msgstr ""

#: ../mastering-plone/custom_search.rst:42
msgid "Custom vocabularies TTW (Through-The-Web) using `Products.ATVocabularyManager <https://pypi.org/project/Products.ATVocabularyManager>`_"
msgstr ""

#: ../mastering-plone/custom_search.rst:43
msgid "Programming using Vocabularies: https://docs.plone.org/external/plone.app.dexterity/docs/advanced/vocabularies.html"
msgstr ""

#: ../mastering-plone/custom_search.rst:47
msgid "collective.portlet.collectionfilter"
msgstr ""

#: ../mastering-plone/custom_search.rst:49
msgid "A more light-weight solution for custom searches and faceted navigation is `collective.portlet.collectionfilter <https://pypi.org/project/collective.portlet.collectionfilter>`_. By default it allows you to search among the results of a collection and/or filter the results by keywords, author or type."
msgstr ""

#: ../mastering-plone/custom_search.rst:52
msgid "It can also be extended quite easily to allow additional filters (like `audience`)."
msgstr ""

#: ../mastering-plone/deployment_code.rst:2
msgid "Releasing Your Code"
msgstr ""

#: ../mastering-plone/deployment_code.rst:4
msgid "zest.releaser"
msgstr ""

#: ../mastering-plone/deployment_code.rst:5
msgid "pypi-test egg deployment"
msgstr ""

#: ../mastering-plone/deployment_code.rst:7
msgid "We finally have some working code! Depending on your policies, you need repeatable deployments and definitive versions of software. That means you don't just run your production site with your latest source code from your source repository. You want to work with eggs."
msgstr ""

#: ../mastering-plone/deployment_code.rst:9
msgid "Making eggs is easy, making them properly not so much. There are a number of good practices that you should ensure. Let's see. You want to have a sensible version number. By looking at the version number alone one should get a good idea how many changes there are (semantic version number scheme). Of course you always document everything, but for upgrades it is even more important to have complete changelogs."
msgstr ""

#: ../mastering-plone/deployment_code.rst:12
msgid "Sometimes, you cannot upgrade to a newer version, but you need a hotfix or whatever. It is crucial that you are able to checkout the exact version you use for your egg."
msgstr ""

#: ../mastering-plone/deployment_code.rst:14
msgid "These are a lot of steps, and there are a lot of actions that can go wrong. Luckily, there is a way to automate it. zest.releaser provides scripts to release an egg, to check what has changed since the release and to check if the documentation has errors."
msgstr ""

#: ../mastering-plone/deployment_code.rst:16
msgid "There once was a book on python. Among other things, it had a chapter on releasing an egg with sample code. The sample code was about a printer of nested lists. This resulted in a lot of packages to print out nested lists on pypi."
msgstr ""

#: ../mastering-plone/deployment_code.rst:18
msgid "We will avoid this. Everybody, go to `test.pypi.org <https://test.pypi.org>`_ and create an account now."
msgstr ""

#: ../mastering-plone/deployment_code.rst:20
msgid "Next, copy the pypirc_sample file to ~/.pypirc, modify it to contain your real username and password."
msgstr ""

#: ../mastering-plone/deployment_code.rst:22
msgid "Now that we are prepared, let's install zest.releaser."
msgstr ""

#: ../mastering-plone/deployment_code.rst:24
msgid "lasttagdiff"
msgstr ""

#: ../mastering-plone/deployment_code.rst:25
msgid "longtest"
msgstr ""

#: ../mastering-plone/deployment_code.rst:26
msgid "prerelease"
msgstr ""

#: ../mastering-plone/deployment_code.rst:27
msgid "release"
msgstr ""

#: ../mastering-plone/deployment_code.rst:28
msgid "postrelease"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:4
msgid "Buildout II: Getting Ready for Deployment"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:10
msgid "The Starzel buildout"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:12
msgid "Have a look at the buildout some of the trainers use for their projects: https://github.com/starzel/buildout"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:14
msgid "It has some notable features:"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:16
msgid "It extends to config- and version-files on github shared by all projects that use the same version of Plone:"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:24
msgid "It allows to update a project simply by changing the version it extends."
msgstr ""

#: ../mastering-plone/deployment_sites.rst:25
msgid "It allows to update all projects of one version by changing remote files (very useful for HotFixes)."
msgstr ""

#: ../mastering-plone/deployment_sites.rst:26
msgid "It is minimal work to setup a new project."
msgstr ""

#: ../mastering-plone/deployment_sites.rst:27
msgid "It has presets for development, testing, staging and production."
msgstr ""

#: ../mastering-plone/deployment_sites.rst:28
msgid "It has all the nice development-helpers we use."
msgstr ""

#: ../mastering-plone/deployment_sites.rst:30
msgid "Another noteable buildout to look for inspiration:"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:32
msgid "https://github.com/4teamwork/ftw-buildouts"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:37
msgid "A deployment setup"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:39
msgid "Deploying Plone and production-setups are outside the scope for this training. Please see https://docs.plone.org/manage/deploying/index.html"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:44
msgid "Other tools we use"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:46
msgid "There are plenty of tools that make developing and managing sites much easier. Here are only some of the ones you might want to check out:"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:48
msgid "Fabric (managing sites)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:49
msgid "Sentry (error monitoring)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:50
msgid "Ansible (managing and provisioning machines)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:51
msgid "Greylog, ELK (logging)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:52
msgid "Nagios, Zabbix (server monitoring)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:53
msgid "jenkins, gitlab-ci, travis, drone.io (Continuous Integration)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:54
msgid "piwik (statistics)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:55
msgid "gitlab (code repo and code review)"
msgstr ""

#: ../mastering-plone/deployment_sites.rst:56
msgid "redmine, taiga, assembla (project-management and ticket-system)"
msgstr ""

#: ../mastering-plone/dexterity.rst:4
msgid "Dexterity I: \"Through The Web\""
msgstr ""

#: ../mastering-plone/dexterity.rst:8
msgid "Create a new content type called *Talk*."
msgstr ""

#: ../mastering-plone/dexterity.rst:13
msgid "Content types"
msgstr ""

#: ../mastering-plone/dexterity.rst:14
msgid "Archetypes and Dexterity"
msgstr ""

#: ../mastering-plone/dexterity.rst:15
msgid "Fields"
msgstr ""

#: ../mastering-plone/dexterity.rst:16
msgid "Widgets"
msgstr ""

#: ../mastering-plone/dexterity.rst:22
msgid "What is a content type?"
msgstr ""

#: ../mastering-plone/dexterity.rst:24
msgid "A content type is a kind of object that can store information and is editable by users. We have different content types to reflect the different kinds of information about which we need to collect and display information. Pages, folders, events, news items, files (binary) and images are all content types."
msgstr ""

#: ../mastering-plone/dexterity.rst:28
msgid "It is common in developing a web site that you'll need customized versions of common content types, or perhaps even entirely new types."
msgstr ""

#: ../mastering-plone/dexterity.rst:30
msgid "Remember the requirements for our project? We wanted to be able to solicit and edit conference talks. We *could* use the **Page** content type for that purpose. But we need to make sure we collect certain bits of information about a talk and we couldn't be sure to get that information if we just asked potential presenters to create a page. Also, we'll want to be able to display talks featuring that special information, and we'll want to be able to show collections of talks. A custom content type will be ideal."
msgstr ""

#: ../mastering-plone/dexterity.rst:39
msgid "The makings of a Plone content type"
msgstr ""

#: ../mastering-plone/dexterity.rst:41
msgid "Every Plone content type has the following parts:"
msgstr ""

#: ../mastering-plone/dexterity.rst:45
msgid "Schema"
msgstr ""

#: ../mastering-plone/dexterity.rst:44
msgid "A definition of fields that comprise a content type; properties of an object."
msgstr ""

#: ../mastering-plone/dexterity.rst:48
#: ../mastering-plone/export_code.rst:25
msgid "FTI"
msgstr ""

#: ../mastering-plone/dexterity.rst:48
msgid "The \"Factory Type Information\" configures the content type in Plone, assigns it a name, additional features and available views to it."
msgstr ""

#: ../mastering-plone/dexterity.rst:54
msgid "Views"
msgstr ""

#: ../mastering-plone/dexterity.rst:51
msgid "A view is a representation of the object and the content of its fields that may be rendered in response to a request. You may have *one or more* views for an object. Some may be *visual* — intended for display as web pages — others may be intended to satisfy AJAX requests and render content in formats like JSON or XML."
msgstr ""

#: ../mastering-plone/dexterity.rst:59
msgid "Dexterity and Archetypes - A Comparison"
msgstr ""

#: ../mastering-plone/dexterity.rst:61
msgid "There used to be two content frameworks in Plone:"
msgstr ""

#: ../mastering-plone/dexterity.rst:63
msgid "*Dexterity*: new and default."
msgstr ""

#: ../mastering-plone/dexterity.rst:64
msgid "*Archetypes*: the old default in Plone 4 and deprecated. Still used in some add-ons."
msgstr ""

#: ../mastering-plone/dexterity.rst:65
msgid "Plone 4.x: Archetypes is the default, with Dexterity available."
msgstr ""

#: ../mastering-plone/dexterity.rst:66
msgid "Plone 5.x: Dexterity is the default, with Archetypes available. In Plone 6 Archetypes will not be available any more."
msgstr ""

#: ../mastering-plone/dexterity.rst:67
msgid "For both, add and edit forms are created automatically from a schema."
msgstr ""

#: ../mastering-plone/dexterity.rst:69
msgid "What are the differences?"
msgstr ""

#: ../mastering-plone/dexterity.rst:71
msgid "Dexterity: New, faster, modular, no dark magic for getters and setters."
msgstr ""

#: ../mastering-plone/dexterity.rst:72
msgid "Archetypes had magic setter/getter - use :py:meth:`talk.getAudience()` for the field :py:attr:`audience`."
msgstr ""

#: ../mastering-plone/dexterity.rst:73
msgid "Dexterity: fields are attributes: :py:attr:`talk.audience` instead of :py:meth:`talk.getAudience()`."
msgstr ""

#: ../mastering-plone/dexterity.rst:75
msgid "\"Through The Web\" or TTW, i.e. in the browser, without programming:"
msgstr ""

#: ../mastering-plone/dexterity.rst:77
msgid "Dexterity has a good TTW story."
msgstr ""

#: ../mastering-plone/dexterity.rst:78
msgid "Archetypes has no TTW story."
msgstr ""

#: ../mastering-plone/dexterity.rst:79
msgid "UML-modeling: `ArchGenXML <https://docs.plone.org/old-reference-manuals/archgenxml/index.html>`_ for Archetypes, `agx <https://web.archive.org/web/20170411060701/http://agx.me/>`_ for Dexterity"
msgstr ""

#: ../mastering-plone/dexterity.rst:81
msgid "Approaches for Developers:"
msgstr ""

#: ../mastering-plone/dexterity.rst:83
msgid "Schema in Dexterity: TTW, XML, Python. Interface = schema, often no class needed."
msgstr ""

#: ../mastering-plone/dexterity.rst:84
msgid "Schema in Archetypes: Schema only in Python."
msgstr ""

#: ../mastering-plone/dexterity.rst:86
msgid "Dexterity: Easy permissions per field, easy custom forms."
msgstr ""

#: ../mastering-plone/dexterity.rst:87
msgid "Archetypes: Permissions per field are hard, custom forms even harder."
msgstr ""

#: ../mastering-plone/dexterity.rst:88
msgid "If you have to program for old Plone 4-based sites you still need to know Archetypes!"
msgstr ""

#: ../mastering-plone/dexterity.rst:89
msgid "If starting fresh always use Dexterity."
msgstr ""

#: ../mastering-plone/dexterity.rst:91
msgid "Extending:"
msgstr ""

#: ../mastering-plone/dexterity.rst:93
msgid "Dexterity has Behaviors: easily extendable. Just activate a behavior TTW and your content type is e.g. translatable (:py:mod:`plone.app.multilingual`)."
msgstr ""

#: ../mastering-plone/dexterity.rst:94
msgid "Archetypes has :py:mod:`archetypes.schemaextender`. Powerful but not as flexible."
msgstr ""

#: ../mastering-plone/dexterity.rst:96
msgid "We have only used Dexterity for the last few years. We teach Dexterity and not Archetypes because it's more accessible to beginners, has a great TTW story and is the future."
msgstr ""

#: ../mastering-plone/dexterity.rst:99
msgid "Views:"
msgstr ""

#: ../mastering-plone/dexterity.rst:101
msgid "Both Dexterity and Archetypes have a default view for content types."
msgstr ""

#: ../mastering-plone/dexterity.rst:102
msgid "Browser Views provide custom views."
msgstr ""

#: ../mastering-plone/dexterity.rst:103
msgid "You can generate views for content types in the browser without programming (using the :py:mod:`plone.app.mosaic` Add-on)."
msgstr ""

#: ../mastering-plone/dexterity.rst:104
msgid "Display Forms."
msgstr ""

#: ../mastering-plone/dexterity.rst:110
msgid "Modifying existing types"
msgstr ""

#: ../mastering-plone/dexterity.rst:112
msgid "Go to the control panel http://localhost:8080/Plone/@@dexterity-types"
msgstr ""

#: ../mastering-plone/dexterity.rst:113
msgid "Inspect some of the existing default types."
msgstr ""

#: ../mastering-plone/dexterity.rst:114
msgid "Select the type :guilabel:`News Item` and add a new field ``Hot News`` of type :guilabel:`Yes/No`"
msgstr ""

#: ../mastering-plone/dexterity.rst:115
msgid "In another tab, add a *News Item* and you'll see the new field."
msgstr ""

#: ../mastering-plone/dexterity.rst:116
msgid "Go back to the schema-editor and click on `Edit XML Field Model <http://localhost:8080/Plone/dexterity-types/News%20Item/@@modeleditor>`_."
msgstr ""

#: ../mastering-plone/dexterity.rst:117
msgid "Note that the only field in the XML schema of the News Item is the one we just added. All others are provided by behaviors."
msgstr ""

#: ../mastering-plone/dexterity.rst:118
msgid "Edit the form-widget-type so it says:"
msgstr ""

#: ../mastering-plone/dexterity.rst:124
msgid "Edit the News Item again. The widget changed from a radio field to a check box."
msgstr ""

#: ../mastering-plone/dexterity.rst:125
msgid "The new field ``Hot News`` is not displayed when rendering the News Item. We'll take care of this later."
msgstr ""

#: ../mastering-plone/dexterity.rst:130
msgid "https://docs.plone.org/external/plone.app.contenttypes/docs/README.html#extending-the-types"
msgstr ""

#: ../mastering-plone/dexterity.rst:135
msgid "Creating content types TTW"
msgstr ""

#: ../mastering-plone/dexterity.rst:137
msgid "In this step we will create a content type called *Talk* and try it out. When it's ready we will move the code from the web to the file system and into our own add-on. Later we will extend that type, add behaviors and a viewlet for Talks."
msgstr ""

#: ../mastering-plone/dexterity.rst:139
msgid "Add new content type \"Talk\" and some fields for it:"
msgstr ""

#: ../mastering-plone/dexterity.rst:141
msgid ":guilabel:`Add new field` \"Type of talk\", type \"Choice\". Add options: talk, keynote, training."
msgstr ""

#: ../mastering-plone/dexterity.rst:142
msgid ":guilabel:`Add new field` \"Details\", type \"Rich Text\" with a maximal length of 2000."
msgstr ""

#: ../mastering-plone/dexterity.rst:143
msgid ":guilabel:`Add new field` \"Audience\", type \"Multiple Choice\". Add options: beginner, advanced, pro."
msgstr ""

#: ../mastering-plone/dexterity.rst:144
msgid "Check the behaviors that are enabled:  *Dublin Core metadata*, *Name from title*. Do we need them all?"
msgstr ""

#: ../mastering-plone/dexterity.rst:146
msgid "Test the content type."
msgstr ""

#: ../mastering-plone/dexterity.rst:147
msgid "Return to the control panel http://localhost:8080/Plone/@@dexterity-types"
msgstr ""

#: ../mastering-plone/dexterity.rst:148
msgid "Extend the new type: add the following fields:"
msgstr ""

#: ../mastering-plone/dexterity.rst:150
msgid "\"Speaker\", type: \"Text line\""
msgstr ""

#: ../mastering-plone/dexterity.rst:151
msgid "\"Email\", type: \"Email\""
msgstr ""

#: ../mastering-plone/dexterity.rst:152
msgid "\"Image\", type: \"Image\", not required"
msgstr ""

#: ../mastering-plone/dexterity.rst:153
msgid "\"Speaker Biography\", type: \"Rich Text\""
msgstr ""

#: ../mastering-plone/dexterity.rst:155
msgid "Test again."
msgstr ""

#: ../mastering-plone/dexterity.rst:157
msgid "Here is the complete XML schema created by our actions:"
msgstr ""

#: ../mastering-plone/dexterity.rst:220
msgid "Moving contenttypes into code"
msgstr ""

#: ../mastering-plone/dexterity.rst:222
msgid "It's awesome that we can do so much through the web. But it's also a dead end if we want to reuse this content type in other sites."
msgstr ""

#: ../mastering-plone/dexterity.rst:224
msgid "Also, for professional development, we want to be able to use version control for our work, and we'll want to be able to add the kind of business logic that will require programming."
msgstr ""

#: ../mastering-plone/dexterity.rst:226
msgid "So, we'll ultimately want to move our new content type into a Python package. We're missing some skills to do that, and we'll cover those in the next couple of chapters."
msgstr ""

#: ../mastering-plone/dexterity.rst:230
msgid "`Dexterity Developer Manual <https://docs.plone.org/external/plone.app.dexterity/docs/index.html>`_"
msgstr ""

#: ../mastering-plone/dexterity.rst:231
msgid "`The standard behaviors <https://docs.plone.org/external/plone.app.dexterity/docs/reference/standard-behaviours.html>`_"
msgstr ""

#: ../mastering-plone/dexterity.rst:242
msgid "Modify Pages to allow uploading an image as decoration (like News Items do)."
msgstr ""

#: ../mastering-plone/dexterity.rst:247
msgid "Go to the dexterity control panel (http://localhost:8080/Plone/@@dexterity-types)"
msgstr ""

#: ../mastering-plone/dexterity.rst:248
msgid "Click on *Page* (http://127.0.0.1:8080/Plone/dexterity-types/Document)"
msgstr ""

#: ../mastering-plone/dexterity.rst:249
msgid "Select the tab *Behaviors* (http://127.0.0.1:8080/Plone/dexterity-types/Document/@@behaviors)"
msgstr ""

#: ../mastering-plone/dexterity.rst:250
msgid "Check the box next to :guilabel:`Lead Image` and save."
msgstr ""

#: ../mastering-plone/dexterity.rst:252
msgid "The images are displayed above the title."
msgstr ""

#: ../mastering-plone/dexterity.rst:257
msgid "Create a new content type called *Speaker* and export the schema to a XML File. It should contain the following fields:"
msgstr ""

#: ../mastering-plone/dexterity.rst:260
msgid "Title, type: \"Text Line\""
msgstr ""

#: ../mastering-plone/dexterity.rst:261
msgid "Email, type: \"Email\""
msgstr ""

#: ../mastering-plone/dexterity.rst:262
msgid "Homepage, type: \"URL\" (optional)"
msgstr ""

#: ../mastering-plone/dexterity.rst:263
msgid "Biography, type: \"Rich Text\" (optional)"
msgstr ""

#: ../mastering-plone/dexterity.rst:264
msgid "Company, type: \"Text Line\" (optional)"
msgstr ""

#: ../mastering-plone/dexterity.rst:265
msgid "Twitter Handle, type: \"Text Line\" (optional)"
msgstr ""

#: ../mastering-plone/dexterity.rst:266
msgid "IRC Handle, type: \"Text Line\" (optional)"
msgstr ""

#: ../mastering-plone/dexterity.rst:267
msgid "Image, type: \"Image\" (optional)"
msgstr ""

#: ../mastering-plone/dexterity.rst:269
msgid "Do not use the DublinCore or the Basic behavior since a speaker should not have a description (unselect it in the Behaviors tab)."
msgstr ""

#: ../mastering-plone/dexterity.rst:271
msgid "We could use this content type later to convert speakers into Plone users. We could then link them to their talks."
msgstr ""

#: ../mastering-plone/dexterity.rst:276
msgid "The schema should look like this:"
msgstr ""

#: ../mastering-plone/dexterity.rst:322
msgid "`Dexterity XML <https://docs.plone.org/external/plone.app.dexterity/docs/reference/dexterity-xml.html>`_"
msgstr ""

#: ../mastering-plone/dexterity.rst:323
msgid "`Model-driven types <https://docs.plone.org/external/plone.app.dexterity/docs/model-driven-types.html#model-driven-types>`_"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:4
msgid "Dexterity Types II: Growing Up"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:15
msgid "The existing talks are still lacking some functionality we want to use."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:17
#: ../mastering-plone/dexterity_3.rst:18
msgid "In this part we will:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:19
msgid "add a marker interface to our talk type,"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:20
msgid "create custom catalog indexes,"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:21
msgid "query the catalog for them,"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:22
msgid "enable some more default features for our type."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:28
msgid "Add a marker interface to the talk type"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:31
msgid "Marker Interfaces"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:33
msgid "The content type `Talk` is not yet a *first class citizen* because it does not implement its own interface. Interfaces are like nametags, telling other elements who and what you are and what you can do. A marker interface is like such a nametag. The talks actually have an auto-generated marker interface ``plone.dexterity.schema.generated.Plone_0_talk``."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:36
msgid "One problem is that the name of the Plone instance ``Plone`` is part of that interface name. If you now moved these types to a site with another name the code that uses these interfaces would no longer find the objects in question."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:38
msgid "To create a real name-tag we add a new :py:class:`Interface` to :file:`interfaces.py`:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:58
msgid ":py:class:`ITalk` is a marker interface. We can bind Views and Viewlets to content that provide these interfaces. Lets see how we can provide this Interface. There are two solutions for this."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:60
msgid "Let them be instances of a class that implements this Interface."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:61
msgid "Register this interface as a behavior and enable it on talks."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:63
msgid "The first option has an important drawback: only *new* talks would be instances of the new class. We would either have to migrate the existing talks or delete them."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:65
msgid "So let's register the interface as a behavior in :file:`behaviors/configure.zcml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:75
msgid "And enable it on the type in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:88
msgid "Either reinstall the add-on, apply the behavior by hand or run an upgrade step (see below) and the interface will be there."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:90
msgid "Then we can safely bind the ``talkview`` to the new marker interface."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:104
msgid "Now the ``/talkview`` can only be used on objects that implement said interface. We can now also query the catalog for objects providing this interface :py:meth:`catalog(object_provides=\"ploneconf.site.interfaces.ITalk\")`. The ``talklistview`` and the ``demoview`` do not get this constraint since they are not only used on talks."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:108
msgid "Just for completeness sake, this is what would have to happen for the first option (associating the :py:class:`ITalk` interface with a :py:class:`Talk` class):"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:110
msgid "Create a new class that inherits from :py:class:`plone.dexterity.content.Container` and implements the marker interface."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:122
msgid "Modify the class for new talks in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:134
msgid "Create an upgrade step that changes the class of the existing talks. A reuseable method to do such a thing is in `plone.app.contenttypes.migration.dxmigration.migrate_base_class_to_new_class <https://github.com/plone/plone.app.contenttypes/blob/master/plone/app/contenttypes/migration/dxmigration.py#L130>`_."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:139
msgid "Upgrade steps"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:141
msgid "When projects evolve you sometimes want to modify various things while the site is already up and brimming with content and users. Upgrade steps are pieces of code that run when upgrading from one version of an add-on to a newer one. They can do just about anything. We will use an upgrade-step to enable the new behavior instead of reinstalling the addon."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:144
msgid "We will create an upgrade step that:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:146
msgid "runs the typeinfo step (i.e. loads the GenericSetup configuration stored in ``profiles/default/types.xml`` and ``profiles/default/types/...`` so we don't have to reinstall the add-on to have our changes from above take effect) and"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:147
msgid "cleans up the talks that might be scattered around the site in the early stages of creating it. We will move all talks to a folder ``talks`` (unless they already are there)."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:149
msgid "Upgrade steps can be registered in their own ZCML file to prevent cluttering the main :file:`configure.zcml`. Include a new :file:`upgrades.zcml` in our :file:`configure.zcml` by adding:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:155
msgid "Create :file:`upgrades.zcml`:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:178
msgid "The upgrade step bumps the version number of the GenericSetup profile of :py:mod:`ploneconf.site` from 1000 to 1001. The version is stored in :file:`profiles/default/metadata.xml`. Change it to"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:184
msgid "GenericSetup now expects the code as a method :py:meth:`upgrade_site` in the file :file:`upgrades.py`. Let's create it."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:237
#: ../mastering-plone/registry.rst:241
msgid "Note:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:239
msgid "Upgrade-steps get the tool ``portal_setup`` passed as their argument."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:240
msgid "The ``portal_setup`` tool has a method :py:meth:`runImportStepFromProfile`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:241
msgid "We create the needed folder-structure if it does not exists."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:243
msgid "After restarting the site we can run the step:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:245
msgid "Go to the :guilabel:`Add-ons` control panel http://localhost:8080/Plone/prefs_install_products_form. There should now be a new section **Upgrades** and a button to upgrade from 1000 to 1001."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:247
msgid "Run the upgrade step by clicking on it."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:249
msgid "On the console you should see logging messages like::"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:253
msgid "Alternatively you also select which upgrade steps to run like this:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:255
msgid "In the ZMI go to *portal_setup*"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:256
msgid "Go to the tab :guilabel:`Upgrades`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:257
msgid "Select :guilabel:`ploneconf.site` from the dropdown and click :guilabel:`Choose profile`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:258
msgid "Run the upgrade step."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:262
msgid "https://docs.plone.org/develop/addons/components/genericsetup.html#id1"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:267
msgid "Upgrading from an older version of Plone to a newer one also runs upgrade steps from the package :py:mod:`plone.app.upgrade`. You should be able to upgrade a clean site from 2.5 to 5.0 with one click."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:269
msgid "For an example see the upgrade-step to Plone 5.0a1 https://github.com/plone/plone.app.upgrade/blob/master/plone/app/upgrade/v50/alphas.py#L37"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:276
msgid "Add a browserlayer"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:278
msgid "A browserlayer is another such marker interface. Browserlayers allow us to easily enable and disable views and other site functionality based on installed add-ons and themes."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:280
msgid "Since we want the features we write only to be available when :py:mod:`ploneconf.site` actually is installed we can bind them to a browserlayer."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:282
msgid "Our package already has a browserlayer (added by :py:mod:`bobtemplates.plone`). See :file:`interfaces.py`:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:303
msgid "It is enabled by GenericSetup when installing the package since it is registered in the :file:`profiles/default/browserlayer.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:315
msgid "We should bind all views to it. Here is an example using the talkview."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:329
msgid "Note the relative Python path :py:class:`..interfaces.IPloneconfSiteLayer`. It is equivalent to the absolute path :py:class:`ploneconf.site.interfaces.IPloneconfSiteLayer`."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:333
msgid "https://docs.plone.org/develop/plone/views/layers.html"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:339
msgid "Do you need to bind the :ref:`viewlets1-social2-label` from the chapter 'Writing Viewlets' to this new browser layer?"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:344
msgid "No, it would make no difference since the viewlet is already bound to the marker interface :py:class:`ploneconf.site.behaviors.social.ISocial`."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:349
msgid "Add catalog indexes"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:351
msgid "In the ``talklistview`` we had to wake up all objects to access some of their attributes. That is OK if we don't have many objects and they are light dexterity objects. If we had thousands of objects this might not be a good idea."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:354
msgid "Instead of loading them all into memory we will use catalog indexes to get the data we want to display."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:356
msgid "Add a new file :file:`profiles/default/catalog.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:378
msgid "This adds new indexes for the three fields we want to show in the listing. Note that *audience* is a :py:class:`KeywordIndex` because the field is multi-valued, but we want a separate index entry for every value in an object."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:380
msgid "The ``column ..`` entries allow us to display the values of these indexes in the tableview of collections."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:382
msgid "Reinstall the add-on"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:383
msgid "Go to http://localhost:8080/Plone/portal_catalog/manage_catalogAdvanced to update the catalog"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:384
msgid "Go to http://localhost:8080/Plone/portal_catalog/manage_catalogIndexes to inspect and manage the new indexes"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:388
msgid "https://docs.plone.org/develop/plone/searching_and_indexing/indexing.html"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:392
msgid "The new indexes are still empty. We'll have to reindex them. To do so by hand go to http://localhost:8080/Plone/portal_catalog/manage_catalogIndexes, select the new indexes and click :guilabel:`Reindex`. We could also rebuild the whole catalog by going to the :guilabel:`advanced`-tab and clicking :guilabel:`Clear and Rebuild`. For large sites that can take a long time."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:394
msgid "We could also write an upgrade step to enable the catalog-indexes and reindex all talks:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:408
msgid "Query for custom indexes"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:410
msgid "The new indexes behave like the ones that Plone has already built in:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:424
msgid "We now can use the new indexes to improve the talklistview so we don't have to *wake up* the objects any more. Instead we use the brains' new attributes."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:449
msgid "The template does not need to be changed and the result in the browser did not change, either. But when listing a large number of objects the site will now be faster since all the data you use comes from the catalog and the objects do not have to be loaded into memory."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:457
msgid "In fact we could now simplify the view even further by only returning the brains."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:459
msgid "Modify :py:class:`TalkListView` to return only brains and adapt the template to these changes. Remember to move ``', '.join(brain.audience or [])`` into the template."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:464
msgid "Here is the class:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:477
msgid "Here is the template:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:532
msgid "Add collection criteria"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:534
msgid "To be able to search content in collections using these new indexes we would have to register them as criteria for the querystring widget that collections use. As with all features make sure you only do this if you really need it!"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:537
msgid "Add a new file :file:`profiles/default/registry.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:580
msgid "https://docs.plone.org/develop/plone/functionality/collections.html#add-new-collection-criteria-new-style-plone-app-collection-installed"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:586
msgid "Add versioning through GenericSetup"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:588
msgid "Configure the versioning policy and a diff-view for talks through GenericSetup."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:590
msgid "Add new file :file:`profiles/default/repositorytool.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:606
msgid "Add new file :file:`profiles/default/diff_tool.xml`"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:620
msgid "Finally you need to activate the versioning behavior on the content type. Edit :file:`profiles/default/types/talk.xml`:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:636
msgid "There is currently a bug that breaks showing diffs when multiple-choice fields were changed."
msgstr ""

#: ../mastering-plone/dexterity_2.rst:642
msgid "The talks are now grown up:"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:644
msgid "They provide a interface to which you can bind features like views"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:645
msgid "Some fields are indexed in the catalog making the listing faster"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:646
msgid "Talks are now versioned"
msgstr ""

#: ../mastering-plone/dexterity_2.rst:647
msgid "You wrote your first upgrade-step to move the talks around: Whopee!"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:4
msgid "Dexterity Types III: Python"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:15
msgid "Without sponsors, a conference would be hard to finance! Plus it is a good opportunity for Plone companies to advertise their services. But sponsors want to be displayed in a nice way according to the size of their sponsorship."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:20
msgid "create the content type *sponsor* that has a Python schema,"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:21
msgid "create a viewlet that shows the sponsor logos sorted by sponsoring level."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:24
#: ../mastering-plone/frontpage.rst:22
msgid "The topics we cover are:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:26
msgid "Python schema for Dexterity"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:27
msgid "schema hint and directives"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:28
msgid "field permissions"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:29
msgid "image scales"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:30
msgid "caching"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:34
msgid "The Python schema"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:36
msgid "First we create the schema for the new type. Instead of XML, we use Python this time. In chapter :ref:`export_code-label` you already created a folder :file:`content` with an empty :file:`__init__.py` in it. We don't need to register that folder in :file:`configure.zcml` since we don't need a :file:`content/configure.zcml` (at least not yet)."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:40
msgid "Now add a new file :file:`content/sponsor.py`."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:105
msgid "Some things are notable here:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:107
msgid "The fields in the schema are mostly from :py:mod:`zope.schema`. A reference of available fields is at https://docs.plone.org/external/plone.app.dexterity/docs/reference/fields.html"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:108
msgid "In :samp:`directives.widget(level=RadioFieldWidget)` we change the default widget for a Choice field from a dropdown to radio-boxes. An incomplete reference of available widgets is at https://docs.plone.org/external/plone.app.dexterity/docs/reference/widgets.html"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:109
msgid ":py:class:`LevelVocabulary` is used to create the options used in the field ``level``. This way we could easily translate the displayed value."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:110
msgid ":samp:`fieldset('Images', fields=['logo', 'advertisement'])` moves the two image fields to another tab."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:111
msgid ":samp:`directives.read_permission(...)` sets the read and write permission for the field ``notes`` to users who can add new members. Usually this permission is only granted to Site Administrators and Managers. We use it to store information that should not be publicly visible. Please note that :py:attr:`obj.notes` is still accessible in templates and Python. Only using the widget (like we do in the view later) checks for the permission."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:112
msgid "We use no grok here."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:116
msgid "`All available Fields <https://docs.plone.org/external/plone.app.dexterity/docs/reference/fields.html#field-types>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:117
msgid "`Schema-driven types with Dexterity <https://docs.plone.org/external/plone.app.dexterity/docs/schema-driven-types.html#schema-driven-types>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:118
#: ../mastering-plone/dexterity_3.rst:269
msgid "`Form schema hints and directives <https://docs.plone.org/external/plone.app.dexterity/docs/reference/form-schema-hints.html>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:122
msgid "Directives"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:124
msgid "Directives can be placed anywhere in the class body (annotations are made directly on the class). By convention they are kept next to the fields they apply to."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:126
msgid "For example, here is a schema that omits a field:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:143
msgid "You can also handle multiple fields with one directive:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:149
msgid "With the directive \"mode\" you can set fields to 'input', 'display' or 'hidden'."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:155
msgid "You can apply directives to certain forms only. Here we drop a field from the add-form, it will still show up in the edit-form."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:171
msgid "The same works for custom forms."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:173
msgid "With the directive :py:meth:`widget` you can not only change the widget used for a field. With :py:data:`pattern_options` you can pass additional parameters to the widget. Here we configure the datetime-widget powered by the js-library `pickadate <http://amsul.ca/pickadate.js>`_  by adding options that are used by it. Plone only passes the options to the library."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:192
msgid "Validation and default values"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:194
msgid "In the following example we add a validator and a default value."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:221
msgid "Validators and defaults can be also be made aware of the context (i.e. to check against the values of other fields)."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:223
msgid "For context aware defaults you need to use a :py:class:`IContextAwareDefaultFactory`. It will be passed the container for which the add form is being displayed:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:242
msgid "For context-aware validators you need to use :py:meth:`invariant`:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:267
msgid "To learn more about directives, validators and default values read:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:270
msgid "`Validation <https://docs.plone.org/develop/addons/schema-driven-forms/customising-form-behaviour/validation.html>`_ (these docs still use grok-examples)"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:271
msgid "`z3c.form documentation <https://pypi.org/project/z3c.form#validators>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:272
msgid "`Default values for fields on add forms <https://docs.plone.org/external/plone.app.dexterity/docs/advanced/defaults.html>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:276
msgid "The FTI"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:278
msgid "Second we create the FTI for the new type in :file:`profiles/default/types/sponsor.xml`"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:329
msgid "Then we register the FTI in :file:`profiles/default/types.xml`"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:343
msgid "After reinstalling our package we can create the new type."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:349
msgid "Sponsors are containers but they don't need to be. Turn them into items by changing their class to :py:class:`plone.dexterity.content.Item`."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:354
msgid "Simply modify the property ``klass`` in the FTI and reinstall."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:363
msgid "The view"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:365
msgid "We use the default view provided by dexterity for testing since we will only display the sponsors in a viewlet and not in their own page."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:367
msgid "But we could tweak the default view with some CSS to make it less ugly. Add the following to :file:`resources/ploneconf.css`:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:382
msgid "If we really want a custom view for sponsors it could look like this."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:425
msgid "Note how we handle the field with special permissions: :samp:`tal:condition=\"python: 'notes' in view.w\"` checks if the convenience-dictionary :py:data:`w` (provided by the base class :py:class:`DefaultView`) holds the widget for the field ``notes``. If the current user does not have the permission :py:mod:`cmf.ManagePortal` it will be omitted from the dictionary and get an error since ``notes`` would not be a key in :py:data:`w`. By first checking if it's missing we work around that."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:430
msgid "The viewlet"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:432
msgid "Instead of writing a view you will have to display the sponsors at the bottom of the website in a viewlet."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:434
#: ../mastering-plone/viewlets_1.rst:161
msgid "Register the viewlet in :file:`browser/configure.zcml`"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:449
msgid "Add the viewlet class in :file:`browser/viewlets.py`"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:519
msgid ":py:meth:`_sponsors` returns a list of dictionaries containing all necessary info about sponsors."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:520
msgid "We create the complete img tag using a custom scale (200x80) using the view ``images`` from :py:mod:`plone.namedfile.` This actually scales the logos and saves them as new blobs."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:521
msgid "In :py:meth:`sponsors` we return an ordered dictionary of randomized lists of dicts (containing the information on sponsors). The order is by sponsor-level since we want the platinum-sponsors on top and the bronze-sponsors at the bottom. The randomization is for fairness among equal sponsors."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:523
msgid ":py:meth:`_sponsors` is cached for an hour using `plone.memoize <https://docs.plone.org/manage/deploying/performance/decorators.html#timeout-caches>`_. This way we don't need to keep all sponsor objects in memory all the time. But we'd have to wait for up to an hour until changes will be visible."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:525
msgid "Instead we should cache until one of the sponsors is modified by using a callable :py:func:`_sponsors_cachekey` that returns a number that changes when a sponsor is modified."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:542
msgid "`Guide to Caching <https://docs.plone.org/manage/deploying/caching/index.html>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:543
msgid "`Cache decorators <https://docs.plone.org/manage/deploying/performance/decorators.html>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:544
msgid "`Image Scaling <https://docs.plone.org/develop/plone/images/content.html#creating-scales>`_"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:548
msgid "The template for the viewlet"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:550
msgid "Add the template :file:`browser/templates/sponsors_viewlet.pt`"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:583
msgid "You can now add some CSS in :file:`browser/static/ploneconf.css` to make it look OK."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:599
msgid "Result:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:605
msgid "The result of the newly created content type."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:611
msgid "Turn the content type Speaker from :ref:`Exercise 2 of the first chapter on dexterity <dexterity1-excercises-label>` into a Python-based type."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:613
msgid "When we're done, it should have the following fields:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:615
msgid "title"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:616
msgid "email"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:617
msgid "homepage"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:618
msgid "biography"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:619
msgid "company"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:620
msgid "twitter_name"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:621
msgid "irc_name"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:622
msgid "image"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:624
msgid "Do *not* use the :py:class:`IBasic` or :py:class:`IDublinCore` behavior to add title and description. Instead add your own field ``title`` and give it the title *Name*."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:687
msgid "Register the type in :file:`profiles/default/types.xml`"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:702
msgid "The FTI goes in :file:`profiles/default/types/speaker.xml`. Again we use :py:class:`Item` as the base-class:"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:751
msgid "After reinstalling the package the new type is usable."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:755
#: ../mastering-plone/features.rst:119
msgid "Exercise 3"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:757
msgid "This is more of a Python exercise. The gold- and bronze sponsors should also have a bigger logo than the others. Scale the sponsors logos to the following logo-sizes without using CSS."
msgstr ""

#: ../mastering-plone/dexterity_3.rst:759
msgid "Platinum: 500x200"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:760
msgid "Gold: 350x150"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:761
msgid "Silver: 200x80"
msgstr ""

#: ../mastering-plone/dexterity_3.rst:762
msgid "Bronze: 150x60"
msgstr ""

#: ../mastering-plone/eggs1.rst:4
msgid "Write Your Own Add-Ons to Customize Plone"
msgstr ""

#: ../mastering-plone/eggs1.rst:19
msgid "Create a custom Python package :py:mod:`ploneconf.site` to hold all the code"
msgstr ""

#: ../mastering-plone/eggs1.rst:20
msgid "Modify buildout to install that package"
msgstr ""

#: ../mastering-plone/eggs1.rst:25
msgid ":py:mod:`mr.bob` and :py:mod:`bobtemplates.plone`"
msgstr ""

#: ../mastering-plone/eggs1.rst:26
msgid "the structure of python packages"
msgstr ""

#: ../mastering-plone/eggs1.rst:30
msgid "Creating the package"
msgstr ""

#: ../mastering-plone/eggs1.rst:32
msgid "Your own code has to be organized as a `Python package <https://docs.python.org/2/tutorial/modules.html#packages>`_. An python package is directory that follows certain conventions to hold python modules."
msgstr ""

#: ../mastering-plone/eggs1.rst:34
msgid "We are going to use `bobtemplates.plone <https://pypi.org/project/bobtemplates.plone>`_ to create a skeleton package. You only need to fill in the blanks."
msgstr ""

#: ../mastering-plone/eggs1.rst:36
msgid ":py:mod:`bobtemplates.plone` offers several Plone-specific templates for :py:mod:`mr.bob`, a project template builder similar to :py:mod:`cookiecutter`."
msgstr ""

#: ../mastering-plone/eggs1.rst:38
msgid "Enter the :file:`src` directory (*src* is short for *sources*) and call a script called :command:`mrbob` from our buildout's :file:`bin` directory:"
msgstr ""

#: ../mastering-plone/eggs1.rst:47
msgid "Before version 2.0.0 of :py:mod:`bobtemplates.plone` the command to create a addon was different:"
msgstr ""

#: ../mastering-plone/eggs1.rst:53
msgid "You have to answer some questions about the add-on. Press :kbd:`Enter` (i.e. choosing the default value) for all questions except 3 (where you enter your GitHub username if you have one) and 5 (Plone version), where you enter :kbd:`5.1`::"
msgstr ""

#: ../mastering-plone/eggs1.rst:69
msgid "If this is your first python package, this is a very special moment."
msgstr ""

#: ../mastering-plone/eggs1.rst:71
msgid "You generated a package with a lot files. It might look like too much boilerplate but all files in this package serve a clear purpose and it will take some time to learn about the meaning of each of them."
msgstr ""

#: ../mastering-plone/eggs1.rst:75
msgid "Eggs"
msgstr ""

#: ../mastering-plone/eggs1.rst:77
msgid "When a python package is production-ready you can choose to distribute it as an egg over the python package index, `pypi <https://pypi.org>`_. This allows everyone to install and use your package without having to download the code from github. The over 260 python packages that are used by your current Plone instance are also distributed as eggs."
msgstr ""

#: ../mastering-plone/eggs1.rst:83
msgid "Inspecting the package"
msgstr ""

#: ../mastering-plone/eggs1.rst:85
msgid "In :file:`src` there is now a new folder :file:`ploneconf.site` and in there is the new package. Let's have a look at some of the files:"
msgstr ""

#: ../mastering-plone/eggs1.rst:88
msgid ":file:`buildout.cfg`, :file:`.travis.yml`, :file:`.coveragerc`, :file:`requirements.txt`, :file:`MANIFEST.in`, :file:`.gitignores`, :file:`.gitattributes`,"
msgstr ""

#: ../mastering-plone/eggs1.rst:88
msgid "You can ignore these files for now. They are here to create a buildout only for this package to make distributing and testing it easier."
msgstr ""

#: ../mastering-plone/eggs1.rst:91
msgid ":file:`README.rst`, :file:`CHANGES.rst`, :file:`CONTRIBUTORS.rst`, :file:`DEVELOP.rst`, :file:`docs/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:91
msgid "The documentation of your package goes in here."
msgstr ""

#: ../mastering-plone/eggs1.rst:94
msgid ":file:`setup.py`"
msgstr ""

#: ../mastering-plone/eggs1.rst:94
msgid "This file configures the package, its name, dependencies and some metadata like the author's name and email address. The dependencies listed here are automatically downloaded when running buildout."
msgstr ""

#: ../mastering-plone/eggs1.rst:101
msgid ":file:`src/ploneconf/site/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:97
msgid "The python code of your package itself lives inside a special folder structure. That seems confusing but is necessary for good testability. Our package contains a `namespace package <https://www.python.org/dev/peps/pep-0420/>`_ called *ploneconf.site* and because of this there is a folder :file:`ploneconf` with a :file:`__init__.py` and in there another folder :file:`site` and in there finally is our code. From the buildout's perspective your code is in :file:`{your buildout directory}/src/ploneconf.site/src/ploneconf/site/{real code}`"
msgstr ""

#: ../mastering-plone/eggs1.rst:105
msgid "Unless discussing the buildout we will from now on silently omit these folders when describing files and assume that :file:`{your buildout directory}/src/ploneconf.site/src/ploneconf/site/` is the root of our package!"
msgstr ""

#: ../mastering-plone/eggs1.rst:109
msgid ":file:`configure.zcml` (:file:`src/ploneconf/site/configure.zcml`)"
msgstr ""

#: ../mastering-plone/eggs1.rst:109
msgid "The phone book of the distribution. By reading it you can find out which functionality is registered using the component architecture. There are more registrations in other zcml-files in this addons (e.g. :file:`browser/configure.zcml`, :file:`upgrades.zcml` and :file:`permissions.zcml`) that are included in your main :file:`browser/configure.zcml`"
msgstr ""

#: ../mastering-plone/eggs1.rst:112
msgid ":file:`setuphandlers.py` (:file:`src/ploneconf/site/setuphandlers.py`)"
msgstr ""

#: ../mastering-plone/eggs1.rst:112
msgid "This holds code that is automatically run when installing and uninstalling our add-on."
msgstr ""

#: ../mastering-plone/eggs1.rst:115
msgid ":file:`interfaces.py` (:file:`src/ploneconf/site/interfaces.py`)"
msgstr ""

#: ../mastering-plone/eggs1.rst:115
msgid "Here a browserlayer is defined in a straightforward python class. We will need it later."
msgstr ""

#: ../mastering-plone/eggs1.rst:118
msgid ":file:`testing.py`"
msgstr ""

#: ../mastering-plone/eggs1.rst:118
msgid "This holds the setup for running tests."
msgstr ""

#: ../mastering-plone/eggs1.rst:121
msgid ":file:`tests/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:121
msgid "This holds the tests."
msgstr ""

#: ../mastering-plone/eggs1.rst:125
msgid ":file:`browser/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:124
msgid "This directory is a python package (because it has a :file:`__init__.py`) and will by convention hold most things that are visible in the browser."
msgstr ""

#: ../mastering-plone/eggs1.rst:128
msgid ":file:`browser/configure.zcml`"
msgstr ""

#: ../mastering-plone/eggs1.rst:128
msgid "The phonebook of the browser package. Here views, resources and overrides are registered."
msgstr ""

#: ../mastering-plone/eggs1.rst:131
msgid ":file:`browser/overrides/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:131
msgid "This folder is here to allow overriding existing default Plone templates."
msgstr ""

#: ../mastering-plone/eggs1.rst:134
msgid ":file:`browser/static/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:134
msgid "A directory that holds static resources (images/css/js). The files in here will be accessible through URLs like ``++resource++ploneconf.site/myawesome.css``"
msgstr ""

#: ../mastering-plone/eggs1.rst:137
msgid ":file:`locales/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:137
msgid "This directory can hold translations of text used in the package to allow for multiple languages of your user-interface."
msgstr ""

#: ../mastering-plone/eggs1.rst:140
msgid ":file:`profiles/default/`"
msgstr ""

#: ../mastering-plone/eggs1.rst:140
msgid "This folder contains the GenericSetup profile. During the training we will put some XML files here that hold configuration for the site."
msgstr ""

#: ../mastering-plone/eggs1.rst:143
msgid ":file:`profiles/default/metadata.xml`"
msgstr ""

#: ../mastering-plone/eggs1.rst:143
msgid "Version number and dependencies that are auto-installed when installing our add-on."
msgstr ""

#: ../mastering-plone/eggs1.rst:152
msgid "Including the package in Plone"
msgstr ""

#: ../mastering-plone/eggs1.rst:154
msgid "Before we can use our new package we have to tell Plone about it. Look at :file:`buildout.cfg` and see how ``ploneconf.site`` is included in `auto-checkout`, `eggs` and `test`:"
msgstr ""

#: ../mastering-plone/eggs1.rst:198
msgid "This tells Buildout to add the egg :py:mod:`ploneconf.site`. The sources for this eggs are defined in the section ``[sources]`` at the bottom of :file:`buildout.cfg`."
msgstr ""

#: ../mastering-plone/eggs1.rst:207
msgid "This tells buildout to not download it from pypi but to do a checkout from GitHub put the code in :file:`src/ploneconf.site`."
msgstr ""

#: ../mastering-plone/eggs1.rst:211
msgid "The package :py:mod:`ploneconf.site` is now downloaded from GitHub and automatically in the branch master. :py:mod:`ploneconf.site` can be called an egg even though it has not been released on pypi. Plone can use it like it uses an egg."
msgstr ""

#: ../mastering-plone/eggs1.rst:215
msgid "If you do **not** want to use the prepared package for ploneconf.site from GitHub but write it yourself (we suggest you try that) then add the following instead:"
msgstr ""

#: ../mastering-plone/eggs1.rst:224
msgid "This tells buildout to expect `ploneconf.site` in :file:`src/ploneconf.site`. The directive ``fs`` allows you to add eggs on the filesystem without a version control system."
msgstr ""

#: ../mastering-plone/eggs1.rst:227
msgid "Now run buildout to reconfigure Plone with the updated configuration:"
msgstr ""

#: ../mastering-plone/eggs1.rst:233
msgid "After restarting Plone with :command:`./bin/instance fg` the new add-on :py:mod:`ploneconf.site` is available for install like EasyForm or Plone True Gallery."
msgstr ""

#: ../mastering-plone/eggs1.rst:235
msgid "We will not install it now since we did not add any of our own code or configuration yet. Let's do that next."
msgstr ""

#: ../mastering-plone/eggs1.rst:241
msgid "Create a new package called :py:mod:`collective.behavior.myfeature`. Inspect the directory structure of this package. Delete it after you are done. Many packages that are part of Plone and some add-ons use a nested namespace such as :py:mod:`plone.app.contenttypes`."
msgstr ""

#: ../mastering-plone/eggs1.rst:243
msgid "Open https://github.com/plone/bobtemplates.plone and read about the templates and subtemplates it provides."
msgstr ""

#: ../mastering-plone/eggs1.rst:249
msgid "You created the package * :py:mod:`ploneconf.site` to hold your code."
msgstr ""

#: ../mastering-plone/eggs1.rst:250
msgid "You added the new package to buildout so that Plone can use it."
msgstr ""

#: ../mastering-plone/eggs2.rst:4
msgid "Creating Reusable Packages"
msgstr ""

#: ../mastering-plone/eggs2.rst:6
msgid "We already created the package :py:mod:`ploneconf.site`  much earlier."
msgstr ""

#: ../mastering-plone/eggs2.rst:10
msgid "Build your own standalone egg."
msgstr ""

#: ../mastering-plone/eggs2.rst:14
msgid ":py:mod:`mr.bob`"
msgstr ""

#: ../mastering-plone/eggs2.rst:17
msgid "Now you are going to create a feature that is independent of the ploneconf site and can be reused in other packages."
msgstr ""

#: ../mastering-plone/eggs2.rst:19
msgid "To make the distinction clear, this is not a package from the namespace :samp:`ploneconf` but from :samp:`starzel`."
msgstr ""

#: ../mastering-plone/eggs2.rst:21
msgid "We are going to add a voting behavior."
msgstr ""

#: ../mastering-plone/eggs2.rst:23
msgid "For this we need:"
msgstr ""

#: ../mastering-plone/eggs2.rst:25
msgid "A behavior that stores its data in annotations"
msgstr ""

#: ../mastering-plone/eggs2.rst:26
msgid "A viewlet to present the votes"
msgstr ""

#: ../mastering-plone/eggs2.rst:27
msgid "A bit of JavaScript"
msgstr ""

#: ../mastering-plone/eggs2.rst:28
msgid "A bit of CSS"
msgstr ""

#: ../mastering-plone/eggs2.rst:29
msgid "Some helper views so that the JavaScript code can communicate with Plone"
msgstr ""

#: ../mastering-plone/eggs2.rst:31
msgid "We move to the :file:`src` directory and again use a script called :file:`mrbob` from our project's :file:`bin` directory and the template from ``bobtemplates.plone`` to create the package."
msgstr ""

#: ../mastering-plone/eggs2.rst:40
msgid "We press :kbd:`Enter` to all questions *except* our personal data and the Plone version. Here we enter :kbd:`5.0a3`."
msgstr ""

#: ../mastering-plone/embed.rst:4
msgid "Using starzel.votable_behavior in ploneconf.site"
msgstr ""

#: ../mastering-plone/embed.rst:8
msgid "Integrate your own third party package into your site."
msgstr ""

#: ../mastering-plone/embed.rst:12
#: ../mastering-plone/reusable.rst:12
msgid "Permissions"
msgstr ""

#: ../mastering-plone/embed.rst:13
#: ../mastering-plone/features.rst:431
msgid "Workflows"
msgstr ""

#: ../mastering-plone/embed.rst:18
msgid "Get the code for this chapter (:doc:`More info <code>`) using this command in the buildout directory:"
msgstr ""

#: ../mastering-plone/embed.rst:27
msgid "We want to use the votable behavior, so that our reviewers can vote."
msgstr ""

#: ../mastering-plone/embed.rst:28
msgid "To show how to use events, we are going to auto-publish talks that have reached a certain rating."
msgstr ""

#: ../mastering-plone/embed.rst:29
msgid "We are not going to let everybody vote everything."
msgstr ""

#: ../mastering-plone/embed.rst:31
msgid "First, we must add our package as a dependency to ploneconf.site."
msgstr ""

#: ../mastering-plone/embed.rst:35
msgid "We do this in two locations. The egg description :file:`setup.py` needs :samp:`starzel.votable_behavior` as a dependency. Else no source code will be available."
msgstr ""

#: ../mastering-plone/embed.rst:38
msgid "The persistent configuration needs to be installed when we install our site. This is configured in GenericSetup."
msgstr ""

#: ../mastering-plone/embed.rst:40
msgid "We start by editing :file:`setup.py`"
msgstr ""

#: ../mastering-plone/embed.rst:58
msgid "Next up we modify :file:`profiles/default/metadata.xml`"
msgstr ""

#: ../mastering-plone/embed.rst:73
msgid "What a weird name. profile- is a prefix you will always need nowadays. Then comes the egg name, and the part after the colon is the name of the profile. The name of the profile is defined in zcml. So far I've stumbled over only one package where the profile directory name was different than the GenericSetup Profile name."
msgstr ""

#: ../mastering-plone/embed.rst:75
msgid "Now the package is there, but nothing is votable. That is because no content type declares to use this behavior. We can add this behavior via the control panel, export the settings and store it in our egg. Let's just add it by hand now."
msgstr ""

#: ../mastering-plone/embed.rst:77
msgid "To add the behavior to talks, we do this in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../mastering-plone/embed.rst:81
msgid "After changing the :file:`metadata.xml` you have to restart your site since unlike other GenericSetup XML files that file is cached."
msgstr ""

#: ../mastering-plone/embed.rst:83
msgid "Managing dependencies in :file:`metadata.xml` is good practice. We can't rely on remembering what we'd have to do by hand. In Plone 4 we should also have added :samp:`<dependency>profile-plone.app.contenttypes:plone-content</dependency>` like the `documentation for plone.app.contenttypes <https://docs.plone.org/external/plone.app.contenttypes/docs/README.html#installation-as-a-dependency-from-another-product>`_ recommends."
msgstr ""

#: ../mastering-plone/embed.rst:86
msgid "Read more: https://docs.plone.org/develop/addons/components/genericsetup.html#dependencies"
msgstr ""

#: ../mastering-plone/embed.rst:100
msgid "Now you can reinstall your Plone site."
msgstr ""

#: ../mastering-plone/embed.rst:102
msgid "Everybody can now vote on talks. That's not what we wanted. We only want reviewers to vote on *pending* Talks. This means the permission has to change depending on the workflow state. Luckily, workflows can be configured to do just that. Since Talks already have their own workflow we also won't interfere with other content."
msgstr ""

#: ../mastering-plone/embed.rst:106
msgid "First, we have to tell the workflow that it will be managing more permissions. Next, for each state we have to configure which role has the two new permissions."
msgstr ""

#: ../mastering-plone/embed.rst:108
msgid "That is a very verbose configuration, maybe you want to do it in the web interface and export the settings. Whichever way you choose, it is easy to make a simple mistake. I will just present the XML way here."
msgstr ""

#: ../mastering-plone/embed.rst:111
msgid "The config for the Workflow is in :file:`profiles/default/workfows/talks_workflow.xml`"
msgstr ""

#: ../mastering-plone/embed.rst:169
msgid "We have to reinstall our product again."
msgstr ""

#: ../mastering-plone/embed.rst:171
msgid "But this time, this is not enough. Permissions get updated on workflow changes. As long as a workflow change didn't happen, the talks have the same permissions as ever."
msgstr ""

#: ../mastering-plone/embed.rst:173
msgid "Luckily, there is a button for that in the ZMI Workflow view :guilabel:`Update security settings`."
msgstr ""

#: ../mastering-plone/embed.rst:175
msgid "After clicking on this, only managers and Reviewers can see the Voting functionality."
msgstr ""

#: ../mastering-plone/embed.rst:177
msgid "Lastly, we add our silly function to auto-approve talks."
msgstr ""

#: ../mastering-plone/embed.rst:179
msgid "You quickly end up writing many event handlers, so we put everything into a directory for eventhandlers."
msgstr ""

#: ../mastering-plone/embed.rst:181
msgid "For the events we need an :file:`events` directory."
msgstr ""

#: ../mastering-plone/embed.rst:183
msgid "Create the :file:`events` directory and add an empty :file:`events/__init__.py` file."
msgstr ""

#: ../mastering-plone/embed.rst:185
msgid "Next, register the events directory in :file:`configure.zcml`"
msgstr ""

#: ../mastering-plone/embed.rst:192
msgid "Now write the ZCML configuration for the events into :file:`events/configure.zcml`"
msgstr ""

#: ../mastering-plone/embed.rst:211
msgid "This looks like a MultiAdapter. We want to get notified when an IVotable object gets modified. Our method will receive the votable object and the event itself."
msgstr ""

#: ../mastering-plone/embed.rst:213
msgid "And finally, our event handler in :file:`events/votable.py`"
msgstr ""

#: ../mastering-plone/embed.rst:231
msgid "We are using a lot of plone api here. Plone API makes the code a breeze. Also, there is nothing really interesting. We will only do something if the workflow state is pending and the average vote is above 0.5. As you can see, the :samp:`transition` Method does not want the target state, but the transition to move the state to the target state."
msgstr ""

#: ../mastering-plone/embed.rst:235
msgid "There is nothing special going on."
msgstr ""

#: ../mastering-plone/events.rst:4
msgid "Turning Talks into Events"
msgstr ""

#: ../mastering-plone/events.rst:15
msgid "We forgot something: A list of talks is great especially if you can sort it by your preferences. But if a visitor decides he wants to actually go to see a talk he needs to know when it will take place."
msgstr ""

#: ../mastering-plone/events.rst:17
msgid "We need a schedule and for this we need to store the information when a talk will happen."
msgstr ""

#: ../mastering-plone/events.rst:19
msgid "Luckily the default type *Event* is based on reusable behaviors from the package :py:mod:`plone.app.event` that we can reuse."
msgstr ""

#: ../mastering-plone/events.rst:21
msgid "In this chapter you will"
msgstr ""

#: ../mastering-plone/events.rst:23
msgid "enable this behavior for talks"
msgstr ""

#: ../mastering-plone/events.rst:24
msgid "display the date in the talkview and talklistview"
msgstr ""

#: ../mastering-plone/events.rst:26
msgid "First enable the behavior :py:class:`IEventBasic` for talks in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../mastering-plone/events.rst:40
msgid "After you activate the behavior by hand or reinstalled the add-on you will now have some additional fields for ``start`` and ``end``."
msgstr ""

#: ../mastering-plone/events.rst:42
msgid "To display the new field we reuse a default event summary view as documented in http://ploneappevent.readthedocs.io/en/latest/development.html#reusing-the-event-summary-view-to-list-basic-event-information"
msgstr ""

#: ../mastering-plone/events.rst:44
msgid "Edit :file:`browser/templates/talkview.pt`"
msgstr ""

#: ../mastering-plone/events.rst:92
msgid "Similar to the field `room` the problem now appears that speakers submitting their talks should not be able to set a time and day for their talks. Sadly it is not easy to modify permissions of fields provided by behaviors (unless you write the behavior yourself). At least in this case we can take the easy way out since the field does not contain secret information: We will simply hide the fields from contributors using css and show them for reviewers. We will do so in chapter :ref:`resources-label` when we add some css-files."
msgstr ""

#: ../mastering-plone/events.rst:96
msgid "Modify :file:`browser/static/ploneconf.css` and add:"
msgstr ""

#: ../mastering-plone/events.rst:114
msgid "You can now display the start-date of a talk in the talklist. Modify the class :py:class:`TalkListView` and the template :file:`browser/templates/talklistview.pt` to show the new info:"
msgstr ""

#: ../mastering-plone/events.rst:162
msgid "If you changed the view :py:class:`TalkListView` to only return brains as described in :ref:`dexterity2-use_indexes-label` you can save youself a lot of work and simply use the existing index `start` (generously provided by :py:mod:`plone.app.event`) in the template as ``python:brain.start``."
msgstr ""

#: ../mastering-plone/events.rst:168
msgid "Find out where ``event_summary`` comes from and describe how you could override it."
msgstr ""

#: ../mastering-plone/events.rst:173
msgid "Use your editor or grep to search all zcml-files in the folder :file:`packages` for the string ``name=\"event_summary\"``"
msgstr ""

#: ../mastering-plone/events.rst:181
msgid "The relevant registration is:"
msgstr ""

#: ../mastering-plone/events.rst:194
msgid "So there is a class :py:class:`plone.app.event.browser.event_summary.EventSummaryView` and a template :file:`event_summary.pt` that could be overridden with :py:mod:`z3c.jbot` by copying it as :file:`plone.app.event.browser.event_summary.pt` in :file:`browser/overrides`."
msgstr ""

#: ../mastering-plone/events.rst:200
msgid "Find out where the event behavior is defined and which fields it offers."
msgstr ""

#: ../mastering-plone/events.rst:205
msgid "The id with which the behavior is registered in :file:`Talk.xml` is a Python path. So :py:class:`plone.app.event.dx.behaviors.IEventBasic` can be found in :file:`packages/plone.app.event/plone/app/event/dx/behaviors.py`"
msgstr ""

#: ../mastering-plone/events.rst:287
msgid "Note how it uses ``defaultFactory`` to set an initial value."
msgstr ""

#: ../mastering-plone/events.rst:292
msgid "You reused a existing behavior to add new fields"
msgstr ""

#: ../mastering-plone/events.rst:293
msgid "You reused existing indexes to display the time of a talk"
msgstr ""

#: ../mastering-plone/events.rst:294
msgid "You did not have to write your own datetime-fields and indexers \\o/"
msgstr ""

#: ../mastering-plone/export_code.rst:4
msgid "Return to Dexterity: Moving contenttypes into Code"
msgstr ""

#: ../mastering-plone/export_code.rst:18
msgid "Move the *Talk* type into :py:mod:`ploneconf.site`"
msgstr ""

#: ../mastering-plone/export_code.rst:19
msgid "Improve the schema and the FTI"
msgstr ""

#: ../mastering-plone/export_code.rst:24
msgid "Content type definitions with generic setup"
msgstr ""

#: ../mastering-plone/export_code.rst:26
msgid "XML schema"
msgstr ""

#: ../mastering-plone/export_code.rst:27
msgid "more widgets"
msgstr ""

#: ../mastering-plone/export_code.rst:29
msgid "Remember the *Talk* content type that we created through-the-web with Dexterity? Let's move that new content type into our add-on package so that it may be installed in other sites without TTW manipulation."
msgstr ""

#: ../mastering-plone/export_code.rst:31
msgid "Steps:"
msgstr ""

#: ../mastering-plone/export_code.rst:33
msgid "Return to the Dexterity control panel"
msgstr ""

#: ../mastering-plone/export_code.rst:34
msgid "Export the *Talk* Type Profile and save the file"
msgstr ""

#: ../mastering-plone/export_code.rst:35
msgid "Delete the *Talk* from the site before installing it from the file system"
msgstr ""

#: ../mastering-plone/export_code.rst:36
msgid "Extract the files from the exported tar file and add them to our add-on package in :file:`profiles/default/`"
msgstr ""

#: ../mastering-plone/export_code.rst:40
msgid "From the buildout directory perspective that is :file:`src/ploneconf.site/src/ploneconf/site/profiles/default/`"
msgstr ""

#: ../mastering-plone/export_code.rst:42
msgid "The file :file:`profiles/default/types.xml` tells Plone that there is a new content type defined in file :file:`talk.xml`."
msgstr ""

#: ../mastering-plone/export_code.rst:53
msgid "Upon installing, Plone reads the file :file:`profiles/default/types/talk.xml` and registers a new type in ``portal_types`` (you can find and inspect this tool in the ZMI!) with the information taken from that file."
msgstr ""

#: ../mastering-plone/export_code.rst:151
msgid "Now our package has new configuration for Generic Setup. Generic Setup store the configuration for the site in the folder :file:`profiles/`. This configuration is applied to your site upon installing the package. So, we'll need to reinstall it (if installed before)."
msgstr ""

#: ../mastering-plone/export_code.rst:153
msgid "Restart Plone."
msgstr ""

#: ../mastering-plone/export_code.rst:154
msgid "Re-install ploneconf.site (deactivate and activate)."
msgstr ""

#: ../mastering-plone/export_code.rst:155
msgid "Test the type by adding an object or editing one of the old ones."
msgstr ""

#: ../mastering-plone/export_code.rst:156
msgid "Look at how the talks are presented in the browser."
msgstr ""

#: ../mastering-plone/export_code.rst:158
msgid "The escaped inline xml is simply too ugly to look at. You should move it to a separate file!"
msgstr ""

#: ../mastering-plone/export_code.rst:160
msgid "Create a new folder :file:`content` in the main directory (from the buildout directory perspective that is :file:`src/ploneconf.site/src/ploneconf/site/content/`). Inside add an empty file :file:`__init__.py` and a file :file:`talk.xml` that contains the real XML (copied from http://localhost:8080/Plone/dexterity-types/talk/@@modeleditor and beautified with some online XML formatter (http://lmgtfy.com/?q=xml+formatter))"
msgstr ""

#: ../mastering-plone/export_code.rst:221
msgid "Now remove the ugly model_source and instead point to the new XML file in the FTI by using the property ``model_file``:"
msgstr ""

#: ../mastering-plone/export_code.rst:228
msgid "``ploneconf.site.content:talk.xml`` points to a file :file:`talk.xml` to be found in the Python path ``ploneconf.site.content``. The :file:`__ìnit__.py` is needed to turn the folder :file:`content` into a Python package. It is best-practice to add schemas in this folder, and in later chapters you will add new types with pythons-schemata in the same folder."
msgstr ""

#: ../mastering-plone/export_code.rst:232
msgid "The default types of Plone 5 also have an xml schema like this since that allows the fields of the types to be editable trough the web! Fields for types with a python schema are not editable ttw."
msgstr ""

#: ../mastering-plone/export_code.rst:235
msgid "Changing a widget"
msgstr ""

#: ../mastering-plone/export_code.rst:237
msgid "`Dexterity XML <https://docs.plone.org/external/plone.app.dexterity/docs/reference/dexterity-xml.html>`_ is very powerful. By editing it (not all features have a UI) you should be able to do everything you can do with a Python schema. Sadly not every feature also is exposed in the UI of the dexterity schema editor. For example you cannot yet change the widgets or permissions for fields in the UI. We need to do this in the xml- or python-schema."
msgstr ""

#: ../mastering-plone/export_code.rst:240
msgid "Our talks use a dropdown for :guilabel:`type_of_talk` and a multiselect for :guilabel:`audience`. Radio-buttons and checkboxes would be the better choice here. Modify the XML to make that change happen:"
msgstr ""

#: ../mastering-plone/export_code.rst:305
msgid "Protect fields with permissions"
msgstr ""

#: ../mastering-plone/export_code.rst:307
msgid "We also want to have a add a new field `room` to show where a talk will take place. Our case-study says the speakers will submit the talks online. How should they know in which room the talk will take place (if it got accepted at all)? So we need to hide this field from them by requiring a permission that they do not have."
msgstr ""

#: ../mastering-plone/export_code.rst:312
msgid "Let's assume the prospective speakers will not have the permission to review content (i.e. edit submitted content and publish it) but the organizing commitee has. You can then protect the field using the permission `Review portal content` in this case the name of the permission-utility for this permission: `cmf.ReviewPortalContent`."
msgstr ""

#: ../mastering-plone/export_code.rst:315
msgid "We only want to prevent writing, not reading, so we'll only manage the `write-permission`:"
msgstr ""

#: ../mastering-plone/export_code.rst:396
msgid "https://docs.plone.org/external/plone.app.dexterity/docs/reference/dexterity-xml.html"
msgstr ""

#: ../mastering-plone/export_code.rst:397
msgid "https://github.com/plone/plone.autoform/blob/master/plone/autoform/supermodel.txt"
msgstr ""

#: ../mastering-plone/export_code.rst:404
msgid "Go to the ZMI and look for the definition of the new ``Talk`` content type in ``portal_types``. Now deactivate :guilabel:`Implicitly addable?` and save. Go back to the site. Can you identify what this change has caused? And why is that useful?"
msgstr ""

#: ../mastering-plone/export_code.rst:409
msgid "Go to http://localhost:8080/Plone/portal_types/talk/manage_propertiesForm"
msgstr ""

#: ../mastering-plone/export_code.rst:411
msgid "When disabling *Implicitly addable* you can no longer add Talks any more unless you change some container like the type *Folder*: Enable *Filter contenttypes?* for it and add *Talk* to the items that are allowed."
msgstr ""

#: ../mastering-plone/export_code.rst:413
msgid "With this method you can prevent content that only makes sense inside some defined structure to show up in places where they do not belong."
msgstr ""

#: ../mastering-plone/export_code.rst:415
msgid "The equivalent setting for disabling :guilabel:`Implicitly addable` in :file:`Talk.xml` is:"
msgstr ""

#: ../mastering-plone/export_code.rst:425
msgid "You can now create new content-types and store them in a reproduceable way"
msgstr ""

#: ../mastering-plone/export_code.rst:426
msgid "You installed the package to apply the Generic Setup configuration"
msgstr ""

#: ../mastering-plone/export_code.rst:427
msgid "You learned how to read and modify the content type schema in xml"
msgstr ""

#: ../mastering-plone/extending.rst:4
msgid "Extending Plone"
msgstr ""

#: ../mastering-plone/extending.rst:8
msgid "Get an overview over the technologies used to extend Plone"
msgstr ""

#: ../mastering-plone/extending.rst:12
#: ../mastering-plone/extending.rst:45
msgid "Component Architecture"
msgstr ""

#: ../mastering-plone/extending.rst:13
#: ../mastering-plone/intro.rst:67
msgid "ZCML"
msgstr ""

#: ../mastering-plone/extending.rst:14
#: ../mastering-plone/extending.rst:108
msgid "GenericSetup"
msgstr ""

#: ../mastering-plone/extending.rst:15
msgid "Skin folders"
msgstr ""

#: ../mastering-plone/extending.rst:17
msgid "Zope is extensible and so is Plone."
msgstr ""

#: ../mastering-plone/extending.rst:21
msgid "If you want to install an add-on, you are going to install an Egg — a form of Python package. Eggs consist of Python files together with other needed files like page templates and the like and a bit of metadata, bundled to a single archive file."
msgstr ""

#: ../mastering-plone/extending.rst:23
msgid "There is a huge variety of Plone-compatible packages available. See `Plone.org add-on listing <https://plone.org/download/add-ons/>`_. The source repository for many public Plone add-ons is `the GitHub Collective <https://github.com/collective>`_. You may also create your own packages or maintain custom repositories."
msgstr ""

#: ../mastering-plone/extending.rst:25
msgid "Eggs are younger than Zope. Zope needed something like eggs before there were eggs, and the Zope developers wrote their own system. Old, outdated Plone systems contain a lot of code that is not bundled in an egg. Older code did not have metadata to register things, instead you needed a special setup method. We don't need this method but you might see it in other code. It is usually used to register Archetypes code. Archetypes is the old content type system. Instead, we use the new content type system Dexterity."
msgstr ""

#: ../mastering-plone/extending.rst:31
msgid "Extension technologies"
msgstr ""

#: ../mastering-plone/extending.rst:33
msgid "How do you extend Plone?"
msgstr ""

#: ../mastering-plone/extending.rst:35
msgid "This depends on what type of extension you want to create."
msgstr ""

#: ../mastering-plone/extending.rst:40
msgid "You can create extensions with new types of objects to add to your Plone site. Usually these are contenttypes."
msgstr ""

#: ../mastering-plone/extending.rst:41
msgid "You can create an extension that changes or extends functionality. For example to change the way Plone displays search results, or to make pictures searchable by adding a converter from jpg to text."
msgstr ""

#: ../mastering-plone/extending.rst:49
msgid "State of the art"
msgstr ""

#: ../mastering-plone/extending.rst:50
msgid "verbose"
msgstr ""

#: ../mastering-plone/extending.rst:51
msgid "cryptic"
msgstr ""

#: ../mastering-plone/extending.rst:52
msgid "Powerful and flexible"
msgstr ""

#: ../mastering-plone/extending.rst:56
msgid "The best way to extend Plone is via *Components*."
msgstr ""

#: ../mastering-plone/extending.rst:58
msgid "A bit of history is in order."
msgstr ""

#: ../mastering-plone/extending.rst:60
msgid "When Zope started, object-oriented design was **the** silver bullet."
msgstr ""

#: ../mastering-plone/extending.rst:62
msgid "Object-oriented design is good at modeling inheritance, but breaks down when an object has multiple aspects that are part of multiple taxonomies."
msgstr ""

#: ../mastering-plone/extending.rst:64
msgid "Some object-oriented programming languages like Python handle this through multiple inheritance. But it's not a good way to do it. Zope objects have more than 10 base classes. Too many namespaces makes code that's hard to maintain. Where did that method/attribute come from?"
msgstr ""

#: ../mastering-plone/extending.rst:66
msgid "After a while, XML and Components became the next silver bullet (Does anybody remember J2EE?)."
msgstr ""

#: ../mastering-plone/extending.rst:68
msgid "Based on their experiences with Zope in the past, Zope developers thought that a component system configured via XML might be the way to go to keep the code more maintainable."
msgstr ""

#: ../mastering-plone/extending.rst:70
msgid "Before Zope Components functionality was often extended by a practice called Monkey Patching: Changing code in other modules by importing and then modifying it at runtime."
msgstr ""

#: ../mastering-plone/extending.rst:72
msgid "Monkey Patching, like subclassing via multiple inheritance, does not scale. Multiple plugins might overwrite each other, you would explain to people that they have to reorder the imports, and then, suddenly, you will be forced to import feature A before B, B before C and C before A, or else your application won't work."
msgstr ""

#: ../mastering-plone/extending.rst:74
msgid "As the new concepts were radically different from the old Zope concepts, the Zope developers renamed the new project to Zope 3. But it did not gain traction, the community somehow renamed it to Bluebream and this died off."
msgstr ""

#: ../mastering-plone/extending.rst:76
msgid "But the component architecture itself is quite successful and the Zope developers extracted it into the Zope Toolkit. The Zope toolkit is part of Zope, and Plone developers use it extensively."
msgstr ""

#: ../mastering-plone/extending.rst:78
msgid "This is what you want to use."
msgstr ""

#: ../mastering-plone/extending.rst:84
msgid "Configuring Zope Components with ZCML"
msgstr ""

#: ../mastering-plone/extending.rst:88
msgid "ZCML, the Zope Configuration Mark-up Language is an XML based language used to configure Zope Components. With ZCML you declare utilities, adapters and browser views."
msgstr ""

#: ../mastering-plone/extending.rst:90
msgid "Components are distinguished from one another by the interfaces (formal definitions of functionality) that they require or provide."
msgstr ""

#: ../mastering-plone/extending.rst:92
msgid "During startup, Zope reads all these ZCML statements, validates that there are not two declarations trying to register the same components and only then registers everything. All components are registered by interfaces required and provided. Components with the same interfaces may optionally also be named."
msgstr ""

#: ../mastering-plone/extending.rst:94
msgid "This is a good thing. ZCML is, by the way, only *one* way to declare your configuration."
msgstr ""

#: ../mastering-plone/extending.rst:96
msgid "Grok provides another way, where some Python magic allows you to use decorators to register Python classes and functions as components. You can use ZCML and Grok together if you wish."
msgstr ""

#: ../mastering-plone/extending.rst:98
msgid "Some like Grok because it allows you to do nearly everything in your Python source files. No additional XML wiring required. If you're XML-allergic, Grok is your ticket to Python nirvana."
msgstr ""

#: ../mastering-plone/extending.rst:100
msgid "Not everybody loves Grok. Some parts of the Plone community think that there should only be one configuration language, others are against adding the relative big dependency of Grok to Plone. One real problem is the fact that you cannot customize components declared with grok with jbot (which we'll discuss later). Grok is not allowed in the Plone core for these reasons."
msgstr ""

#: ../mastering-plone/extending.rst:102
msgid "The choice to Grok or not to Grok is yours to make. In any case, if you start to write an extension that is reusable, convert your grok declarations to ZCML to get maximum acceptance."
msgstr ""

#: ../mastering-plone/extending.rst:104
msgid "Personally, I just find it cumbersome but even for me as a developer it offers a nice advantage: thanks to ZCML, I hardly ever have a hard time to find what and where extensions or customizations are defined. For me, ZCML files are like a phone book."
msgstr ""

#: ../mastering-plone/extending.rst:112
msgid "Old style"
msgstr ""

#: ../mastering-plone/extending.rst:113
msgid "Limited use cases"
msgstr ""

#: ../mastering-plone/extending.rst:114
msgid "Full of surprises"
msgstr ""

#: ../mastering-plone/extending.rst:118
msgid "The next thing is *GenericSetup*. As the name clearly implies, *GenericSetup* is part of CMF."
msgstr ""

#: ../mastering-plone/extending.rst:120
msgid "GenericSetup is tough to master, I am afraid."
msgstr ""

#: ../mastering-plone/extending.rst:122
msgid "*GenericSetup* lets you define persistent configuration in XML files. *GenericSetup* parses the XML files and updates the persistent configuration according to the configuration. This is a step you have to run on your own!"
msgstr ""

#: ../mastering-plone/extending.rst:124
msgid "You will see many objects in Zope or the ZMI that you can customize through the web. If they are well behaving, they can export their configuration via *GenericSetup* and import it again."
msgstr ""

#: ../mastering-plone/extending.rst:126
msgid "Typically you use *GenericSetup* to change workflows or add new content type definitions."
msgstr ""

#: ../mastering-plone/extending.rst:128
msgid "GenericSetup profiles may also be built into Python packages. Every package that is listed on the add-on package list inside a Plone installation has a GS profile that details how it fits into Plone. Packages that are part of Plone itself may have GS profiles, but are excluded from the active/inactive listing."
msgstr ""

#: ../mastering-plone/extending.rst:132
msgid "Deprecated: Skin Folders"
msgstr ""

#: ../mastering-plone/extending.rst:136
msgid "Very old style"
msgstr ""

#: ../mastering-plone/extending.rst:137
msgid "Very quick"
msgstr ""

#: ../mastering-plone/extending.rst:138
msgid "Very unmaintainable"
msgstr ""

#: ../mastering-plone/extending.rst:142
msgid "Do you remember Acquisition? The Skin Folders extends the concepts of Acquisition. Your Plone site has a folder named ``portal_skins``. This folder has a number of sub folders. The ``portal_skins`` folder has a property that defines in which order Plone searches for attributes or objects in each sub folder."
msgstr ""

#: ../mastering-plone/extending.rst:144
msgid "The Plone logo is in a skin folder."
msgstr ""

#: ../mastering-plone/extending.rst:146
msgid "By default, your site has a ``custom`` folder, and items are first searched for in that folder."
msgstr ""

#: ../mastering-plone/extending.rst:148
msgid "To customize the logo, you copy it into the ``custom`` folder, and change it there. This way you can change templates, CSS styles, images and behavior, because a container may contain Python scripts."
msgstr ""

#: ../mastering-plone/extending.rst:150
msgid "Skin-folder style customization may be accomplished TTW via the ZMI, or with add-on packages. Many older-style packages create their own skin folder and add it to the skin layer for Plone when installed."
msgstr ""

#: ../mastering-plone/extending.rst:156
msgid "This is deprecated technology."
msgstr ""

#: ../mastering-plone/features.rst:4
msgid "The Features of Plone"
msgstr ""

#: ../mastering-plone/features.rst:6
msgid "In-depth user-manual: https://docs.plone.org/"
msgstr ""

#: ../mastering-plone/features.rst:8
msgid "See also: https://docs.plone.org/working-with-content/index.html"
msgstr ""

#: ../mastering-plone/features.rst:13
msgid "Starting and Stopping Plone"
msgstr ""

#: ../mastering-plone/features.rst:15
msgid "We control Plone with a small script called \"instance\"::"
msgstr ""

#: ../mastering-plone/features.rst:19
msgid "This starts Plone in foreground mode so that we can see what it is doing by monitoring console messages. This is an important development method. Note that when Plone is started in foreground mode, it is also automatically in development mode. Development mode gives better feedback, but is much slower, particularly on Windows."
msgstr ""

#: ../mastering-plone/features.rst:25
msgid "You can stop it by pressing :kbd:`ctrl + c`."
msgstr ""

#: ../mastering-plone/features.rst:27
msgid "Apart from the `fg` command the :program:`instance` script offers several more commands. `./bin/instance help` shows the list of available commands, `bin/instance help <command>` will give a short help for each command. Some commands you will use rather often are::"
msgstr ""

#: ../mastering-plone/features.rst:40
msgid "Depending on your computer, it might take up to a minute until Zope will tell you that it's ready to serve requests. On a decent laptop it should be running in under 15 seconds."
msgstr ""

#: ../mastering-plone/features.rst:43
msgid "A standard installation listens on port 8080, so lets have a look at our Zope site by visiting http://localhost:8080"
msgstr ""

#: ../mastering-plone/features.rst:48
msgid "As you can see, there is no Plone site yet!"
msgstr ""

#: ../mastering-plone/features.rst:50
msgid "We have a running Zope with a database but no content. But luckily there is a button to create a Plone site. Click on that button (login: admin, password: admin). This opens a form to create a Plone site. Use :samp:`Plone` as the site id."
msgstr ""

#: ../mastering-plone/features.rst:59
msgid "You now have the option to select some add-ons before you create the site. Since we will use Dexterity from the beginning we select :guilabel:`Dexterity-based Plone Default Types`. This way even the initial content on our page will be built with Dexterity using the add-on :py:mod:`plone.app.contenttypes` which is the default in Plone 5."
msgstr ""

#: ../mastering-plone/features.rst:63
msgid "You will be automatically redirected to the new site."
msgstr ""

#: ../mastering-plone/features.rst:67
msgid "By default Plone listens on port 8080. Look at http://localhost:8080"
msgstr ""

#: ../mastering-plone/features.rst:68
msgid "No Plone site yet! Create a new Plone site."
msgstr ""

#: ../mastering-plone/features.rst:69
msgid "Use :samp:`Plone` (the default) as the site id."
msgstr ""

#: ../mastering-plone/features.rst:73
msgid "Plone has many message boxes. They contain important information. Read them and make sure you understand them!"
msgstr ""

#: ../mastering-plone/features.rst:83
msgid "Open the `bin/instance` script in your favorite editor. Now let's say you want Plone to listen on port 9080 instead of the default 8080. Looking at the script, how could you do this?"
msgstr ""

#: ../mastering-plone/features.rst:88
msgid "At the end of the `bin/instance` script, you'll see the following code:"
msgstr ""

#: ../mastering-plone/features.rst:97
msgid "The second to last line points to the configuration file your Plone instance is using. An absolute path is used so it might differ depending on the installation method. Open the `zope.conf` file in your editor and look for the section:"
msgstr ""

#: ../mastering-plone/features.rst:106
msgid "Change the address to 9080 and restart your instance."
msgstr ""

#: ../mastering-plone/features.rst:111
msgid "Knowing that `bin/instance debug` basically offers you a Python prompt, how would you start to explore Plone?"
msgstr ""

#: ../mastering-plone/features.rst:116
msgid "Use `locals()` or `locals().keys()` to see Python objects available in Plone"
msgstr ""

#: ../mastering-plone/features.rst:121
msgid "The `app` object you encountered in the previous exercise can be seen as the root of Plone. Once again using Python, can you find your newly created Plone site?"
msgstr ""

#: ../mastering-plone/features.rst:126
msgid "`app.__dict__.keys()` will show `app`'s attribute names - there is one called `Plone`, this is your Plone site object. Use `app.Plone` to access and further explore it."
msgstr ""

#: ../mastering-plone/features.rst:130
msgid "Plone and its objects are stored in an object database, the ZODB. You can use `bin/instance debug` as a database client (in the same way e.g. `psql` is a client for PostgreSQL). Instead of a special query language (like SQL) you simply use Python to access and manipulate ZODB objects. Don't worry if you accidentally change objects in `bin/instance debug` - you would have to commit your changes explicitly to make them permanent. The Python code to do so is:"
msgstr ""

#: ../mastering-plone/features.rst:139
msgid "You have been warned."
msgstr ""

#: ../mastering-plone/features.rst:144
msgid "Walkthrough of the UI"
msgstr ""

#: ../mastering-plone/features.rst:146
msgid "Let's see what is there..."
msgstr ""

#: ../mastering-plone/features.rst:148
msgid ":guilabel:`header`:"
msgstr ""

#: ../mastering-plone/features.rst:150
msgid ":guilabel:`logo`: with a link to the front page"
msgstr ""

#: ../mastering-plone/features.rst:151
msgid ":guilabel:`searchbox`: search (with live-search)"
msgstr ""

#: ../mastering-plone/features.rst:153
msgid ":guilabel:`navigation`: The global navigation"
msgstr ""

#: ../mastering-plone/features.rst:154
msgid ":guilabel:`banner`: A banner. Only visible on the front page."
msgstr ""

#: ../mastering-plone/features.rst:156
msgid ":guilabel:`portal-columns`: a container holding:"
msgstr ""

#: ../mastering-plone/features.rst:158
msgid ":guilabel:`portal-column-one`: portlets (configurable boxes with tools like navigation, news etc.)"
msgstr ""

#: ../mastering-plone/features.rst:159
msgid ":guilabel:`portal-column-content`: the content and the editor"
msgstr ""

#: ../mastering-plone/features.rst:160
msgid ":guilabel:`portal-column-two`: portlets"
msgstr ""

#: ../mastering-plone/features.rst:162
msgid ":guilabel:`portal-footer`: portlets for the footer, site actions, and colophon"
msgstr ""

#: ../mastering-plone/features.rst:164
msgid ":guilabel:`edit-zone`: a vertical bar on the left side of the browser window with editing options for the content"
msgstr ""

#: ../mastering-plone/features.rst:168
msgid "These are also the CSS classes of the respective divs. If you want to do theming, you'll need them."
msgstr ""

#: ../mastering-plone/features.rst:171
msgid "On the edit bar, we find options affecting the current context..."
msgstr ""

#: ../mastering-plone/features.rst:173
msgid ":guilabel:`folder contents`"
msgstr ""

#: ../mastering-plone/features.rst:174
msgid ":guilabel:`edit`"
msgstr ""

#: ../mastering-plone/features.rst:175
msgid ":guilabel:`view`"
msgstr ""

#: ../mastering-plone/features.rst:176
msgid ":guilabel:`add`"
msgstr ""

#: ../mastering-plone/features.rst:177
msgid ":guilabel:`state`"
msgstr ""

#: ../mastering-plone/features.rst:178
msgid ":guilabel:`actions`"
msgstr ""

#: ../mastering-plone/features.rst:179
msgid ":guilabel:`display`"
msgstr ""

#: ../mastering-plone/features.rst:180
msgid ":guilabel:`manage portlets`"
msgstr ""

#: ../mastering-plone/features.rst:181
msgid ":guilabel:`history`"
msgstr ""

#: ../mastering-plone/features.rst:182
msgid ":guilabel:`sharing`"
msgstr ""

#: ../mastering-plone/features.rst:183
msgid ":guilabel:`rules`"
msgstr ""

#: ../mastering-plone/features.rst:184
msgid ":guilabel:`user actions`"
msgstr ""

#: ../mastering-plone/features.rst:186
msgid "Some edit bar options only show when appropriate; for example, :guilabel:`folder contents` and :guilabel:`add` are only shown for Folders. :guilabel:`rules` is currently invisible because we have no content rules available."
msgstr ""

#: ../mastering-plone/features.rst:199
msgid "Let's create our first users within Plone. So far we used the admin user (admin:admin) configured in the buildout. This user is often called \"Zope root\" and is not managed in Plone but only by Zope. Therefore the user is missing some features like email and full name and won't be able to use some of Plone's features. But the user has all possible permissions. As with the root user of a server, it's bad practice to make unnecessary use of Zope root. Use it to create Plone sites and their initial users, but not much else."
msgstr ""

#: ../mastering-plone/features.rst:207
msgid "You can also add Zope users via the terminal by entering::"
msgstr ""

#: ../mastering-plone/features.rst:211
msgid "That way you can access databases you get from customers where you have no Plone user."
msgstr ""

#: ../mastering-plone/features.rst:213
msgid "To add a new user in Plone, click on the user icon at the bottom of the left vertical bar and then on :guilabel:`Site setup`. This is Plone's control panel. You can also access it by browsing to http://localhost:8080/Plone/@@overview-controlpanel"
msgstr ""

#: ../mastering-plone/features.rst:220
msgid "Click on :guilabel:`Users and Groups` and add a user. If we had configured a mail server, Plone could send you a mail with a link to a form where you can choose a password. (Or, if you have Products.PrintingMailHost in your buildout, you can see the email scrolling by in the console, just the way it would be sent out.) We set a password here because we haven't yet configured a mail server."
msgstr ""

#: ../mastering-plone/features.rst:225
msgid "Make this user with your name an administrator."
msgstr ""

#: ../mastering-plone/features.rst:230
msgid "Then create another user called ``testuser``. Make this one a normal user. You can use this user to see how Plone looks and behaves to users that have no admin permissions."
msgstr ""

#: ../mastering-plone/features.rst:234
msgid "Now let's see the site in 3 different browsers with three different roles:"
msgstr ""

#: ../mastering-plone/features.rst:236
msgid "as anonymous"
msgstr ""

#: ../mastering-plone/features.rst:237
msgid "as editor"
msgstr ""

#: ../mastering-plone/features.rst:238
msgid "as admin"
msgstr ""

#: ../mastering-plone/features.rst:242
msgid "Create some Plone users:"
msgstr ""

#: ../mastering-plone/features.rst:244
msgid ":guilabel:`admin` > :guilabel:`Site setup` > :guilabel:`Users and Groups`"
msgstr ""

#: ../mastering-plone/features.rst:245
msgid "Add user <yourname> (groups: Administrators)"
msgstr ""

#: ../mastering-plone/features.rst:246
msgid "Add another user \"tester\" (groups: None)"
msgstr ""

#: ../mastering-plone/features.rst:247
msgid "Add another user \"editor\" (groups: None)"
msgstr ""

#: ../mastering-plone/features.rst:248
msgid "Add another user \"reviewer\" (groups: Reviewers)"
msgstr ""

#: ../mastering-plone/features.rst:249
msgid "Add another user \"jurymember\" (groups: None)"
msgstr ""

#: ../mastering-plone/features.rst:251
msgid "Logout as admin by clicking 'Logout' and following the instructions."
msgstr ""

#: ../mastering-plone/features.rst:253
msgid "Login to the site with your user now."
msgstr ""

#: ../mastering-plone/features.rst:259
msgid "Configure a Mailserver"
msgstr ""

#: ../mastering-plone/features.rst:264
msgid "We have to configure a mailserver since later we will create some content rules that send emails when new content is put on our site."
msgstr ""

#: ../mastering-plone/features.rst:266
msgid "Server: :samp:`localhost`"
msgstr ""

#: ../mastering-plone/features.rst:267
msgid "Username: leave blank"
msgstr ""

#: ../mastering-plone/features.rst:268
msgid "Password: leave blank"
msgstr ""

#: ../mastering-plone/features.rst:269
msgid "Site 'From' name: Your name"
msgstr ""

#: ../mastering-plone/features.rst:270
msgid "Site 'From' address: Your email address"
msgstr ""

#: ../mastering-plone/features.rst:274
msgid "Click on `Save and send test e-mail`. Since we have configured PrintingMailHost, you will see the mail content in the console output of your instance. Plone will not actually send the email to the receivers address."
msgstr ""

#: ../mastering-plone/features.rst:281
msgid "Content-Types"
msgstr ""

#: ../mastering-plone/features.rst:283
msgid "Edit a page:"
msgstr ""

#: ../mastering-plone/features.rst:285
msgid ":guilabel:`Edit front-page`"
msgstr ""

#: ../mastering-plone/features.rst:286
msgid ":guilabel:`Title` :samp:`Plone Conference 2017, Barcelona`"
msgstr ""

#: ../mastering-plone/features.rst:287
msgid ":guilabel:`Summary` :samp:`Tutorial`"
msgstr ""

#: ../mastering-plone/features.rst:288
msgid ":guilabel:`Text` :samp:`...`"
msgstr ""

#: ../mastering-plone/features.rst:291
msgid "Create a site structure:"
msgstr ""

#: ../mastering-plone/features.rst:293
msgid "Add a folder \"The Event\" and in it add:"
msgstr ""

#: ../mastering-plone/features.rst:295
msgid "Folder \"Talks\""
msgstr ""

#: ../mastering-plone/features.rst:296
msgid "Folder \"Training\""
msgstr ""

#: ../mastering-plone/features.rst:297
msgid "Folder \"Sprint\""
msgstr ""

#: ../mastering-plone/features.rst:304
msgid "The view of the newly created site structure."
msgstr ""

#: ../mastering-plone/features.rst:307
msgid "In ``/news``: Add a News Item \"Conference Website online!\" with some image"
msgstr ""

#: ../mastering-plone/features.rst:308
msgid "In ``/news``: Add a News Item \"Submit your talks!\""
msgstr ""

#: ../mastering-plone/features.rst:309
msgid "In ``/events``: Add an Event \"Deadline for talk submission\" Date: 2017/08/10"
msgstr ""

#: ../mastering-plone/features.rst:311
msgid "Add a Folder \"Register\""
msgstr ""

#: ../mastering-plone/features.rst:312
msgid "Delete the Folder \"Users\""
msgstr ""

#: ../mastering-plone/features.rst:313
msgid "Add a Folder \"Intranet\""
msgstr ""

#: ../mastering-plone/features.rst:319
msgid "The view of the extended navigation bar."
msgstr ""

#: ../mastering-plone/features.rst:322
msgid "The default Plone content types are:"
msgstr ""

#: ../mastering-plone/features.rst:324
msgid "Collection"
msgstr ""

#: ../mastering-plone/features.rst:325
msgid "Event"
msgstr ""

#: ../mastering-plone/features.rst:326
msgid "File"
msgstr ""

#: ../mastering-plone/features.rst:327
msgid "Folder"
msgstr ""

#: ../mastering-plone/features.rst:328
msgid "Image"
msgstr ""

#: ../mastering-plone/features.rst:329
msgid "Link"
msgstr ""

#: ../mastering-plone/features.rst:330
msgid "News Item"
msgstr ""

#: ../mastering-plone/features.rst:331
msgid "Page"
msgstr ""

#: ../mastering-plone/features.rst:335
msgid "Please keep in mind that we use `plone.app.contenttypes <https://docs.plone.org/external/plone.app.contenttypes/docs/README.html>`_ for the training, which are the default in Plone 5. Therefore the types are based on Dexterity and slightly different from the types that you will find in a default Plone 4.3.x site."
msgstr ""

#: ../mastering-plone/features.rst:341
msgid "Folders"
msgstr ""

#: ../mastering-plone/features.rst:343
msgid "Go to 'the-event'"
msgstr ""

#: ../mastering-plone/features.rst:344
msgid "explain the difference between title, ID, and URL"
msgstr ""

#: ../mastering-plone/features.rst:345
msgid "explain /folder_contents"
msgstr ""

#: ../mastering-plone/features.rst:346
msgid "change the order of items"
msgstr ""

#: ../mastering-plone/features.rst:347
msgid "explain bulk actions"
msgstr ""

#: ../mastering-plone/features.rst:348
msgid "dropdown \"display\""
msgstr ""

#: ../mastering-plone/features.rst:349
msgid "default pages"
msgstr ""

#: ../mastering-plone/features.rst:350
msgid "Add a page to 'the-event': \"The Event\" and make it the default page"
msgstr ""

#: ../mastering-plone/features.rst:356
msgid "Collections"
msgstr ""

#: ../mastering-plone/features.rst:358
msgid "add a new collection: \"all content that has ``pending`` as wf_state\"."
msgstr ""

#: ../mastering-plone/features.rst:364
msgid "Add a collection through the web."
msgstr ""

#: ../mastering-plone/features.rst:366
msgid "explain the default collection for events at http://localhost:8080/Plone/events/aggregator/edit"
msgstr ""

#: ../mastering-plone/features.rst:367
msgid "explain Topics"
msgstr ""

#: ../mastering-plone/features.rst:368
msgid "mention collection portlets"
msgstr ""

#: ../mastering-plone/features.rst:369
msgid "multi-path queries"
msgstr ""

#: ../mastering-plone/features.rst:370
msgid "constraints, e.g. ``/Plone/folder::1``"
msgstr ""

#: ../mastering-plone/features.rst:378
msgid "Create new rule \"a new talk is in town\"!"
msgstr ""

#: ../mastering-plone/features.rst:379
msgid "New content in folder \"Talks\" -> Send Mail to reviewers."
msgstr ""

#: ../mastering-plone/features.rst:385
msgid "Add a rule through the web."
msgstr ""

#: ../mastering-plone/features.rst:391
msgid "Add an action to the rule."
msgstr ""

#: ../mastering-plone/features.rst:397
msgid "Add mail action."
msgstr ""

#: ../mastering-plone/features.rst:403
msgid "Assign the newly created rule."
msgstr ""

#: ../mastering-plone/features.rst:409
msgid "History"
msgstr ""

#: ../mastering-plone/features.rst:411
msgid "Show and explain; mention versioning and its relation to types."
msgstr ""

#: ../mastering-plone/features.rst:417
msgid "Manage members and groups"
msgstr ""

#: ../mastering-plone/features.rst:419
msgid "add/edit/delete Users"
msgstr ""

#: ../mastering-plone/features.rst:420
msgid "roles"
msgstr ""

#: ../mastering-plone/features.rst:421
msgid "groups"
msgstr ""

#: ../mastering-plone/features.rst:423
msgid "Add group \"Editors\" and add the user 'editor' to it"
msgstr ""

#: ../mastering-plone/features.rst:424
msgid "Add group: ``orga``"
msgstr ""

#: ../mastering-plone/features.rst:425
msgid "Add group: ``jury`` and add user 'jurymember' to it."
msgstr ""

#: ../mastering-plone/features.rst:433
msgid "Take a look at the :guilabel:`state` drop down on the edit bar on the homepage. Now, navigate to one of the folders just added. The homepage has the status ``published`` and the new content is ``private``."
msgstr ""

#: ../mastering-plone/features.rst:437
msgid "Let's look at the state transitions available for each type. We can make a published item private and a private item published. We can also submit an item for review."
msgstr ""

#: ../mastering-plone/features.rst:441
msgid "Each of these states connects roles to permissions."
msgstr ""

#: ../mastering-plone/features.rst:443
msgid "In ``published`` state, the content is available to anonymous visitors;"
msgstr ""

#: ../mastering-plone/features.rst:444
msgid "In ``private`` state, the content is only viewable by the author (owner) and users who have the ``can view`` role for the content."
msgstr ""

#: ../mastering-plone/features.rst:446
msgid "A *workflow state* is an association between a role and one or more permissions. Moving from one state to another is a ``transition``. Transitions (like ``submit for review``) may have actions — such as the execution of a content rule or script — associated with them."
msgstr ""

#: ../mastering-plone/features.rst:450
msgid "A complete set of workflow states and transitions makes up a *workflow*. Plone allows you to select among several pre-configured workflows that are appropriate for different types of sites. Individual content types may have their own workflow. Or, and this is particularly interesting, they may have no workflow. In that case, which initially applies to file and image uploads, the content object inherits the workflow state of its container."
msgstr ""

#: ../mastering-plone/features.rst:458
msgid "An oddity in all of the standard Plone workflows: a content item may be viewable even if its container is not. Making a container private does **not** automatically make its contents private."
msgstr ""

#: ../mastering-plone/features.rst:461
msgid "Read more at: https://docs.plone.org/working-with-content/collaboration-and-workflow/index.html"
msgstr ""

#: ../mastering-plone/features.rst:466
msgid "Working copy"
msgstr ""

#: ../mastering-plone/features.rst:468
msgid "Published content, even in an intranet setting, can pose a special problem for editing. It may need to be reviewed before changes are made available. In fact, the original author may not even have permission to change the document without review. Or, you may need to make a partial edit. In either case, it may be undesirable for changes to be immediately visible."
msgstr ""

#: ../mastering-plone/features.rst:474
msgid "Plone's working copy support solves this problem by adding a check-out/check-in function for content — available on the actions menu. A content item may be checked out, worked on, then checked back in. Or it may abandoned if the changes weren't acceptable. Not until check in is the new content visible."
msgstr ""

#: ../mastering-plone/features.rst:479
msgid "While it's shipped with Plone, working copy support is not a common need. So, if you need it, you need to activate it via the add-on packages configuration page. Unless activated, check-in/check-out options are not visible."
msgstr ""

#: ../mastering-plone/features.rst:485
msgid "Working Copy Support has limited support for Dexterity content types. The limitation is that there are some outstanding issues with folderish items that contain many items. See: `plone/Products.CMFPlone#665 <https://github.com/plone/Products.CMFPlone/issues/665>`_"
msgstr ""

#: ../mastering-plone/features.rst:491
msgid "Placeful workflows"
msgstr ""

#: ../mastering-plone/features.rst:493
msgid "You may need to have different workflows in different parts of a site. For example, we created an intranet folder. Since this is intended for use by our conference organizers — but not the public — the simple workflow we wish to use for the rest of the site will not be desirable."
msgstr ""

#: ../mastering-plone/features.rst:497
msgid "Plone's ``Workflow Policy Support`` package gives you the ability to set different workflows in different sections of a site. Typically, you use it to set a special workflow in a folder that will govern everything under that folder. Since it has effect in a \"place\" in a site, this mechanism is often called \"Placeful Workflow\"."
msgstr ""

#: ../mastering-plone/features.rst:501
msgid "As with working-copy support, Placeful Workflow ships with Plone but needs to be activated via the add-on configuration page. Once it's added, a :guilabel:`Policy` option will appear on the state menu to allow setting a placeful workflow policy."
msgstr ""

#: ../mastering-plone/frontpage.rst:4
msgid "Creating a Dynamic Front Page"
msgstr ""

#: ../mastering-plone/frontpage.rst:15
msgid "In this chapter we will:"
msgstr ""

#: ../mastering-plone/frontpage.rst:17
msgid "Create a standalone view used for the front page"
msgstr ""

#: ../mastering-plone/frontpage.rst:18
msgid "Show dynamic content"
msgstr ""

#: ../mastering-plone/frontpage.rst:19
msgid "Use ajax to load content"
msgstr ""

#: ../mastering-plone/frontpage.rst:20
msgid "Embed tweets about ploneconf"
msgstr ""

#: ../mastering-plone/frontpage.rst:24
msgid "Standalone views"
msgstr ""

#: ../mastering-plone/frontpage.rst:25
msgid "Querying the catalog by date"
msgstr ""

#: ../mastering-plone/frontpage.rst:26
msgid "DRY"
msgstr ""

#: ../mastering-plone/frontpage.rst:27
msgid "macros"
msgstr ""

#: ../mastering-plone/frontpage.rst:28
msgid "patterns"
msgstr ""

#: ../mastering-plone/frontpage.rst:32
msgid "The Front Page"
msgstr ""

#: ../mastering-plone/frontpage.rst:34
msgid "Register the view in ``browser/configure.zcml``:"
msgstr ""

#: ../mastering-plone/frontpage.rst:48
msgid "Add the view to a file ``browser/frontpage.py``. We want a list of all talks that happen today."
msgstr ""

#: ../mastering-plone/frontpage.rst:88
msgid "We do not constrain the search to a certain folder to also find the party and the sprints."
msgstr ""

#: ../mastering-plone/frontpage.rst:89
msgid "With ``if brain.start.date() == today:`` we test if the talk is today."
msgstr ""

#: ../mastering-plone/frontpage.rst:90
msgid "It would be more effective to query the catalog for events that happen in the daterange between today and tomorrow:"
msgstr ""

#: ../mastering-plone/frontpage.rst:106
msgid "The ``sort_on='start'`` sorts the results returned by the catalog by start-date."
msgstr ""

#: ../mastering-plone/frontpage.rst:107
msgid "By removing the ``portal_type='talk'`` from the query you could include other events in the schedule (like the party or sightseeing-tours). But you'd have to take care to not create AttributeErrors by accessing fields that are specific to talk. To work around that use ``speaker = getattr(brain, 'speaker', None)`` and testing with ``if speaker is not None:``"
msgstr ""

#: ../mastering-plone/frontpage.rst:108
msgid "The rest is identical to what the talklistview does."
msgstr ""

#: ../mastering-plone/frontpage.rst:112
#: ../mastering-plone/viewlets_2.rst:141
msgid "The template"
msgstr ""

#: ../mastering-plone/frontpage.rst:114
msgid "Create the template ``browser/templates/frontpageview.pt`` (for now without talks). Display the rich text field to allow the frontpage to be edited."
msgstr ""

#: ../mastering-plone/frontpage.rst:136
msgid "Now you could add the whole code that we used for the talklistview again. But instead we go D.R.Y. and reuse the talklistview by turning it into a macro."
msgstr ""

#: ../mastering-plone/frontpage.rst:138
msgid "Edit ``browser/templates/talkslistview.pt`` and wrap the list in a macro definition:"
msgstr ""

#: ../mastering-plone/frontpage.rst:205
msgid "Now use that macro in ``browser/templates/frontpageview.pt``"
msgstr ""

#: ../mastering-plone/frontpage.rst:217
msgid "Calling that macro in python looks like this ``metal:use-macro=\"python: context.restrictedTraverse('talklistview')['talklist']\"``"
msgstr ""

#: ../mastering-plone/frontpage.rst:221
msgid "In :file:`talklistview.pt` the call :samp:`view/talks\"` calls the method :py:meth:`talks` from the browser view :py:class:`TalkListView` to get the talks. Reused as a macro on the frontpage it now uses the method :py:meth:`talks` by the ``frontpageView`` to get a different list! It is not always smart to do that since you might want to display other data. E.g. for a list of todays talks you don't want show the date but only the time using ``data-pat-moment=\"format:LT\"`` Also this frontpage will probably not win a beauty-contest. But that's not the task of this training."
msgstr ""

#: ../mastering-plone/frontpage.rst:228
msgid "Change the link to open the talk-info in a `modal <https://plone.github.io/mockup/dev/#pattern/modal>`_."
msgstr ""

#: ../mastering-plone/frontpage.rst:245
msgid "Twitter"
msgstr ""

#: ../mastering-plone/frontpage.rst:247
msgid "You might also want to embed a twitter feed into the page. Luckily twitter makes it easy to do that. When you browse to the `twitter docs <https://dev.twitter.com/web/embedded-timelines/search>`_ and learn how to create the appropriate snippet of code and paste it in the template wrapped in a ``<div class=\"col-lg-6\">...</div>`` to have the talklist next to the feeds:"
msgstr ""

#: ../mastering-plone/frontpage.rst:283
msgid "Activating the view"
msgstr ""

#: ../mastering-plone/frontpage.rst:285
msgid "The view is meant to be used with documents (or any other type that has a rich text field 'text'). The easiest way to use it is setting it as the default view for the Document that is currently the default page for the portal. By default that document has the id ``front-page``."
msgstr ""

#: ../mastering-plone/frontpage.rst:287
msgid "You can either access it directly at http://localhost:8080/Plone/front-page or by disabling the default page for the portal and it should show up in the navigation. Try out the new view like this: http://localhost:8080/Plone/front-page/frontpageview."
msgstr ""

#: ../mastering-plone/frontpage.rst:289
msgid "To set that view by hand as the default view for ``front-page`` in the ZMI: http://localhost:8080/Plone/front-page/manage_propertiesForm. Add a new property ``layout`` and set it to ``frontpageview``."
msgstr ""

#: ../mastering-plone/frontpage.rst:291
msgid "Done. This way you can still use the button *Edit* to edit the frontpage."
msgstr ""

#: ../mastering-plone/frontpage.rst:296
msgid "Querying by date: https://docs.plone.org/develop/plone/searching_and_indexing/query.html#querying-by-date"
msgstr ""

#: ../mastering-plone/future_of_plone.rst:4
msgid "The Future of Plone"
msgstr ""

#: ../mastering-plone/future_of_plone.rst:6
msgid "The Plone process, the various teams and the Plone Community"
msgstr ""

#: ../mastering-plone/future_of_plone.rst:7
msgid "Plips: https://github.com/plone/Products.CMFPlone/issues?q=is%3Aopen+is%3Aissue+label%3A%2203+type%3A+feature+%28plip%29%22"
msgstr ""

#: ../mastering-plone/future_of_plone.rst:8
msgid "Plone 5.x"
msgstr ""

#: ../mastering-plone/future_of_plone.rst:9
msgid "Plone 6"
msgstr ""

#: ../mastering-plone/future_of_plone.rst:10
msgid "Plone 7 and beyond..."
msgstr ""

#: ../mastering-plone/future_of_plone.rst:11
msgid "Plone Roadmap: https://plone.org/roadmap"
msgstr ""

#: ../mastering-plone/grok.rst:3
msgid "Grok"
msgstr ""

#: ../mastering-plone/grok.rst:5
msgid "Grok is an alternative declaration language for declaring your components. It is compatible with the Zope Component Architecture, it used just an alternative syntax. It is recommended to not use it! We still document it here in case you have to deal with a legacy-codebase that uses it."
msgstr ""

#: ../mastering-plone/grok.rst:7
msgid "Instead of writing separate zcml files, you annotate your code and you create content conforming to specific file names so that they are automatically found. There has been discussions whether grok should be used in the plone core. The plone community decided against it, because it increases the technology stack without adding functionality."
msgstr ""

#: ../mastering-plone/grok.rst:10
msgid "Some people are even against using it in Add Ons, because there would not be just one way to declare components, but two. Then there is only last disadvantage, grok components cannot be overridden by z3c.jbot. I would not be surprised if this could be fixed though."
msgstr ""

#: ../mastering-plone/grok.rst:12
msgid "After all these negative things let us tell you why we still like it: We like to write as few lines of code and configuration as possible."
msgstr ""

#: ../mastering-plone/grok.rst:14
msgid "So, we will write our browser view as a grok view. From the component architecture side, nothing changes. We still need to write a multi adapter. All the details like which template to use or for which browser layer the view shall be used is declared with a single line annotation or deduced from file names."
msgstr ""

#: ../mastering-plone/grok.rst:18
msgid "https://docs.plone.org/develop/addons/five-grok/index.html"
msgstr ""

#: ../mastering-plone/grok.rst:20
msgid "Grok is not part of plone. We have to add it as a dependency to our egg."
msgstr ""

#: ../mastering-plone/grok.rst:22
msgid "Open :file:`setup.py`, and add :py:mod:`five.grok` to the list of add-ons in ``install_requires``::"
msgstr ""

#: ../mastering-plone/grok.rst:31
msgid "You need to run buildout now."
msgstr ""

#: ../mastering-plone/grok.rst:33
msgid "Grok nearly magically does find all its annotations. Since its not complete magic, you have to tell grok where to look for grok code. This requires a single line of ZCML. This line ensures that your complete package is `grokked`."
msgstr ""

#: ../mastering-plone/grok.rst:53
msgid "This new grok statement takes care of finding everything grok-related."
msgstr ""

#: ../mastering-plone/grok.rst:55
msgid "Now we can add a grok view in a new file :file:`views.py`:"
msgstr ""

#: ../mastering-plone/grok.rst:69
msgid "By convention the template must be in a subdirectory called :file:`views_templates` and it must be named :file:`talkview.pt`"
msgstr ""

#: ../mastering-plone/grok.rst:71
msgid "If we used ``grok`` for viewlets we would not need to register them in the :file:`configure.zcml` but do that in python. We would add a file :file:`viewlets.py` containing the viewlet-class."
msgstr ""

#: ../mastering-plone/grok.rst:83
msgid "This would do the same as the code above using grok's paradigm of convention over configuration. In browser views the reference is called view; note that in grok viewlets it is called viewlets (in that case ``viewlet/lanyrd_link``)."
msgstr ""

#: ../mastering-plone/ide.rst:4
msgid "IDEs and Editors"
msgstr ""

#: ../mastering-plone/ide.rst:8
msgid "Learn about Editors"
msgstr ""

#: ../mastering-plone/ide.rst:12
msgid "Many editors"
msgstr ""

#: ../mastering-plone/ide.rst:14
msgid "Plone consists of more than 20.000 files! You need a tool to manage that. No development environment is complete without a good editor."
msgstr ""

#: ../mastering-plone/ide.rst:16
msgid "People pick editors themselves. Use whatever you are comfortable and productive with. Here are some of the most used editors in the Plone community:"
msgstr ""

#: ../mastering-plone/ide.rst:18
msgid "`Sublime <https://www.sublimetext.com/>`_"
msgstr ""

#: ../mastering-plone/ide.rst:19
msgid "`PyCharm <http://www.jetbrains.com/pycharm/>`_"
msgstr ""

#: ../mastering-plone/ide.rst:20
msgid "`Wing IDE <http://wingide.com/>`_"
msgstr ""

#: ../mastering-plone/ide.rst:21
msgid "`Visual Studio Code <https://code.visualstudio.com/>`_"
msgstr ""

#: ../mastering-plone/ide.rst:22
msgid "vim"
msgstr ""

#: ../mastering-plone/ide.rst:23
msgid "emacs"
msgstr ""

#: ../mastering-plone/ide.rst:24
msgid "`Textmate <http://macromates.com/>`_"
msgstr ""

#: ../mastering-plone/ide.rst:25
msgid "`PyDev <http://www.pydev.org/>`_ for `Eclipse <http://www.eclipse.org/>`_"
msgstr ""

#: ../mastering-plone/ide.rst:27
msgid "Some features that most editors have in one form or another are essential when developing with Plone."
msgstr ""

#: ../mastering-plone/ide.rst:29
msgid "**Find in project** (SublimeText 3: ``cmd + shift + f``)"
msgstr ""

#: ../mastering-plone/ide.rst:30
msgid "**Find files in Project** (SublimeText 3: ``cmd + t``)"
msgstr ""

#: ../mastering-plone/ide.rst:31
msgid "**Find methods and classes in Project** (SublimeText 3: ``cmd + shift + r``)"
msgstr ""

#: ../mastering-plone/ide.rst:32
msgid "**Goto Definition** (SublimeText3 with codeintel: ``alt + click``)"
msgstr ""

#: ../mastering-plone/ide.rst:33
msgid "**Powerful search & replace**"
msgstr ""

#: ../mastering-plone/ide.rst:35
msgid "The capability of performing a *full text search* through the complete Plone code is invaluable. Thanks to omelette, an SSD and plenty of RAM you can search through the complete Plone code base in 3 seconds."
msgstr ""

#: ../mastering-plone/ide.rst:39
msgid "Some Editors/IDE's have to be extend to be fully featured. Here are some packages we recommend when using Sublime Text 3:"
msgstr ""

#: ../mastering-plone/ide.rst:41
msgid "SublimeCodeIntel (Goto Definition)"
msgstr ""

#: ../mastering-plone/ide.rst:42
msgid "BracketHighlighter"
msgstr ""

#: ../mastering-plone/ide.rst:43
msgid "GitGutter"
msgstr ""

#: ../mastering-plone/ide.rst:44
msgid "FileDiffs"
msgstr ""

#: ../mastering-plone/ide.rst:45
msgid "SublimeLinter with SublimeLinter-flake8 ..."
msgstr ""

#: ../mastering-plone/ide.rst:46
msgid "INI (syntax for ini-Files)"
msgstr ""

#: ../mastering-plone/ide.rst:47
msgid "SideBarEnhancements"
msgstr ""

#: ../mastering-plone/ide.rst:48
msgid "SyncedSideBar"
msgstr ""

#: ../mastering-plone/index.rst:5
msgid "Mastering Plone Development"
msgstr ""

#: ../mastering-plone/index.rst:7
msgid "This is the documentation for the \"Mastering Plone\" training."
msgstr ""

#: ../mastering-plone/index.rst:9
msgid "Mastering Plone is intended as a week-long training for people who are new to Plone or want to learn about the current best practices of Plone development. It can be split in two trainings:"
msgstr ""

#: ../mastering-plone/index.rst:11
msgid "A beginner training (2 to 3 days) that covers chapters 1-18."
msgstr ""

#: ../mastering-plone/index.rst:12
msgid "An advanced training (3 to 5 days) that covers the rest."
msgstr ""

#: ../mastering-plone/index.rst:14
msgid "At conferences a shortened 2-day version of the advanced training with a slightly modified order is held."
msgstr ""

#: ../mastering-plone/index.rst:17
msgid "Mastering Plone"
msgstr ""

#: ../mastering-plone/index.rst:70
msgid "Please note that this document is *not complete* without the spoken word of a trainer."
msgstr ""

#: ../mastering-plone/index.rst:72
msgid "Even though we attempt to include the most important parts of what we teach in the narrative but reading it here can in no way be considered equal to attending a training."
msgstr ""

#: ../mastering-plone/installation.rst:4
msgid "Installation & Setup"
msgstr ""

#: ../mastering-plone/installation.rst:10
msgid "Installing Plone"
msgstr ""

#: ../mastering-plone/installation.rst:14
msgid "The following table shows the Python versions required by Plone from version 3.x to 5.1.x:"
msgstr ""

#: ../mastering-plone/installation.rst:17
msgid "Plone"
msgstr ""

#: ../mastering-plone/installation.rst:17
msgid "Python"
msgstr ""

#: ../mastering-plone/installation.rst:19
msgid "3.x"
msgstr ""

#: ../mastering-plone/installation.rst:19
msgid "2.4"
msgstr ""

#: ../mastering-plone/installation.rst:20
msgid "4.0.x"
msgstr ""

#: ../mastering-plone/installation.rst:20
#: ../mastering-plone/installation.rst:21
msgid "2.6"
msgstr ""

#: ../mastering-plone/installation.rst:21
msgid "4.1.x"
msgstr ""

#: ../mastering-plone/installation.rst:22
msgid "4.2.x"
msgstr ""

#: ../mastering-plone/installation.rst:22
msgid "2.6 or 2.7"
msgstr ""

#: ../mastering-plone/installation.rst:23
msgid "4.3.x"
msgstr ""

#: ../mastering-plone/installation.rst:23
#: ../mastering-plone/installation.rst:24
msgid "2.7"
msgstr ""

#: ../mastering-plone/installation.rst:24
msgid "5.0.x"
msgstr ""

#: ../mastering-plone/installation.rst:25
msgid "5.1.x"
msgstr ""

#: ../mastering-plone/installation.rst:25
msgid "2.7.9"
msgstr ""

#: ../mastering-plone/installation.rst:28
msgid "(Hopefully you won't have to deal with any Plone sites older than version 4.3.x)"
msgstr ""

#: ../mastering-plone/installation.rst:30
msgid "Plone 5.x requires a working Python 2.7 and other system tools that not every OS provides. The installation of Plone is different on every system. Here are some ways that Python can be used:"
msgstr ""

#: ../mastering-plone/installation.rst:36
msgid "Plone 4.3.x and Plone 5.x require a working Python 2.7 and other tools."
msgstr ""

#: ../mastering-plone/installation.rst:38
msgid "Installation is different on every system."
msgstr ""

#: ../mastering-plone/installation.rst:40
msgid "use a Python that comes pre-installed in your operating system (most Linux Distributions and macOS have one)"
msgstr ""

#: ../mastering-plone/installation.rst:41
msgid "use the `python buildout <https://github.com/collective/buildout.python>`_"
msgstr ""

#: ../mastering-plone/installation.rst:42
msgid "building Linux packages"
msgstr ""

#: ../mastering-plone/installation.rst:43
msgid "`Homebrew <https://brew.sh>`_ (macOS)"
msgstr ""

#: ../mastering-plone/installation.rst:44
msgid "PyWin32 (Windows)"
msgstr ""

#: ../mastering-plone/installation.rst:48
msgid "macOS 10.8 - 10.11 and Ubuntu 14.04 come with a working default Python 2.7 built in. These are the lucky ones."
msgstr ""

#: ../mastering-plone/installation.rst:51
msgid "Most developers use their primary system to develop Plone. For complex setups they often use Linux virtual machines."
msgstr ""

#: ../mastering-plone/installation.rst:54
msgid "macOS: Use the system python and `Homebrew <https://brew.sh>`_ for some missing Linux tools."
msgstr ""

#: ../mastering-plone/installation.rst:55
msgid "Linux: Depending on your Linux flavor you might have to build python yourself and install some tools."
msgstr ""

#: ../mastering-plone/installation.rst:56
msgid "Windows: Alan Runyan (one of Plone's founders) uses it. A downside: Plone seems to be running slower on Windows."
msgstr ""

#: ../mastering-plone/installation.rst:58
msgid "Plone offers multiple options for being installed:"
msgstr ""

#: ../mastering-plone/installation.rst:60
msgid "Unified installers (all 'nix, including macOS)"
msgstr ""

#: ../mastering-plone/installation.rst:61
msgid "A Vagrant/VirtualBox install kit (all platforms)"
msgstr ""

#: ../mastering-plone/installation.rst:62
msgid "A VirtualBox Appliance"
msgstr ""

#: ../mastering-plone/installation.rst:63
msgid "Use your own Buildout"
msgstr ""

#: ../mastering-plone/installation.rst:65
msgid "Visit the `download page <https://plone.org/download>`_ to see all the options."
msgstr ""

#: ../mastering-plone/installation.rst:70
msgid "For the training we will use option 2 and 4 to install and run Plone. We will create our own Buildout and extend it as we wish. We will do so in a Vagrant machine."
msgstr ""

#: ../mastering-plone/installation.rst:74
msgid "For your own first experiments we recommend option 1 or 2 (if you have a Windows laptop or encounter problems). Later on you should be able to use your own Buildout (we will cover that later on)."
msgstr ""

#: ../mastering-plone/installation.rst:79
msgid "For the training we will use option 2 and 4 to install and run Plone."
msgstr ""

#: ../mastering-plone/installation.rst:83
msgid "https://docs.plone.org/manage/installing/installation.html"
msgstr ""

#: ../mastering-plone/installation.rst:89
msgid "Hosting Plone"
msgstr ""

#: ../mastering-plone/installation.rst:93
msgid "If you want to host a real live Plone site yourself then running it from your laptop is not a viable option."
msgstr ""

#: ../mastering-plone/installation.rst:95
msgid "You can host Plone..."
msgstr ""

#: ../mastering-plone/installation.rst:97
msgid "with one of many professional `hosting providers <http://plone.com/providers>`_"
msgstr ""

#: ../mastering-plone/installation.rst:98
msgid "on a virtual private server"
msgstr ""

#: ../mastering-plone/installation.rst:99
msgid "on dedicated servers"
msgstr ""

#: ../mastering-plone/installation.rst:100
msgid "on `Heroku <https://www.heroku.com>`_ you can run Plone for *free* using the `Heroku buildpack for Plone <https://github.com/plone/heroku-buildpack-plone>`_"
msgstr ""

#: ../mastering-plone/installation.rst:106
msgid "Plone Installation Requirements: https://docs.plone.org/manage/installing/requirements.html"
msgstr ""

#: ../mastering-plone/installation.rst:107
msgid "Run Plone on a 5$ plan: https://www.stevemcmahon.com/steves-blog/plone-on-5-a-month"
msgstr ""

#: ../mastering-plone/installation.rst:108
msgid "Where to host Plone: https://old.plone.org/documentation/faq/where-can-i-host-my-plone-site"
msgstr ""

#: ../mastering-plone/installation.rst:114
msgid "Production Deployment"
msgstr ""

#: ../mastering-plone/installation.rst:116
msgid "The way we are setting up a Plone site during this class may be adequate for a small site — or even a large one that's not very busy — but you are likely to want to do much more if you are using Plone for anything demanding."
msgstr ""

#: ../mastering-plone/installation.rst:119
msgid "Using a production web server like Apache or Nginx for URL rewriting, SSL and combining multiple, best-of-breed solutions into a single web site."
msgstr ""

#: ../mastering-plone/installation.rst:121
msgid "Reverse proxy caching with a tool like Varnish to improve site performance."
msgstr ""

#: ../mastering-plone/installation.rst:123
msgid "Load balancing to make best use of multiple core CPUs and even multiple servers."
msgstr ""

#: ../mastering-plone/installation.rst:125
msgid "Optimizing cache headers and Plone's internal caching schemes with plone.app.caching."
msgstr ""

#: ../mastering-plone/installation.rst:127
msgid "And, you will need to learn strategies for efficient backup and log file rotation."
msgstr ""

#: ../mastering-plone/installation.rst:129
msgid "All these topics are introduced in `Guide to deploying and installing Plone in production <https://docs.plone.org/manage/deploying/index.html>`_."
msgstr ""

#: ../mastering-plone/intro.rst:5
msgid "Introduction"
msgstr ""

#: ../mastering-plone/intro.rst:11
msgid "Who are you?"
msgstr ""

#: ../mastering-plone/intro.rst:13
msgid "Tell us about yourselves:"
msgstr ""

#: ../mastering-plone/intro.rst:15
msgid "Name, company, country..."
msgstr ""

#: ../mastering-plone/intro.rst:16
msgid "What is your Plone experience?"
msgstr ""

#: ../mastering-plone/intro.rst:17
msgid "What is your web development experience?"
msgstr ""

#: ../mastering-plone/intro.rst:18
msgid "What are your expectations for this tutorial?"
msgstr ""

#: ../mastering-plone/intro.rst:19
msgid "What is your favorite text editor?"
msgstr ""

#: ../mastering-plone/intro.rst:41
msgid "If this training will include the development chapters:"
msgstr ""

#: ../mastering-plone/intro.rst:21
msgid "Do you know the HTML of the output of this?"
msgstr ""

#: ../mastering-plone/intro.rst:34
msgid "The answer is::"
msgstr ""

#: ../mastering-plone/intro.rst:38
msgid "Do you know what the following would return?::"
msgstr ""

#: ../mastering-plone/intro.rst:46
msgid "What will we do?"
msgstr ""

#: ../mastering-plone/intro.rst:48
msgid "Some technologies and tools we use during the training:"
msgstr ""

#: ../mastering-plone/intro.rst:50
msgid "For the beginning training:"
msgstr ""

#: ../mastering-plone/intro.rst:52
msgid "`Virtualbox <https://www.virtualbox.org/>`_"
msgstr ""

#: ../mastering-plone/intro.rst:53
msgid "`Vagrant <https://www.vagrantup.com/>`_"
msgstr ""

#: ../mastering-plone/intro.rst:54
msgid "`Ubuntu linux <https://www.ubuntu.com/>`_"
msgstr ""

#: ../mastering-plone/intro.rst:55
msgid "Through-the-web (TTW)"
msgstr ""

#: ../mastering-plone/intro.rst:56
msgid "`Buildout <http://www.buildout.org/en/latest/>`_"
msgstr ""

#: ../mastering-plone/intro.rst:57
msgid "A little XML"
msgstr ""

#: ../mastering-plone/intro.rst:58
msgid "A little Python"
msgstr ""

#: ../mastering-plone/intro.rst:60
msgid "For the advanced chapters:"
msgstr ""

#: ../mastering-plone/intro.rst:62
msgid "`Git <https://git-scm.com/>`_"
msgstr ""

#: ../mastering-plone/intro.rst:63
msgid "`GitHub <https://github.com>`_"
msgstr ""

#: ../mastering-plone/intro.rst:64
msgid "`Try Git (Nice introduction to git and github) <https://try.github.io/levels/1/challenges/1>`_"
msgstr ""

#: ../mastering-plone/intro.rst:65
msgid "TAL"
msgstr ""

#: ../mastering-plone/intro.rst:66
#: ../mastering-plone/zpt.rst:23
msgid "METAL"
msgstr ""

#: ../mastering-plone/intro.rst:68
msgid "`Python <https://www.python.org>`_"
msgstr ""

#: ../mastering-plone/intro.rst:69
msgid "Dexterity"
msgstr ""

#: ../mastering-plone/intro.rst:71
msgid "`JQuery <http://jquery.com/>`_"
msgstr ""

#: ../mastering-plone/intro.rst:72
msgid "`Testing <https://docs.plone.org/external/plone.app.testing/docs/source/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:73
msgid "`References/Relations <https://docs.plone.org/external/plone.app.dexterity/docs/advanced/references.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:78
msgid "What will we not do?"
msgstr ""

#: ../mastering-plone/intro.rst:80
msgid "We will not cover the following topics:"
msgstr ""

#: ../mastering-plone/intro.rst:82
msgid "`Archetypes <https://docs.plone.org/old-reference-manuals/archetypes/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:83
msgid "`Portlets <https://docs.plone.org/old-reference-manuals/portlets/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:84
msgid "`z3c.forms <https://docs.plone.org/develop/plone/forms/z3c.form.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:85
msgid "`Theming <https://docs.plone.org/adapt-and-extend/theming/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:86
msgid "`i18n and locales <https://docs.plone.org/develop/plone/i18n/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:87
msgid "`Deployment, Hosting and Caching <https://docs.plone.org/manage/deploying/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:88
#: ../mastering-plone/optional.rst:19
msgid ":doc:`grok`"
msgstr ""

#: ../mastering-plone/intro.rst:90
msgid "Other topics are only covered lightly:"
msgstr ""

#: ../mastering-plone/intro.rst:92
msgid "`Zope Component Architecture <https://docs.plone.org/develop/addons/components/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:93
msgid "`GenericSetup <https://docs.plone.org/develop/addons/components/genericsetup.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:94
msgid "`ZODB <https://docs.plone.org/develop/plone/persistency/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:95
msgid "`Security <https://docs.plone.org/develop/plone/security/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:96
msgid "`Permissions <https://docs.plone.org/develop/plone/security/permissions.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:97
msgid "`Performance and Caching <https://docs.plone.org/manage/deploying/testing_tuning/performance/index.html>`_"
msgstr ""

#: ../mastering-plone/intro.rst:102
msgid "What to expect"
msgstr ""

#: ../mastering-plone/intro.rst:104
msgid "At the end of the first two days of training, you'll know many of the tools required for Plone installation, integration and configuration."
msgstr ""

#: ../mastering-plone/intro.rst:107
msgid "You'll be able to install add-on packages and will know something about the technologies underlying Plone and their histories."
msgstr ""

#: ../mastering-plone/intro.rst:109
msgid "At the end of the second two days, you won't be a complete professional Plone-programmer, but you will know some of the more powerful features of Plone and should be able to construct a more complex website with custom themes and packages."
msgstr ""

#: ../mastering-plone/intro.rst:112
msgid "You should also be able to find out where to look for instructions to do tasks we did not cover. You will know most of the core technologies involved in Plone programming."
msgstr ""

#: ../mastering-plone/intro.rst:115
msgid "If you want to become a professional Plone developer or a highly sophisticated Plone integrator you should definitely read `Martin Aspeli's book <https://www.packtpub.com/web-development/professional-plone-4-development>`_ and then re-read it again while actually doing a complex project."
msgstr ""

#: ../mastering-plone/intro.rst:123
msgid "Classroom Protocol"
msgstr ""

#: ../mastering-plone/intro.rst:129
msgid "Stop us and ask questions when you have them!"
msgstr ""

#: ../mastering-plone/intro.rst:130
msgid "Tell us if we speak too fast, too slow or not loud enough."
msgstr ""

#: ../mastering-plone/intro.rst:131
msgid "One of us is always there to help you if you are stuck. Please give us a sign if you are stuck."
msgstr ""

#: ../mastering-plone/intro.rst:132
msgid "We'll take some breaks, the first one will be at XX."
msgstr ""

#: ../mastering-plone/intro.rst:133
msgid "Where is food, restrooms"
msgstr ""

#: ../mastering-plone/intro.rst:134
msgid "Someone please record the time we take for each chapter (incl. title)"
msgstr ""

#: ../mastering-plone/intro.rst:135
msgid "Someone please write down errors"
msgstr ""

#: ../mastering-plone/intro.rst:136
msgid "Contact us after the training: team@starzel.de"
msgstr ""

#: ../mastering-plone/intro.rst:138
msgid "**Questions to ask:**"
msgstr ""

#: ../mastering-plone/intro.rst:140
msgid "What did you just say?"
msgstr ""

#: ../mastering-plone/intro.rst:141
msgid "Please explain what we just did again?"
msgstr ""

#: ../mastering-plone/intro.rst:142
msgid "How did that work?"
msgstr ""

#: ../mastering-plone/intro.rst:143
msgid "Why didn't that work for me?"
msgstr ""

#: ../mastering-plone/intro.rst:144
msgid "Is that a typo?"
msgstr ""

#: ../mastering-plone/intro.rst:146
msgid "**Questions __not__ to ask:**"
msgstr ""

#: ../mastering-plone/intro.rst:148
msgid "**Hypotheticals**: What happens if I do X?"
msgstr ""

#: ../mastering-plone/intro.rst:149
msgid "**Research**: Can Plone do Y?"
msgstr ""

#: ../mastering-plone/intro.rst:150
msgid "**Syllabus**: Are we going to cover Z in class?"
msgstr ""

#: ../mastering-plone/intro.rst:151
msgid "**Marketing questions**: please just don't."
msgstr ""

#: ../mastering-plone/intro.rst:152
msgid "**Performance questions**: Is Plone fast enough?"
msgstr ""

#: ../mastering-plone/intro.rst:153
msgid "**Unpythonic**: Why doesn't Plone do it some other way?"
msgstr ""

#: ../mastering-plone/intro.rst:154
msgid "**Show off**: Look what I just did!"
msgstr ""

#: ../mastering-plone/intro.rst:159
msgid "Documentation"
msgstr ""

#: ../mastering-plone/intro.rst:161
msgid "Follow the training at https://training.plone.org/5"
msgstr ""

#: ../mastering-plone/intro.rst:165
msgid "You can use this presentation to copy & paste the code but you will memorize more if you type yourself."
msgstr ""

#: ../mastering-plone/intro.rst:171
msgid "Further Reading"
msgstr ""

#: ../mastering-plone/intro.rst:173
msgid "`Martin Aspeli: Professional Plone4 Development <https://www.packtpub.com/web-development/professional-plone-4-development>`_"
msgstr ""

#: ../mastering-plone/intro.rst:174
msgid "`Practical Plone <https://www.packtpub.com/web-development/practical-plone-3-beginners-guide-building-powerful-websites>`_"
msgstr ""

#: ../mastering-plone/intro.rst:175
msgid "`Zope Page Templates Reference <https://zope.readthedocs.io/en/latest/zope2book/AppendixC.html>`_"
msgstr ""

#: ../mastering-plone/optional.rst:4
msgid "Optional"
msgstr ""

#: ../mastering-plone/optional.rst:6
msgid "zc3.form"
msgstr ""

#: ../mastering-plone/optional.rst:8
msgid "ZCA in depth"
msgstr ""

#: ../mastering-plone/optional.rst:9
msgid "ZODB"
msgstr ""

#: ../mastering-plone/optional.rst:10
msgid "RelStorage"
msgstr ""

#: ../mastering-plone/optional.rst:11
msgid "More and more complex fields"
msgstr ""

#: ../mastering-plone/optional.rst:12
msgid "Custom edit forms"
msgstr ""

#: ../mastering-plone/optional.rst:13
msgid "Users, authentication, member profiles, LDAP"
msgstr ""

#: ../mastering-plone/optional.rst:14
msgid "Caching (plone.app.caching)"
msgstr ""

#: ../mastering-plone/optional.rst:15
msgid "Migrations"
msgstr ""

#: ../mastering-plone/optional.rst:16
msgid "Asynchronous processing"
msgstr ""

#: ../mastering-plone/optional.rst:17
msgid "Talking with external APIs"
msgstr ""

#: ../mastering-plone/optional.rst:20
msgid "Professional Deployment"
msgstr ""

#: ../mastering-plone/plone5.rst:4
msgid "What's New in Plone 5 and 5.1"
msgstr ""

#: ../mastering-plone/plone5.rst:6
msgid "Plone 5.0 was released in September 2015 and is the currently at version 5.0.8 main version if Plone. Plone 5 was a mayor release, that changed the content type framework, the user interface and the default design."
msgstr ""

#: ../mastering-plone/plone5.rst:8
msgid "Plone 5.1 will be released in October 2017 and holds a couple of smaller improvements."
msgstr ""

#: ../mastering-plone/plone5.rst:10
msgid "If you are already familiar with Plone 5 and 5.1 you can skip this section."
msgstr ""

#: ../mastering-plone/plone5.rst:16
msgid "Default Theme"
msgstr ""

#: ../mastering-plone/plone5.rst:18
msgid "The new default theme is called `Barceloneta <https://github.com/plone/plonetheme.barceloneta/>`_"
msgstr ""

#: ../mastering-plone/plone5.rst:20
msgid "It is a Diazo theme, meaning it uses :py:mod:`plone.app.theming` to insert the output of Plone into static html/css."
msgstr ""

#: ../mastering-plone/plone5.rst:22
msgid "It uses html5, so it uses ``<header>``, ``<nav>``, ``<aside>``, ``<section>``, ``<article>`` and ``<footer>`` for semantic html."
msgstr ""

#: ../mastering-plone/plone5.rst:24
msgid "The theme is mostly built with `LESS <http://lesscss.org/>`_ (lots of it!) and uses the same grid system as `bootstrap <http://getbootstrap.com/css/#grid>`_. This means you can use css classes like ``col-xs-12 col-sm-9`` to control the width of elements for different screen-sizes. If you prefer a different grid-system (like `foundation <https://foundation.zurb.com/sites/docs/grid.html>`_) over bootstrap you can adapt the theme to use that."
msgstr ""

#: ../mastering-plone/plone5.rst:26
msgid "The `index.html <https://github.com/plone/plonetheme.barceloneta/blob/master/plonetheme/barceloneta/theme/index.html>`_ and `rules.xml <https://github.com/plone/plonetheme.barceloneta/blob/master/plonetheme/barceloneta/theme/rules.xml>`_ are actually not that complicated. Have a look at them."
msgstr ""

#: ../mastering-plone/plone5.rst:28
msgid "The following example from :file:`rules.xml` makes sure that the banner saying *\"Welcome! Plone 5 rocks!\"* is only visible on the frontpage:"
msgstr ""

#: ../mastering-plone/plone5.rst:38
msgid "The browser-view ``@@hero`` (you can find it by searching all ZCML-files for ``name=\"hero\"``) is only included when the body-tag of the current page has the css-classes ``template-document_view`` and ``section-front-page``."
msgstr ""

#: ../mastering-plone/plone5.rst:44
msgid "New UI and widgets"
msgstr ""

#: ../mastering-plone/plone5.rst:46
msgid "The green edit bar is replaced by a toolbar that is located on the left or top and can be expanded. The design of the toolbar is pretty isolated from the theme and it should not break if you use a different theme."
msgstr ""

#: ../mastering-plone/plone5.rst:48
msgid "The widgets where you input data are also completely rewritten."
msgstr ""

#: ../mastering-plone/plone5.rst:50
msgid "We now use the newest TinyMCE"
msgstr ""

#: ../mastering-plone/plone5.rst:51
msgid "The tags (keywords) widget and the widgets where you input usernames now use `select2 <http://select2.github.io>`_ autocomplete to give a better user experience"
msgstr ""

#: ../mastering-plone/plone5.rst:52
msgid "The related-items widget is a complete rewrite"
msgstr ""

#: ../mastering-plone/plone5.rst:58
msgid "Folder Contents"
msgstr ""

#: ../mastering-plone/plone5.rst:60
msgid "The view to display the content of a folder is new and offers many new features:"
msgstr ""

#: ../mastering-plone/plone5.rst:62
msgid "configurable table columns"
msgstr ""

#: ../mastering-plone/plone5.rst:63
msgid "changing properties of multiple items at once"
msgstr ""

#: ../mastering-plone/plone5.rst:64
msgid "querying (useful for folders with a lot of content)"
msgstr ""

#: ../mastering-plone/plone5.rst:65
msgid "persistent selection of items"
msgstr ""

#: ../mastering-plone/plone5.rst:71
msgid "Content Types"
msgstr ""

#: ../mastering-plone/plone5.rst:73
msgid "All default types are based on Dexterity. This means you can use behaviors to change their features and edit them through the web. Existing old content can be migrated to these types."
msgstr ""

#: ../mastering-plone/plone5.rst:79
msgid "Resource Registry"
msgstr ""

#: ../mastering-plone/plone5.rst:81
msgid "The resource registry allows you to configure and edit the static resources (js, css) of Plone. It replaces the old javascript and css registries. And it can be used to customize the theme by changing the variables used by LESS or overriding LESS files."
msgstr ""

#: ../mastering-plone/plone5.rst:87
msgid "Chameleon template engine"
msgstr ""

#: ../mastering-plone/plone5.rst:89
msgid "`Chameleon <https://chameleon.readthedocs.io/en/latest/>`_ is the new rendering engine of Plone 5. It offers many improvements:"
msgstr ""

#: ../mastering-plone/plone5.rst:91
msgid "Old syntax:"
msgstr ""

#: ../mastering-plone/plone5.rst:99
msgid "New (additional) syntax:"
msgstr ""

#: ../mastering-plone/plone5.rst:107
msgid "Template debugging:"
msgstr ""

#: ../mastering-plone/plone5.rst:109
msgid "You can now put a full-grown ``pdb`` in a template."
msgstr ""

#: ../mastering-plone/plone5.rst:115
msgid "For debugging check out the variable :py:obj:`econtext`, it holds all the current elements."
msgstr ""

#: ../mastering-plone/plone5.rst:117
msgid "You can also add real Python blocks inside templates."
msgstr ""

#: ../mastering-plone/plone5.rst:138
msgid "Don't overdo it!"
msgstr ""

#: ../mastering-plone/plone5.rst:144
msgid "Control panel"
msgstr ""

#: ../mastering-plone/plone5.rst:146
msgid "You can finally upload a logo in ``@@site-controlpanel``."
msgstr ""

#: ../mastering-plone/plone5.rst:147
msgid "All control panels were moved to z3c.form"
msgstr ""

#: ../mastering-plone/plone5.rst:148
msgid "Many small improvements"
msgstr ""

#: ../mastering-plone/plone5.rst:154
msgid "Date formatting on the client side"
msgstr ""

#: ../mastering-plone/plone5.rst:156
msgid "Using the js library moment.js the formatting of dates was moved to the client."
msgstr ""

#: ../mastering-plone/plone5.rst:166
msgid "returns"
msgstr ""

#: ../mastering-plone/plone5.rst:168
msgid "Today at 3:24 PM"
msgstr ""

#: ../mastering-plone/plone5.rst:169
msgid "10/22/2015"
msgstr ""

#: ../mastering-plone/plone5.rst:175
msgid "plone.app.multilingual"
msgstr ""

#: ../mastering-plone/plone5.rst:177
msgid "`plone.app.multilingual <https://github.com/plone/plone.app.multilingual>`_ is the new default add-on for sites in more than one language."
msgstr ""

#: ../mastering-plone/plone5.rst:183
msgid "New portlet manager"
msgstr ""

#: ../mastering-plone/plone5.rst:185
msgid "``plone.footerportlets`` is a new place to put portlets. The footer (holding the footer, site_actions, colophon) is now built from portlets. This means you can edit the footer TTW."
msgstr ""

#: ../mastering-plone/plone5.rst:187
msgid "There is also a useful new portlet type :guilabel:`Actions` used for displaying the site_actions."
msgstr ""

#: ../mastering-plone/plone5.rst:193
msgid "Remove portal_skins"
msgstr ""

#: ../mastering-plone/plone5.rst:195
msgid "Many of the old skin templates were replaced by real browser views."
msgstr ""

#: ../mastering-plone/plone5.rst:199
msgid "Plone 5.1"
msgstr ""

#: ../mastering-plone/plone5.rst:201
msgid "Plone 5.1 holds a long list of incremental improvements. But none really changes the way you develop for Plone. Here are three noteworthy changes:"
msgstr ""

#: ../mastering-plone/plone5.rst:203
msgid "The operations for indexing, reindexing and unindexing are queued, optimized and only processed at the end of the transaction. This change can have big performance benefits."
msgstr ""

#: ../mastering-plone/plone5.rst:205
msgid "Actions now have a user-interface in the Plone control panel. You no longer need to use the ZMI to manage them by hand."
msgstr ""

#: ../mastering-plone/plone5.rst:207
msgid "\"Retina\" Image scales: Plone now has scales for high pixel density images."
msgstr ""

#: ../mastering-plone/plone5.rst:209
msgid "For a longer list of changes see the `upgrade-guide <https://docs.plone.org/manage/upgrading/version_specific_migration/index.html>`_ (once 5.1 is released)."
msgstr ""

#: ../mastering-plone/registry.rst:4
msgid "Manage Settings with Registry, Controlpanels and Vocabularies"
msgstr ""

#: ../mastering-plone/registry.rst:17
msgid "Store a custom setting in a registry"
msgstr ""

#: ../mastering-plone/registry.rst:18
msgid "Create a controlpanel using z3c.form to allow setting that value"
msgstr ""

#: ../mastering-plone/registry.rst:23
msgid "plone.app.registry"
msgstr ""

#: ../mastering-plone/registry.rst:24
msgid "controlpanels"
msgstr ""

#: ../mastering-plone/registry.rst:28
msgid "The Registry"
msgstr ""

#: ../mastering-plone/registry.rst:30
msgid "The registry is used to get and set values stored in records. Each record contains the actual value, as well as a field that describes the record in more detail. It has a nice dict-like API."
msgstr ""

#: ../mastering-plone/registry.rst:32
msgid "All global settings in Plone 5 are stored in the registry."
msgstr ""

#: ../mastering-plone/registry.rst:34
msgid "The registry itself is provided by `plone.registry <https://pypi.org/project/plone.registry>`_ and the UI to interact with it by `plone.app.registry <https://pypi.org/project/plone.app.registry>`_"
msgstr ""

#: ../mastering-plone/registry.rst:36
msgid "Almost all settings in ``/plone_control_panel`` are actually stored in the registry and can be modified using its UI directly."
msgstr ""

#: ../mastering-plone/registry.rst:38
msgid "Open http://localhost:8080/Plone/portal_registry and filter for ``displayed_types``. You see can modify the content types that should be shown in the navigation and site map. The values are the same as in http://localhost:8080/Plone/@@navigation-controlpanel but the later form is customized for usability."
msgstr ""

#: ../mastering-plone/registry.rst:41
msgid "A setting"
msgstr ""

#: ../mastering-plone/registry.rst:43
msgid "Let's store two values in the registry:"
msgstr ""

#: ../mastering-plone/registry.rst:45
msgid "The date of the conference"
msgstr ""

#: ../mastering-plone/registry.rst:46
msgid "Is talk submission open or closed"
msgstr ""

#: ../mastering-plone/registry.rst:48
msgid "You cannot create values ttw, instead they need to be registered using Generic Setup."
msgstr ""

#: ../mastering-plone/registry.rst:50
msgid "Open the file :file:`profiles/default/registry.xml`. You already registered several new settings in there:"
msgstr ""

#: ../mastering-plone/registry.rst:52
msgid "You enabled self registration"
msgstr ""

#: ../mastering-plone/registry.rst:53
msgid "You stored a site-logo"
msgstr ""

#: ../mastering-plone/registry.rst:54
msgid "You registered additional criteria useable for Collections"
msgstr ""

#: ../mastering-plone/registry.rst:57
msgid "Adding the following code to :file:`registry.xml`. This creates a new value in the registry upon installation of the package."
msgstr ""

#: ../mastering-plone/registry.rst:70
msgid "When creating a new site a lot of settings are created in the same way. See https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/profiles/dependencies/registry.xml to see how :py:mod:`Products.CMFPlone` registers values."
msgstr ""

#: ../mastering-plone/registry.rst:84
msgid "Accessing and modifying values in the registry"
msgstr ""

#: ../mastering-plone/registry.rst:86
msgid "In python you can access the registry like this:"
msgstr ""

#: ../mastering-plone/registry.rst:97
msgid ":py:mod:`plone.api` holds methods to make this even easier:"
msgstr ""

#: ../mastering-plone/registry.rst:107
msgid "Add a custom controlpanel"
msgstr ""

#: ../mastering-plone/registry.rst:109
msgid "When you want to add a custom controlpanel it is usually more convenient to register the fields not manually like above but as field in a schema, similar to a content-types schema."
msgstr ""

#: ../mastering-plone/registry.rst:111
msgid "For this you define a interface for the schema and a view that auto-generates a form from the schema. In :file:`browser/configure.zcml` add:"
msgstr ""

#: ../mastering-plone/registry.rst:122
msgid "Add a file :file:`browser/controlpanel.py`:"
msgstr ""

#: ../mastering-plone/registry.rst:161
msgid "With this way of using fields you don't have to register the values in :file:`registry.xml`, instead you have to register the interface:"
msgstr ""

#: ../mastering-plone/registry.rst:168
msgid "After reinstalling the package (to load the registry-entry) you can access the controlpanel at http://localhost:8080/Plone/@@ploneconf-controlpanel."
msgstr ""

#: ../mastering-plone/registry.rst:170
msgid "To make it show up in the general controlpanel at http://localhost:8080/Plone/@@overview-controlpanel you have to register it with GenericSetup. Add a file :file:`profiles/default/controlpanel.xml`:"
msgstr ""

#: ../mastering-plone/registry.rst:190
msgid "Again, after applying the profile (reinstall the package or write a upgrade-step) your controlpanel shows up in http://localhost:8080/Plone/@@overview-controlpanel."
msgstr ""

#: ../mastering-plone/registry.rst:194
msgid "Vocabularies"
msgstr ""

#: ../mastering-plone/registry.rst:196
msgid "Do you remember the field `rooms`? We provided several options to chose from. But who says that the next conference will have the same rooms? These values should be configurable by the admin. The admin could go to the dexterity-controlpanel and change the values but we will use a different approach. We will allow the rooms to be added in the controlpanel and use these values in the talk-schema by registering a vocabulary."
msgstr ""

#: ../mastering-plone/registry.rst:202
msgid "Add a new field to :py:class:`IPloneconfControlPanel`:"
msgstr ""

#: ../mastering-plone/registry.rst:215
msgid "Create a file :file:`vocabularies.py` and write the vocabulary:"
msgstr ""

#: ../mastering-plone/registry.rst:231
msgid "You can now register this vocabulary as a named utility in :file:`configure.zcml` as `ploneconf.site.vocabularies.Rooms`:"
msgstr ""

#: ../mastering-plone/registry.rst:239
msgid "From now on you can use this vocabulary by only referring to its name `ploneconf.site.vocabularies.Rooms`."
msgstr ""

#: ../mastering-plone/registry.rst:243
msgid "Plone comes with many useful vocabularies that you can use in your own projects. See https://github.com/plone/plone.app.vocabularies/ for a list of them."
msgstr ""

#: ../mastering-plone/registry.rst:244
msgid "We turn the values from the registry into a dynamic `SimpleVocabulary` that can be used in the schema."
msgstr ""

#: ../mastering-plone/registry.rst:245
msgid "You could use the context with which the vocabulary is called or the request (using `getRequest` from `from zope.globalrequest import getRequest`) to constrain the values in the vocabulary."
msgstr ""

#: ../mastering-plone/registry.rst:246
msgid "We use the handy helper-method `safe_simplevocabulary_from_values` to create the vocabulary since the `token` of a `SimpleTerm` in a `SimpleVocabulary` needs to be bytes, not unicode."
msgstr ""

#: ../mastering-plone/registry.rst:247
msgid "You can write your own helper to further control the creation of the vocabulary terms. The `value` is stored on the object, the `token` used to communicate with the widget during editing and `title` is what is displayed in the widget. This example allows you to translate the displayed title while keeping the value stored on the object the same in all languages:"
msgstr ""

#: ../mastering-plone/registry.rst:262
msgid "Use the new vocabulary in the talk-schema. Edit :file:`content/talk.xml`"
msgstr ""

#: ../mastering-plone/registry.rst:278
msgid "In a python-schema that would look like this:"
msgstr ""

#: ../mastering-plone/registry.rst:289
msgid "A admin can now configure the rooms available for the conference."
msgstr ""

#: ../mastering-plone/registry.rst:291
msgid "We could use the same pattern for the fields `type_of_talk` and `audience`."
msgstr ""

#: ../mastering-plone/registry.rst:295
msgid "https://docs.plone.org/external/plone.app.dexterity/docs/advanced/vocabularies.html"
msgstr ""

#: ../mastering-plone/relations.rst:2
msgid "Relations"
msgstr ""

#: ../mastering-plone/relations.rst:4
msgid "You can model relationships between content items by placing them in a hierarchy (a folder *speakers* containing the (folderish) speakers and within each speaker the talks) or by linking them to each other in Richtext-Fields. But where would you store a talk that two speakers give together?"
msgstr ""

#: ../mastering-plone/relations.rst:6
msgid "Relations allow developers to model relationships between objects without a links or a hierarchy. The behavior :py:class:`plone.app.relationfield.behavior.IRelatedItems` provides the field :guilabel:`Related Items` in the tab :guilabel:`Categorization`. That field simply says ``a`` is somehow related to ``b``."
msgstr ""

#: ../mastering-plone/relations.rst:8
msgid "By using custom relations you can model your data in a much more meaningful way."
msgstr ""

#: ../mastering-plone/relations.rst:12
msgid "Creating relations in a schema"
msgstr ""

#: ../mastering-plone/relations.rst:14
msgid "Relate to one item only."
msgstr ""

#: ../mastering-plone/relations.rst:28
msgid "Relate to multiple items."
msgstr ""

#: ../mastering-plone/relations.rst:44
msgid "We can see that the `code for the behavior IRelatedItems <https://github.com/plone/plone.app.relationfield/blob/master/plone/app/relationfield/behavior.py>`_ does exactly the same."
msgstr ""

#: ../mastering-plone/relations.rst:46
msgid "Instead of using a named vocabulary we can also use ``source``:"
msgstr ""

#: ../mastering-plone/relations.rst:62
msgid "To ``CatalogSource`` you can pass the same argument that you use for catalog-queries. This makes it very flexible to limit relateable items by type, path, date etc."
msgstr ""

#: ../mastering-plone/relations.rst:65
msgid "For even more flexibility you can create your own `dynamic vocabularies <https://docs.plone.org/external/plone.app.dexterity/docs/advanced/vocabularies.html#dynamic-sources>`_."
msgstr ""

#: ../mastering-plone/relations.rst:69
msgid "Accessing and displaying related items"
msgstr ""

#: ../mastering-plone/relations.rst:71
msgid "One would think that it would be the easiest approach to simply use the render-method of the default-widget like we did in the chapter \"Views II: A Default View for 'Talk'\". Sadly that is wrong. Adding the approriate code to te template:"
msgstr ""

#: ../mastering-plone/relations.rst:77
msgid "would only render the UIDs of the related items:"
msgstr ""

#: ../mastering-plone/relations.rst:85
msgid "This is not very useful but anyway it is very likely that you want to control closely how to render these items."
msgstr ""

#: ../mastering-plone/relations.rst:87
msgid "So we add a method to the view to return the related items so that we're able to render anyway we like."
msgstr ""

#: ../mastering-plone/relations.rst:104
msgid "We use :py:meth:`rel.to_path` and use the items path to query the catalog for its catalog-entry. This is much more efficient than using :py:meth:`rel.to_object` since we don't have to wake up any objects. Setting ``depth`` to ``0`` will only return items with exactly this path, so it will always return a list with one item."
msgstr ""

#: ../mastering-plone/relations.rst:108
msgid "Using the path sounds a little complicated and it would indeed be more convenient if a :py:class:`RelationItem` would contain the ``UID`` (so we can query the catalog for that) or if the ``portal_catalog`` would index the ``IntId``. But that's the way it is for now."
msgstr ""

#: ../mastering-plone/relations.rst:110
msgid "For reference look at how the default viewlet displays the information for related items stored by the behavior :py:class:`IRelatedItems`. See how it does exactly the same in ``related2brains``. This is the Python-path for the viewlet: :py:class:`plone.app.layout.viewlets.content.ContentRelatedItems` This is the file-path for the template: :file:`plone/app/layout/viewlets/document_relateditems.pt`"
msgstr ""

#: ../mastering-plone/relations.rst:116
msgid "Creating Relationfields through the web"
msgstr ""

#: ../mastering-plone/relations.rst:118
msgid "It is surprisingly easy to create RelationFields through the web"
msgstr ""

#: ../mastering-plone/relations.rst:120
msgid "In the dexterity schema-editor add a new field and select *Relation List* or *Relation Choice*, depending on wether you want to relate to multiple items or not."
msgstr ""

#: ../mastering-plone/relations.rst:121
msgid "When configuring the field you can even select the content-type the relation should be limited to."
msgstr ""

#: ../mastering-plone/relations.rst:123
msgid "When you click on ``Edit xml field model`` you will see the fields in the xml-schema:"
msgstr ""

#: ../mastering-plone/relations.rst:125
msgid "RelationChoice:"
msgstr ""

#: ../mastering-plone/relations.rst:135
msgid "RelationList:"
msgstr ""

#: ../mastering-plone/relations.rst:154
msgid "The stack"
msgstr ""

#: ../mastering-plone/relations.rst:156
msgid "Relations are based on `zc.relation <https://pypi.org/project/zc.relation/>`_. This package allows to store transitive and intransitive relationships. It allows for complex relationships and searches along them. Because of this functionality, the package is a bit complicated."
msgstr ""

#: ../mastering-plone/relations.rst:161
msgid "The package `zc.relation` provides its own catalog, a relation catalog. This is a storage optimized for the queries needed. `zc.relation` is sort of an outlier with regards to zope documentation. It has extensive documentation, with a good level of doctests for explaining things."
msgstr ""

#: ../mastering-plone/relations.rst:165
msgid "You can use `zc.relation` to store the objects and its relations directly into the catalog. But the additional packages that make up the relation functionality don't use the catalog this way."
msgstr ""

#: ../mastering-plone/relations.rst:168
msgid "We want to work with schemas to get auto generated forms. The logic for this is provided by the package `z3c.relationfield <https://pypi.org/project/z3c.relationfield/>`_. This package contains the RelationValue object and everything needed to define a relation schema, and all the code that is necessary to automatically update the catalog."
msgstr ""

#: ../mastering-plone/relations.rst:172
msgid "A RelationValue Object does not reference all objects directly. For the target, it uses an id it gets from the `IntId` Utility. This id allows direct recovery of the object. The source object stores it directly."
msgstr ""

#: ../mastering-plone/relations.rst:175
msgid "Widgets are provided by `plone.app.z3cform` and some converters are provided by `plone.app.relationfield`. The widget that Plone uses can also store objects directly. Because of this, the following happens when saving a relation via a form:"
msgstr ""

#: ../mastering-plone/relations.rst:179
msgid "The html shows some nice representation of selectable objects."
msgstr ""

#: ../mastering-plone/relations.rst:180
msgid "When the user submits the form, selected items are submitted by their UUIDs."
msgstr ""

#: ../mastering-plone/relations.rst:181
msgid "The Widget retrieves the original object with the UUID."
msgstr ""

#: ../mastering-plone/relations.rst:182
msgid "Some datamanager gets another unique ID from an IntID Tool."
msgstr ""

#: ../mastering-plone/relations.rst:183
msgid "The same datamanager creates a RelationValue from this id, and stores this relation value on the source object."
msgstr ""

#: ../mastering-plone/relations.rst:184
msgid "Some Event handlers update the catalogs."
msgstr ""

#: ../mastering-plone/relations.rst:186
msgid "You could delete a Relation like this `delattr(rel.from_object, rel.from_attribute)`"
msgstr ""

#: ../mastering-plone/relations.rst:188
msgid "This is a terrible idea by the way, because when you define in your schema that one can store multiple RelationValues, your Relation is stored in a list on this attribute."
msgstr ""

#: ../mastering-plone/relations.rst:190
msgid "Relations depend on a lot of infrastructure to work. This infrastructure in turn depends a lot on event handlers being thrown properly. When this is not the case things can break. Because of this, there is a method `isBroken` which you can use to check if the target is available."
msgstr ""

#: ../mastering-plone/relations.rst:195
msgid "There are alternatives to using Relations. You could instead just store the UUID of an object. But using real relations and the catalog allows for very powerful things. The simplest concrete advantage is the possibility to see what links to your object."
msgstr ""

#: ../mastering-plone/relations.rst:199
msgid "The builtin linkintegrity-feature of Plone 5 is also built using relations."
msgstr ""

#: ../mastering-plone/relations.rst:203
msgid "RelationValues"
msgstr ""

#: ../mastering-plone/relations.rst:205
msgid "RelationValue objects have a fairly complete API. For both target and source, you can receive the IntId, the object and the path. On a RelationValue, the terms `source` and `target` aren't used. Instead, they are `from` and `to`. So the API for getting the target is:"
msgstr ""

#: ../mastering-plone/relations.rst:210
msgid "`to_id`"
msgstr ""

#: ../mastering-plone/relations.rst:211
msgid "`to_path`"
msgstr ""

#: ../mastering-plone/relations.rst:212
msgid "`to_object`"
msgstr ""

#: ../mastering-plone/relations.rst:214
msgid "In addition, the relation value knows under which attribute it has been stored as `from_attribute`. It is usually the name of the field with which the relation is created. But it can also be the name of a relation that is created by code, e.g. linkintegrity-relations (`isReferencing`) or the relation between a working copy and the original (`iterate-working-copy`)."
msgstr ""

#: ../mastering-plone/relations.rst:219
msgid "Accessing relations and backrelations from code"
msgstr ""

#: ../mastering-plone/relations.rst:221
msgid "If you want to find out what objects are related to each other, you use the relation catalog. Here is a convenience-method that allows you to find all kinds of relations."
msgstr ""

#: ../mastering-plone/resources.rst:5
msgid "Resources"
msgstr ""

#: ../mastering-plone/resources.rst:16
msgid "We have not yet talked about CSS and JavaScript. At the moment these are considered static resources."
msgstr ""

#: ../mastering-plone/resources.rst:19
msgid "You can declare and access static resources with special URLs. The `configure.zcml` of our package already has a declaration for a resource-folder :file:`static`."
msgstr ""

#: ../mastering-plone/resources.rst:30
msgid "All files we put in the :file:`static` folder can be accessed via the url http://localhost:8080/Plone/++plone++ploneconf.site/the_real_filename.css"
msgstr ""

#: ../mastering-plone/resources.rst:32
msgid "Another feature of this folder is that the resources you put in there are editable and overrideable in the browser using the overrides-tab of the resource registry."
msgstr ""

#: ../mastering-plone/resources.rst:35
msgid "Let's create a file :file:`ploneconf.css` in the :file:`static` folder with some CSS:"
msgstr ""

#: ../mastering-plone/resources.rst:58
msgid "The css is not very exciting. It hides the :guilabel:`only in current section` below the search-box (we could also overwrite the viewlet, but ...)."
msgstr ""

#: ../mastering-plone/resources.rst:61
msgid "It also hides the event-fields we added in :ref:`events-label` from people submitting their talks."
msgstr ""

#: ../mastering-plone/resources.rst:63
msgid "For exiting CSS you take the training :ref:`theming-label`."
msgstr ""

#: ../mastering-plone/resources.rst:65
msgid "If we now access http://localhost:8080/Plone/++plone++ploneconf.site/ploneconf.css we see our CSS file."
msgstr ""

#: ../mastering-plone/resources.rst:67
msgid "Also add a :file:`ploneconf.js` in the same folder but leave it empty for now. You could add some JavaScript to that file later."
msgstr ""

#: ../mastering-plone/resources.rst:69
msgid "How do our JavaScript and CSS files get used when visiting the page? For now the new files are accessible in the browser but we want Plone to use them every time we access the page."
msgstr ""

#: ../mastering-plone/resources.rst:72
msgid "Adding them directly into the HTML is not a good solution, having many CSS and JS files slows down the page loading."
msgstr ""

#: ../mastering-plone/resources.rst:74
msgid "For this we need to register a *bundle* that contains these files. Plone will then make sure that all files that are part of this bundle are also deployed."
msgstr ""

#: ../mastering-plone/resources.rst:77
msgid "We need to register our resources with GenericSetup."
msgstr ""

#: ../mastering-plone/resources.rst:79
msgid "Open the file :file:`profiles/default/registry.xml` and add the following:"
msgstr ""

#: ../mastering-plone/resources.rst:97
msgid "The resources that are part of the registered bundle will now be deployed with every request."
msgstr ""

#: ../mastering-plone/resources.rst:99
msgid "For more infos please see the docs about `resource registry <https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html>`_ or this `training part <https://training.plone.org/5/theming/adv-diazo.html>`_."
msgstr ""

#: ../mastering-plone/restapi.rst:2
msgid "Plone REST API"
msgstr ""

#: ../mastering-plone/restapi.rst:13
msgid "In this chapter, we will have a look at the relatively new add-on `plone.restapi <https://plonerestapi.readthedocs.io/en/latest/index.html>`_."
msgstr ""

#: ../mastering-plone/restapi.rst:15
msgid "It provides a hypermedia API to access Plone content using REST (Representational State Transfer)."
msgstr ""

#: ../mastering-plone/restapi.rst:17
msgid "We will use :py:mod:`plone.restapi` to develop a small standalone 'single page app' targeted at mobile devices. We will present our users with a simple list of conference talks."
msgstr ""

#: ../mastering-plone/restapi.rst:20
msgid "We add lightning talks as a new type of talk. Users will be able to submit lightning talks e.g. using their mobile phone."
msgstr ""

#: ../mastering-plone/restapi.rst:23
msgid "We have the following tasks:"
msgstr ""

#: ../mastering-plone/restapi.rst:25
msgid "create a talk list view"
msgstr ""

#: ../mastering-plone/restapi.rst:26
msgid "create a login screen and use JWT for authentication/authorization of requests"
msgstr ""

#: ../mastering-plone/restapi.rst:27
msgid "let authenticated users submit lightning talks"
msgstr ""

#: ../mastering-plone/restapi.rst:30
msgid "Installing plone.restapi"
msgstr ""

#: ../mastering-plone/restapi.rst:32
msgid "We install :py:mod:`plone.restapi` like any other add-on package by adding it to :file:`buildout.cfg` and then activating it in the :guilabel:`Add-ons` panel. This will automatically add and configure a new PAS plugin named `jwt_auth` used for JSON web token authentication."
msgstr ""

#: ../mastering-plone/restapi.rst:36
msgid "Explore the API"
msgstr ""

#: ../mastering-plone/restapi.rst:38
msgid "Make sure you add some talks to the talks folder and then start exploring the API. We recommend using `Postman <https://www.getpostman.com>`_ or a similar tool, but you can also use `requests <https://pypi.org/project/requests>`_ in a Python virtual env."
msgstr ""

#: ../mastering-plone/restapi.rst:41
msgid ":py:mod:`plone.restapi` uses 'content negotiation' to determine whether a client wants a REST API response - if you set the ``Accept`` HTTP header to ``application/json``, Plone will provide responses in JSON format. Some requests you could try:"
msgstr ""

#: ../mastering-plone/restapi.rst:64
msgid "REST APIs use HTTP verbs for manipulating content. ``PATCH`` is used to update an existing resource."
msgstr ""

#: ../mastering-plone/restapi.rst:67
msgid "Add a new talk in Plone and then update it's title to match 'Foo 42' using the REST API (from Postman or requests)."
msgstr ""

#: ../mastering-plone/restapi.rst:72
msgid "We need to login to change content. Using JWT, we do so by POSTing credentials to the ``@login`` resource to obtain a JSON web token that we can subsequently use to authorize requests."
msgstr ""

#: ../mastering-plone/restapi.rst:87
msgid "The response will look like this:"
msgstr ""

#: ../mastering-plone/restapi.rst:95
msgid "Using the :py:mod:`requests` library from Python, you would do:"
msgstr ""

#: ../mastering-plone/restapi.rst:109
msgid "Now we can change the talk title:"
msgstr ""

#: ../mastering-plone/restapi.rst:123
msgid "Using :py:mod:`requests` again:"
msgstr ""

#: ../mastering-plone/restapi.rst:134
msgid "Implementing the talklist"
msgstr ""

#: ../mastering-plone/restapi.rst:136
msgid "We will use `Mobile Angular UI <http://mobileangularui.com/>`_ to develop our app. This is a relatively lightweight JavaScript framework for developing hybrid web apps built on top of `AngularJS <https://angularjs.org/>`_. There are a lot of other frameworks available (e.g. Ionic, OnsenUI, Sencha, ...), but most of them have more dependencies than `Mobile Angular UI`."
msgstr ""

#: ../mastering-plone/restapi.rst:141
msgid "For example, most of them require NodeJS as a development web server."
msgstr ""

#: ../mastering-plone/restapi.rst:143
msgid "Our focus is Plone and interacting with :py:mod:`plone.restapi`, and `Mobile Angular UI` perfectly suits our needs because it simply lets us use Plone as our development webserver."
msgstr ""

#: ../mastering-plone/restapi.rst:146
msgid "To get started, we download the current `master branch of Mobile Angular UI <https://codeload.github.com/mcasimir/mobile-angular-ui/zip/master>`_ from GitHub, extract it and copy the :file:`dist` folder into a new subdirectory of :file:`browser` named :file:`talklist`."
msgstr ""

#: ../mastering-plone/restapi.rst:149
msgid "Assuming the current working directory is the buildout directory:"
msgstr ""

#: ../mastering-plone/restapi.rst:158
msgid "Then we add a new resource directory to :file:`browser/configure.zcml`:"
msgstr ""

#: ../mastering-plone/restapi.rst:167
msgid "In the :file:`browser/talklist` directory, we add an HTML page called :file:`index.html`:"
msgstr ""

#: ../mastering-plone/restapi.rst:222
msgid "Now you can point your browser to http://localhost:8080/Plone/++resource++talklist/index.html to see the result."
msgstr ""

#: ../mastering-plone/restapi.rst:224
msgid "The page will display a list of published talks."
msgstr ""

#: ../mastering-plone/restapi.rst:226
msgid "We also need some JavaScript that we put into a file named :file:`talklist.js` in the same folder:"
msgstr ""

#: ../mastering-plone/restapi.rst:289
msgid "Submit lightning talks"
msgstr ""

#: ../mastering-plone/restapi.rst:291
msgid "We add a new type of talk: lightning talk. A lightning talk is a short presentation of up to 5 minutes duration that can cover just about any topic."
msgstr ""

#: ../mastering-plone/restapi.rst:294
msgid "The information we need to provide for lightning talks is far less than for the more formal types of talk."
msgstr ""

#: ../mastering-plone/restapi.rst:296
msgid "Often the information provided for lightning talks is restricted to the talk subject or title and the speaker name, but we allow for a short summary."
msgstr ""

#: ../mastering-plone/restapi.rst:298
msgid "Before they can submit a lightning talk, potential speakers will need to login and we will use their previously registered login name as the speaker's name to display in the talk list."
msgstr ""

#: ../mastering-plone/restapi.rst:301
msgid "Before we can start to submit lightning talks using REST calls from our single page app, we have to adapt the talk schema:"
msgstr ""

#: ../mastering-plone/restapi.rst:379
msgid "Next, in our JavaScript code, we provide a method for logging in a user and another one to check whether the user has a valid JSON web token. We use the ``localStorage`` facility of the browser to store the token on the client."
msgstr ""

#: ../mastering-plone/restapi.rst:408
msgid "We continue with changes to :file:`index.html` so that it uses the new methods. We provide a login form if the user doesn't have a valid JSON web token."
msgstr ""

#: ../mastering-plone/restapi.rst:411
msgid "Only authenticated users can see the rest of the page."
msgstr ""

#: ../mastering-plone/restapi.rst:448
msgid "Last we have to add some code that allows authenticated users to submit a lightning talk. We add another JavaScript method first:"
msgstr ""

#: ../mastering-plone/restapi.rst:491
msgid "Rewrite the ``load_talks()`` JavaScript method that it uses the portal search instead of ``/Plone/talks``. Sort the list by date."
msgstr ""

#: ../mastering-plone/reusable.rst:4
msgid "Making Our Package Reusable"
msgstr ""

#: ../mastering-plone/reusable.rst:8
msgid "Add Permissions"
msgstr ""

#: ../mastering-plone/reusable.rst:15
msgid "The package contains some problems."
msgstr ""

#: ../mastering-plone/reusable.rst:17
msgid "No permission settings, Users can't customize who and when users can vote"
msgstr ""

#: ../mastering-plone/reusable.rst:18
msgid "We do things, but don't trigger events. Events allow others to react."
msgstr ""

#: ../mastering-plone/reusable.rst:23
msgid "Adding permissions"
msgstr ""

#: ../mastering-plone/reusable.rst:27
msgid "Zope 2 Permissions"
msgstr ""

#: ../mastering-plone/reusable.rst:28
msgid "Zope 3 Permissions"
msgstr ""

#: ../mastering-plone/reusable.rst:32
msgid "Permissions have a long history, there are two types of permissions."
msgstr ""

#: ../mastering-plone/reusable.rst:34
msgid "In Zope2, a permission was just a string."
msgstr ""

#: ../mastering-plone/reusable.rst:36
msgid "In ZTK, a permission is an object that gets registered as a Utility."
msgstr ""

#: ../mastering-plone/reusable.rst:38
msgid "We must support both, in some cases we have to reference the permission by their Zope2 version, in some by their ZTK Version."
msgstr ""

#: ../mastering-plone/reusable.rst:40
msgid "Luckily, there is a zcml statement to register a permission both ways in one step."
msgstr ""

#: ../mastering-plone/reusable.rst:44
msgid "The configuration registry was meant to solve a problem, but we will now stumble over a problem that did not get resolved properly."
msgstr ""

#: ../mastering-plone/reusable.rst:46
msgid "Our permission is a utility. Our browser views declare this permission as a requirement for viewing them."
msgstr ""

#: ../mastering-plone/reusable.rst:48
msgid "When our browser views get registered, the permissions must exist already. If you try to register the permissions after the views, Zope won't start because it doesn't know about the permissions."
msgstr ""

#: ../mastering-plone/reusable.rst:50
msgid "Let's modify the file :file:`configure.zcml`"
msgstr ""

#: ../mastering-plone/reusable.rst:77
msgid "In some places we have to reference the Zope 2 permission strings. It is best practice to provide a static variable for this."
msgstr ""

#: ../mastering-plone/reusable.rst:79
msgid "We provide this in :file:`__init__.py`"
msgstr ""

#: ../mastering-plone/reusable.rst:92
msgid "Using our permissions"
msgstr ""

#: ../mastering-plone/reusable.rst:96
msgid "As you can see, we created two permissions, one for voting, one for viewing the votes."
msgstr ""

#: ../mastering-plone/reusable.rst:98
msgid "If a user is not allowed to see the votes, she does not need access to the vote viewlet."
msgstr ""

#: ../mastering-plone/reusable.rst:100
msgid "While we are at it, if a user can't vote, she needs no access to the helper view to actually submit a vote."
msgstr ""

#: ../mastering-plone/reusable.rst:102
msgid "We can add this restriction to :file:`browser/configure.zcml`"
msgstr ""

#: ../mastering-plone/reusable.rst:139
msgid "We are configuring components, so we use the component name of the permission, which is the :samp:`id` part of the declaration we added earlier."
msgstr ""

#: ../mastering-plone/reusable.rst:143
msgid "So, what happens if we do not protect the browser view to vote?"
msgstr ""

#: ../mastering-plone/reusable.rst:145
msgid "The person could still vote, by handcrafting the URL. Browser Views run code without any restriction, it is your job to take care of security."
msgstr ""

#: ../mastering-plone/reusable.rst:147
msgid "But... if a person has no access to the object at all, maybe because the site is configured that Anonymous users cannot access private objects, the unauthorized users will not be able to submit a vote."
msgstr ""

#: ../mastering-plone/reusable.rst:149
msgid "That is because Zope checks security permissions when trying to find the right object. If it can't find the object due to security constraints not met, no view ill ever be called, because that would have been the next step."
msgstr ""

#: ../mastering-plone/reusable.rst:151
msgid "We now protect our views and viewlets. We still show the option to vote though."
msgstr ""

#: ../mastering-plone/reusable.rst:153
msgid "We must add a condition in our page template, and we must provide the condition information in our viewlet class."
msgstr ""

#: ../mastering-plone/reusable.rst:155
msgid "Lets move on to :file:`browser/viewlets.py`"
msgstr ""

#: ../mastering-plone/reusable.rst:184
msgid "And the template in :file:`browser/templates/voting_viewlet.pt`"
msgstr ""

#: ../mastering-plone/reusable.rst:215
msgid "Sometimes subtle bugs come up because of changes. In this case I noticed that I should only prompt people to vote if they are allowed to vote!"
msgstr ""

#: ../mastering-plone/reusable.rst:220
msgid "Provide defaults"
msgstr ""

#: ../mastering-plone/reusable.rst:224
msgid "Are we done yet? Who may vote now?"
msgstr ""

#: ../mastering-plone/reusable.rst:226
msgid "We have to tell that someone."
msgstr ""

#: ../mastering-plone/reusable.rst:228
msgid "Who has which permissions is managed in Zope. This is persistent, and persistent configuration is handled by GenericSetup."
msgstr ""

#: ../mastering-plone/reusable.rst:230
msgid "The persistent configuration is managed in another file: :file:`profiles/default/rolemap.xml`"
msgstr ""

#: ../mastering-plone/testing.rst:4
msgid "Testing in Plone"
msgstr ""

#: ../mastering-plone/testing.rst:15
#: ../mastering-plone/user_generated_content.rst:17
msgid "In this chapter we:"
msgstr ""

#: ../mastering-plone/testing.rst:17
msgid "Write tests"
msgstr ""

#: ../mastering-plone/testing.rst:21
msgid "Testing best practices"
msgstr ""

#: ../mastering-plone/testing.rst:22
msgid "Internals of Plone"
msgstr ""

#: ../mastering-plone/testing.rst:27
msgid "Types of tests"
msgstr ""

#: ../mastering-plone/testing.rst:31
#: ../mastering-plone/testing.rst:44
msgid "Unit tests"
msgstr ""

#: ../mastering-plone/testing.rst:32
#: ../mastering-plone/testing.rst:53
msgid "Integration tests"
msgstr ""

#: ../mastering-plone/testing.rst:33
#: ../mastering-plone/testing.rst:60
msgid "Functional tests"
msgstr ""

#: ../mastering-plone/testing.rst:34
#: ../mastering-plone/testing.rst:67
msgid "Acceptance tests"
msgstr ""

#: ../mastering-plone/testing.rst:35
#: ../mastering-plone/testing.rst:75
msgid "Javascript tests"
msgstr ""

#: ../mastering-plone/testing.rst:36
#: ../mastering-plone/testing.rst:80
msgid "Doctests"
msgstr ""

#: ../mastering-plone/testing.rst:41
msgid "Plone is using some common terminology for types of tests you might have heard elsewhere. But in Plone, these terms are usually used to differentiate the technical difference between the types of test."
msgstr ""

#: ../mastering-plone/testing.rst:46
msgid "These match the normal meaning the most. Unit tests test a unit in isolation. That means there is no database, no component architecture and no browser. This means the code is very fast and it can mean that you can't test all that much if your code mostly interacts with other components."
msgstr ""

#: ../mastering-plone/testing.rst:48
msgid "A unit test for a browser view would create an instance of the view directly. That means it is your responsibility to provide a proper context and a proper request. You can't really test user-dependent behavior because you just mock a Request object imitating a user or not. This code might be broken with the next version of Plone without the test failing."
msgstr ""

#: ../mastering-plone/testing.rst:50
msgid "On the other hand, testing a complex rule with many different outcomes is still best tested in a unit test, because they are very fast."
msgstr ""

#: ../mastering-plone/testing.rst:55
msgid "Integration tests in Plone mean you have a real database and your component architecture. You can identify an integration test by the layer it is using which is based on a layer with integration in its name. We will explain shortly what a layer is."
msgstr ""

#: ../mastering-plone/testing.rst:57
msgid "Integration tests also means your test is still quite fast, because the transaction mechanisms are used for test isolation. What does that mean? After each test, the transaction gets canceled and you have the database in the same state as before. It still takes a while to set up the test layer, but running each test is quite fast. But this also means you cannot commit a transaction. Most code does not commit transactions and this is not an issue."
msgstr ""

#: ../mastering-plone/testing.rst:62
msgid "Functional tests in Plone have a real database and a component architecture, like Integration tests. In addition, you can simulate a browser in python code. When this browser tries to access a page, the complete transaction machinery is in use. For this to work, the test layer wraps the database into a demostorage. A Demostorage is for demonstration. A demostorage wraps a regular storage. When something gets written into the database, the demostorage stores it into memory or temporary fields. On reading it either returns what has been saved in memory or what is in the underlaying storage. After each test, the demostorage is wiped. This should make it nearly as fast as integration tests, but there is an additional overhead, when requests get through the transaction machinery. Also, the browser is pure python code. It knows nothing about javascript. You cannot test your javascript code with functional tests"
msgstr ""

#: ../mastering-plone/testing.rst:69
msgid "Acceptance tests are usually tests that can assert that an application would pass the requirements the customer gave. This implies that acceptance tests test the complete functionality and that they either allow the customer to understand what is being tested or at least clearly map to business requirements. In Plone, acceptance tests are tests written with the so called robot framework. Here you write tests in something resembling a natural language and which is driven by a real web browser. This implies you can also test Javascript. This is the slowest form of testing but also the most complete. Also, acceptance tests aren't limited to the original form of acceptance tests, but also for normal integration tests."
msgstr ""

#: ../mastering-plone/testing.rst:76
msgid "So far, it looks like we only have acceptance tests for testing javascript. Acceptance tests are also very new. This means we had no test story for testing javascript. In Plone 5, we have the mockup framework to write javascript components and the mockup framework provides also scaffolding for testing Javascript with xxx. While these tests use a real browser of some sort, they fall into the category of unit tests, because you have no database Server available to generate proper html."
msgstr ""

#: ../mastering-plone/testing.rst:81
msgid "Doctests are a popular way to write tests in documentation. Doctests parse documentation for code that has special formatting and runs the code and compares it with the output suggested in the documentation. Doctests are hard to debug, because there is no easy way to use a debugger in doctests. Doctests have a bad reputation, because when it came around, people thought they could write documentation and tests in one go. This resulted in packages like zope.component, where the documentation on pypi slowly transforms into half sentences split up by 5-10 lines of code testing an obscure feature that the half sentence does not properly explain. In Plone, this form of testing is not very common. We would like to transform our documentation to be testable with doctests."
msgstr ""

#: ../mastering-plone/testing.rst:89
msgid "Writing tests"
msgstr ""

#: ../mastering-plone/testing.rst:93
msgid "Testing is hard"
msgstr ""

#: ../mastering-plone/testing.rst:94
msgid "Slow tests kill testing"
msgstr ""

#: ../mastering-plone/testing.rst:95
msgid "It is ok to rewrite code for better testability"
msgstr ""

#: ../mastering-plone/testing.rst:96
msgid "Steal from others"
msgstr ""

#: ../mastering-plone/testing.rst:97
msgid "All rules and best practices have exceptions"
msgstr ""

#: ../mastering-plone/testing.rst:101
msgid "Writing tests is an art. If your testsuite needs half an hour to run, it loses a lot of value. If you limit yourself to unit tests and fake everything, you miss many bugs, either because Plone works differently than what you thought, or the next Plone versions run differently from today's. On the other hand, integration tests are not only slower, but often create test failures far away from the actual error in the code. Not only do the tests run more slowly, it also takes longer to debug why they fail. Here are some good rules to take into account."
msgstr ""

#: ../mastering-plone/testing.rst:105
msgid "If you need to write many test cases for a browser view, you might want to factor this out into a component of its own, in such a way that this component can easily be tested with unit tests. If, for example, you have a list view that shall do a specific way of sorting, depending on gender, language and browser of a user, write a component that takes a list of names to sort, gender, language and browser as strings. This code can easily be tested for all combinations in unit tests, while extracting gender, language and browser from a request object takes only a few functional tests."
msgstr ""

#: ../mastering-plone/testing.rst:109
msgid "Try not to mock code. The mocked code you generate mocks Plone in the version you are using today. The next version might work differently."
msgstr ""

#: ../mastering-plone/testing.rst:111
msgid "Do not be afraid to rewrite your code for better testability. It pays off."
msgstr ""

#: ../mastering-plone/testing.rst:113
msgid "If you have highly complex code, think about structuring code and data structures in such a way that they have no side effects. For one customer I wrote a complex ruleset of about 400 lines of code. A lot of small methods that have no side effects. It took a bit to write that code and corresponding tests, but as of today this code did not have a single failure."
msgstr ""

#: ../mastering-plone/testing.rst:115
msgid "Steal from others. Unfortunately, it sometimes takes an intrinsic knowledge to know how to test some functionality. Some component functionality that is automatically handled by the browser must be done by hand. And the component documentation has been referenced in this chapter as a terrible example already. So, copy your code from somewhere else."
msgstr ""

#: ../mastering-plone/testing.rst:117
msgid "Normally, you write a test that tests one thing only. Don't be afraid to break that rule when necessary. If, for example, you built some complex logic that involves multiple steps, don't shy away from writing a longer test showing the normal, good case. Add lots of comments explaining in each step what is happening, why and how. This helps other developers and the future you."
msgstr ""

#: ../mastering-plone/testing.rst:120
msgid "Plone tests"
msgstr ""

#: ../mastering-plone/testing.rst:124
msgid "Layers"
msgstr ""

#: ../mastering-plone/testing.rst:129
msgid "Plone is a complex system to run tests in. Because of this, we use a functionality from zope.testrunner: layers. We use the well known unittest framework which exhibits the same ideas as nearly every unittest framework out there. In addition for test setups we have the notion of layers. A layer is a test setup that can be shared. This way, you can run tests from 20 different testsuites but not each testsuite sets up their own complete Plone site. Instead, you use a Layer, and the testrunner takes care that every testsuite sharing a layer are run together."
msgstr ""

#: ../mastering-plone/testing.rst:131
msgid "Usually, you create three layers on your own, an integration layer, a functional layer and an acceptance test layer. If you were to test code that uses the Solr search engine, you'd use another layer that starts and stops solr between tests. But most of the time you just use the default layers you copied from somewhere or that mr.bob gave you."
msgstr ""

#: ../mastering-plone/testing.rst:133
msgid "By convention, layers are defined in a module :py:mod:`testing` in your module root, ie :py:mod:`my.code.testing`. Your test classes should be in a folder named :file:`tests`"
msgstr ""

#: ../mastering-plone/testing.rst:136
msgid "Getting started"
msgstr ""

#: ../mastering-plone/testing.rst:138
msgid "Mr.bob already created the testing layers. We will go through them now."
msgstr ""

#: ../mastering-plone/testing.rst:141
msgid "Next, it adds a method for testing that your add-on gets properly installed. This might seem stupid, but it isn't if you take into account that in plone land, things change with new releases. Having a GenericSetup profile installing Javascript files contains the assumption that the package wants a javascript file available in Plone. This assumption is explained in the syntax of the current Plone. By testing that the result is met, the Javascript file really is available, we spell out that assumption more clearly. The person that wants to make your package work 5 years from now, knows now that the result in his browser might be related to a missing file. Even if he does not understand the semantics from the old Plone on how to register js files, he has a good starting point on what to do to make this package compatible."
msgstr ""

#: ../mastering-plone/testing.rst:145
msgid "This is why it makes sense to write these tedious tests."
msgstr ""

#: ../mastering-plone/testing.rst:147
msgid "If nothing else matches, :file:`test_setup.py` is the right location for anything GenericSetup related. In :ref:`eggs1-label` we created a content type. It is time to test this."
msgstr ""

#: ../mastering-plone/testing.rst:150
msgid "We are going to create a test module named :py:mod:`test_talk`:"
msgstr ""

#: ../mastering-plone/testing.rst:155
msgid "In :ref:`views1-label` we created a new view. We have to test this! This time, though, we are going to test it with a browser, too."
msgstr ""

#: ../mastering-plone/testing.rst:158
msgid "First, we add a simple test for the custom template in our Functional Test layer"
msgstr ""

#: ../mastering-plone/testing.rst:167
msgid "We already wrote a talklistview and it is untested! We like to write unit tests first. But if you look at the Talklistview, you notice that you'd have to mock the portal_catalog, the context, and complex results from the catalog. I wrote earlier that it is ok to rewrite code to make it better testable. But in this example look at what you would test if you mocked everything mentioned above. You would test that your code iterates over a mocked list of mocked items, restructuring mocked attributes. There is not much sense in that. If you did some calculation, like ratings, things might look different, but not in this case."
msgstr ""

#: ../mastering-plone/testing.rst:171
msgid "We can write an integration test. We should test the good case, and edge cases. The simplest test we can write is a test where no talks exist."
msgstr ""

#: ../mastering-plone/testing.rst:174
msgid "Then we can create content. Looking through the code, we do not want the talks list to render results for documents. So add a a document. Also, the code does not want to render results for a document out of the current context. So create a folder and use this as a context. Then add a talk outside of this folder. The method iterates over audiences, make sure that you have at least one talk that has multiple audiences and check for that. Some advanced thing. Should you ever use an improved search system like collective.solr, results might get batched automatically. Check that if you have 101 talks, that you also get back 101 talks. Think about what you want to check in your results. Do you want to make a one to one comparison? How would you handle UUIDs?"
msgstr ""

#: ../mastering-plone/testing.rst:178
msgid "A test creating 101 talks can be slow. It tests an edge case. There is a trick: create a new :py:class:`TestCase` Class, and set an attribute :py:attr:`level` with the value of 2. This test will then only be run when you run the tests with the argument :option:`bin/test -a` with the value 2 or :option:`bin/test --all`"
msgstr ""

#: ../mastering-plone/testing.rst:191
msgid "Robot tests"
msgstr ""

#: ../mastering-plone/testing.rst:193
msgid "Finally, we write a robot test:"
msgstr ""

#: ../mastering-plone/testing.rst:198
msgid "When you run your tests, you might notice that the robot tests didn't run. This is a feature activated by the robot layer, because robot tests can be quite slow. If you run your tests with :command:`./bin/test --all` your robot tests will run. Now you will realize that you cannot work any more because a browser window pops up all the time."
msgstr ""

#: ../mastering-plone/testing.rst:201
msgid "There are 3 possible workarounds:"
msgstr ""

#: ../mastering-plone/testing.rst:203
msgid "install the headless browser, Phantomjs. Then run the tests with an environment variable :command:`ROBOT_BROWSER=phantomjs bin/test --all` This did not work for me btw."
msgstr ""

#: ../mastering-plone/testing.rst:205
msgid "Install :program:`xvfb`, a framebuffer. You wont see the browser then. After installing, start xvfb like this: :command:`Xvfb :99.0 -screen 0 1024x768x24`. Then run your tests, declaring to connect to the non-default X Server: :command:`DISPLAY=:99.0 bin/test --all`"
msgstr ""

#: ../mastering-plone/testing.rst:206
msgid "Install Xephyr, it is also a framebuffer, but visible in a window. Start it the same way as you start Xvfb."
msgstr ""

#: ../mastering-plone/testing.rst:208
msgid "The first method, with Phantomjs, will throw failures with our tests, unfortunately."
msgstr ""

#: ../mastering-plone/testing.rst:210
msgid "For debugging, you can run the test like this :command:`ROBOT_SELENIUM_RUN_ON_FAILURE=Debug bin/test --all`. This will stop the test at the first failure and you end up in an interactive shell where you can try various Robot Framework commands."
msgstr ""

#: ../mastering-plone/testing.rst:215
msgid "Test script"
msgstr ""

#: ../mastering-plone/testing.rst:217
msgid "The testing script have some options as the following:"
msgstr ""

#: ../mastering-plone/testing.rst:223
msgid "All testcases."
msgstr ""

#: ../mastering-plone/testing.rst:227
msgid "Specify the value of 2 for this test."
msgstr ""

#: ../mastering-plone/testing.rst:231
msgid "More information"
msgstr ""

#: ../mastering-plone/testing.rst:233
msgid "For more in-depth information and reference see"
msgstr ""

#: ../mastering-plone/testing.rst:235
msgid "`plone.app.testing documentation <https://docs.plone.org/external/plone.app.testing/docs/source/index.html>`_."
msgstr ""

#: ../mastering-plone/testing.rst:237
msgid "`plone.testing package <https://pypi.org/project/plone.testing>`_"
msgstr ""

#: ../mastering-plone/theming.rst:7
msgid "We don't do any real theming during the training. We will give a short overview about the options you have."
msgstr ""

#: ../mastering-plone/theming.rst:10
msgid "If you want to learn about theming see `the documentation <https://docs.plone.org/adapt-and-extend/theming/index.html>`_ and the Training :doc:`../theming/index`"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:5
msgid "Using Third-Party Behaviors"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:9
msgid "Skip this since collective.behavior.banner is not yet compatible with Plone 5."
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:15
msgid "Add Teaser With collective.behavior.banner"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:17
msgid "There are a lot of add-ons in Plone for sliders/banners/teasers. We thought there should be a better one and created :py:mod:`collective.behavior.banner`."
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:23
msgid "Like many add-ons it has not yet been released on PyPI (Python Package Index) but only exists as code on GitHub."
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:25
msgid "The training buildout has a section ``[sources]`` that tells buildout to download a specific add-on not from PyPI but from some code repository (usually GitHub):"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:33
msgid "Pinning the revision saves us from being surprised by changes in the code we might not want."
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:35
msgid "After adding the source, we need to add the egg to buildout:"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:45
msgid "And rerun :file:`./bin/buildout`"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:47
msgid "Install the add-on"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:48
msgid "Create a new dexterity content type ``Banner`` with **only** the behavior ``Banner`` enabled."
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:49
msgid "Create a folder called ``banners``"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:50
msgid "Add two banners into that folder using images taken from lorempixel.com"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:51
msgid "Add the Behavior ``Slider`` to the default content type ``Page (Document)``"
msgstr ""

#: ../mastering-plone/thirdparty_behaviors.rst:52
msgid "Edit the front-page and link to the new banners."
msgstr ""

#: ../mastering-plone/timing.rst:2
msgid "Timetable"
msgstr ""

#: ../mastering-plone/timing.rst:4
msgid "This is just meant as info for trainers about how long it might take to teach certain chapters. Please update when you have different experiences."
msgstr ""

#: ../mastering-plone/timing.rst:8
msgid "Ploneconf 2017"
msgstr ""

#: ../mastering-plone/timing.rst:11
msgid "Name"
msgstr ""

#: ../mastering-plone/timing.rst:11
msgid "#Time#"
msgstr ""

#: ../mastering-plone/timing.rst:12
#: ../mastering-plone/timing.rst:65
#: ../mastering-plone/timing.rst:73
#: ../mastering-plone/timing.rst:101
#: ../mastering-plone/timing.rst:109
#: ../mastering-plone/timing.rst:116
#: ../mastering-plone/timing.rst:139
#: ../mastering-plone/timing.rst:141
#: ../mastering-plone/timing.rst:143
msgid "**++**"
msgstr ""

#: ../mastering-plone/timing.rst:12
#: ../mastering-plone/timing.rst:13
#: ../mastering-plone/timing.rst:14
#: ../mastering-plone/timing.rst:15
#: ../mastering-plone/timing.rst:16
#: ../mastering-plone/timing.rst:17
#: ../mastering-plone/timing.rst:18
#: ../mastering-plone/timing.rst:19
#: ../mastering-plone/timing.rst:20
#: ../mastering-plone/timing.rst:21
#: ../mastering-plone/timing.rst:22
#: ../mastering-plone/timing.rst:23
#: ../mastering-plone/timing.rst:24
#: ../mastering-plone/timing.rst:25
#: ../mastering-plone/timing.rst:26
#: ../mastering-plone/timing.rst:27
#: ../mastering-plone/timing.rst:28
#: ../mastering-plone/timing.rst:29
#: ../mastering-plone/timing.rst:30
#: ../mastering-plone/timing.rst:31
#: ../mastering-plone/timing.rst:32
#: ../mastering-plone/timing.rst:33
#: ../mastering-plone/timing.rst:34
#: ../mastering-plone/timing.rst:35
#: ../mastering-plone/timing.rst:36
#: ../mastering-plone/timing.rst:37
#: ../mastering-plone/timing.rst:38
#: ../mastering-plone/timing.rst:39
#: ../mastering-plone/timing.rst:40
#: ../mastering-plone/timing.rst:41
#: ../mastering-plone/timing.rst:42
#: ../mastering-plone/timing.rst:43
#: ../mastering-plone/timing.rst:44
#: ../mastering-plone/timing.rst:45
#: ../mastering-plone/timing.rst:46
#: ../mastering-plone/timing.rst:47
#: ../mastering-plone/timing.rst:48
#: ../mastering-plone/timing.rst:49
#: ../mastering-plone/timing.rst:50
#: ../mastering-plone/timing.rst:51
#: ../mastering-plone/timing.rst:52
#: ../mastering-plone/timing.rst:53
#: ../mastering-plone/timing.rst:54
#: ../mastering-plone/timing.rst:55
#: ../mastering-plone/timing.rst:56
#: ../mastering-plone/timing.rst:57
#: ../mastering-plone/timing.rst:69
#: ../mastering-plone/timing.rst:94
#: ../mastering-plone/timing.rst:95
#: ../mastering-plone/timing.rst:96
#: ../mastering-plone/timing.rst:97
#: ../mastering-plone/timing.rst:98
#: ../mastering-plone/timing.rst:101
msgid "?? min"
msgstr ""

#: ../mastering-plone/timing.rst:12
msgid "1 About Mastering Plone"
msgstr ""

#: ../mastering-plone/timing.rst:13
#: ../mastering-plone/timing.rst:14
#: ../mastering-plone/timing.rst:15
#: ../mastering-plone/timing.rst:16
#: ../mastering-plone/timing.rst:19
#: ../mastering-plone/timing.rst:20
#: ../mastering-plone/timing.rst:21
#: ../mastering-plone/timing.rst:23
#: ../mastering-plone/timing.rst:24
#: ../mastering-plone/timing.rst:26
#: ../mastering-plone/timing.rst:27
#: ../mastering-plone/timing.rst:28
#: ../mastering-plone/timing.rst:29
#: ../mastering-plone/timing.rst:30
#: ../mastering-plone/timing.rst:31
#: ../mastering-plone/timing.rst:32
#: ../mastering-plone/timing.rst:36
#: ../mastering-plone/timing.rst:37
#: ../mastering-plone/timing.rst:40
#: ../mastering-plone/timing.rst:43
#: ../mastering-plone/timing.rst:44
#: ../mastering-plone/timing.rst:45
#: ../mastering-plone/timing.rst:46
#: ../mastering-plone/timing.rst:47
#: ../mastering-plone/timing.rst:56
#: ../mastering-plone/timing.rst:57
#: ../mastering-plone/timing.rst:66
#: ../mastering-plone/timing.rst:67
#: ../mastering-plone/timing.rst:68
#: ../mastering-plone/timing.rst:70
#: ../mastering-plone/timing.rst:71
#: ../mastering-plone/timing.rst:74
#: ../mastering-plone/timing.rst:77
#: ../mastering-plone/timing.rst:78
#: ../mastering-plone/timing.rst:79
#: ../mastering-plone/timing.rst:80
#: ../mastering-plone/timing.rst:82
#: ../mastering-plone/timing.rst:85
#: ../mastering-plone/timing.rst:86
#: ../mastering-plone/timing.rst:87
#: ../mastering-plone/timing.rst:88
#: ../mastering-plone/timing.rst:89
#: ../mastering-plone/timing.rst:90
#: ../mastering-plone/timing.rst:92
#: ../mastering-plone/timing.rst:93
#: ../mastering-plone/timing.rst:99
#: ../mastering-plone/timing.rst:100
#: ../mastering-plone/timing.rst:110
#: ../mastering-plone/timing.rst:111
#: ../mastering-plone/timing.rst:113
#: ../mastering-plone/timing.rst:114
#: ../mastering-plone/timing.rst:119
#: ../mastering-plone/timing.rst:120
#: ../mastering-plone/timing.rst:122
#: ../mastering-plone/timing.rst:125
#: ../mastering-plone/timing.rst:129
#: ../mastering-plone/timing.rst:130
#: ../mastering-plone/timing.rst:131
#: ../mastering-plone/timing.rst:132
#: ../mastering-plone/timing.rst:134
#: ../mastering-plone/timing.rst:135
#: ../mastering-plone/timing.rst:142
msgid "**pb**"
msgstr ""

#: ../mastering-plone/timing.rst:13
msgid "2 Introduction"
msgstr ""

#: ../mastering-plone/timing.rst:14
msgid "3 Installation & Setup"
msgstr ""

#: ../mastering-plone/timing.rst:15
msgid "4 Installing Plone for the Training"
msgstr ""

#: ../mastering-plone/timing.rst:16
msgid "5 The Case Study"
msgstr ""

#: ../mastering-plone/timing.rst:17
#: ../mastering-plone/timing.rst:18
#: ../mastering-plone/timing.rst:22
#: ../mastering-plone/timing.rst:25
#: ../mastering-plone/timing.rst:33
#: ../mastering-plone/timing.rst:34
#: ../mastering-plone/timing.rst:35
#: ../mastering-plone/timing.rst:38
#: ../mastering-plone/timing.rst:39
#: ../mastering-plone/timing.rst:41
#: ../mastering-plone/timing.rst:42
#: ../mastering-plone/timing.rst:55
msgid "**ts**"
msgstr ""

#: ../mastering-plone/timing.rst:17
msgid "6 The Features of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:18
msgid "7 The Anatomy of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:19
msgid "8 What’s New in Plone 5 and 5.1"
msgstr ""

#: ../mastering-plone/timing.rst:20
msgid "9 Configuring and Customizing Plone \"Through The Web\""
msgstr ""

#: ../mastering-plone/timing.rst:21
msgid "10 Theming"
msgstr ""

#: ../mastering-plone/timing.rst:22
msgid "11 Extending Plone"
msgstr ""

#: ../mastering-plone/timing.rst:23
msgid "12 Extend Plone With Add-On Packages"
msgstr ""

#: ../mastering-plone/timing.rst:24
msgid "13 Dexterity I: \"Through The Web\""
msgstr ""

#: ../mastering-plone/timing.rst:25
msgid "14 Buildout I"
msgstr ""

#: ../mastering-plone/timing.rst:26
msgid "15 Write Your Own Add-Ons to Customize Plone"
msgstr ""

#: ../mastering-plone/timing.rst:27
msgid "16 Return to Dexterity: Moving contenttypes into Codetemplates"
msgstr ""

#: ../mastering-plone/timing.rst:28
msgid "17 Views I"
msgstr ""

#: ../mastering-plone/timing.rst:29
msgid "18 Page Templates"
msgstr ""

#: ../mastering-plone/timing.rst:30
msgid "19 Customizing Existing Templates"
msgstr ""

#: ../mastering-plone/timing.rst:31
msgid "20 Views II: A Default View for \"Talk\""
msgstr ""

#: ../mastering-plone/timing.rst:32
msgid "21 Views III: A Talk List"
msgstr ""

#: ../mastering-plone/timing.rst:33
msgid "22 Testing in Plone"
msgstr ""

#: ../mastering-plone/timing.rst:34
msgid "23 Behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:35
msgid "24 Writing Viewlets"
msgstr ""

#: ../mastering-plone/timing.rst:36
msgid "25 Programming Plone"
msgstr ""

#: ../mastering-plone/timing.rst:37
msgid "26 IDEs and Editors"
msgstr ""

#: ../mastering-plone/timing.rst:38
msgid "27 Dexterity Types II: Growing Up"
msgstr ""

#: ../mastering-plone/timing.rst:39
msgid "28 Custom Search"
msgstr ""

#: ../mastering-plone/timing.rst:40
msgid "29 Turning Talks into Events"
msgstr ""

#: ../mastering-plone/timing.rst:41
msgid "30 User Generated Content"
msgstr ""

#: ../mastering-plone/timing.rst:42
msgid "31 Resources"
msgstr ""

#: ../mastering-plone/timing.rst:43
msgid "32 Using Third-Party Behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:44
msgid "33 Dexterity Types III: Python"
msgstr ""

#: ../mastering-plone/timing.rst:45
msgid "34 Relations"
msgstr ""

#: ../mastering-plone/timing.rst:46
msgid "35 Manage Settings with Registry, Controlpanels and VocabulariesDeploying your site"
msgstr ""

#: ../mastering-plone/timing.rst:47
msgid "36 Creating a Dynamic Front Page"
msgstr ""

#: ../mastering-plone/timing.rst:48
#: ../mastering-plone/timing.rst:49
#: ../mastering-plone/timing.rst:50
#: ../mastering-plone/timing.rst:51
#: ../mastering-plone/timing.rst:52
#: ../mastering-plone/timing.rst:53
#: ../mastering-plone/timing.rst:54
msgid "**XX**"
msgstr ""

#: ../mastering-plone/timing.rst:48
msgid "37 Creating Reusable Packages"
msgstr ""

#: ../mastering-plone/timing.rst:49
msgid "38 More Complex Behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:50
msgid "39 A Viewlet for the Votable Behavior"
msgstr ""

#: ../mastering-plone/timing.rst:51
msgid "40 Making Our Package Reusable"
msgstr ""

#: ../mastering-plone/timing.rst:52
msgid "41 Using starzel.votable_behavior in ploneconf.site"
msgstr ""

#: ../mastering-plone/timing.rst:53
msgid "42 Releasing Your Code"
msgstr ""

#: ../mastering-plone/timing.rst:54
msgid "43 Buildout II: Getting Ready for Deployment"
msgstr ""

#: ../mastering-plone/timing.rst:55
msgid "44 Plone REST API"
msgstr ""

#: ../mastering-plone/timing.rst:56
msgid "45 The Future of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:57
msgid "46 Optional"
msgstr ""

#: ../mastering-plone/timing.rst:62
msgid "Version 1.2"
msgstr ""

#: ../mastering-plone/timing.rst:65
#: ../mastering-plone/timing.rst:66
#: ../mastering-plone/timing.rst:68
#: ../mastering-plone/timing.rst:92
#: ../mastering-plone/timing.rst:109
msgid "10 min"
msgstr ""

#: ../mastering-plone/timing.rst:65
#: ../mastering-plone/timing.rst:109
msgid "#1 Introduction"
msgstr ""

#: ../mastering-plone/timing.rst:66
#: ../mastering-plone/timing.rst:110
msgid "#2 Installation & Setup"
msgstr ""

#: ../mastering-plone/timing.rst:67
#: ../mastering-plone/timing.rst:78
#: ../mastering-plone/timing.rst:86
#: ../mastering-plone/timing.rst:99
#: ../mastering-plone/timing.rst:110
#: ../mastering-plone/timing.rst:112
#: ../mastering-plone/timing.rst:128
#: ../mastering-plone/timing.rst:130
#: ../mastering-plone/timing.rst:135
msgid "15 min"
msgstr ""

#: ../mastering-plone/timing.rst:67
#: ../mastering-plone/timing.rst:111
msgid "#3 Installing Plone for the Training"
msgstr ""

#: ../mastering-plone/timing.rst:68
msgid "#4 The Case-Study"
msgstr ""

#: ../mastering-plone/timing.rst:69
#: ../mastering-plone/timing.rst:72
#: ../mastering-plone/timing.rst:75
#: ../mastering-plone/timing.rst:76
#: ../mastering-plone/timing.rst:81
#: ../mastering-plone/timing.rst:83
#: ../mastering-plone/timing.rst:84
#: ../mastering-plone/timing.rst:91
#: ../mastering-plone/timing.rst:94
#: ../mastering-plone/timing.rst:95
#: ../mastering-plone/timing.rst:96
#: ../mastering-plone/timing.rst:97
#: ../mastering-plone/timing.rst:98
#: ../mastering-plone/timing.rst:112
#: ../mastering-plone/timing.rst:115
#: ../mastering-plone/timing.rst:117
#: ../mastering-plone/timing.rst:118
#: ../mastering-plone/timing.rst:121
#: ../mastering-plone/timing.rst:123
#: ../mastering-plone/timing.rst:124
#: ../mastering-plone/timing.rst:126
#: ../mastering-plone/timing.rst:127
#: ../mastering-plone/timing.rst:128
#: ../mastering-plone/timing.rst:133
#: ../mastering-plone/timing.rst:136
#: ../mastering-plone/timing.rst:137
#: ../mastering-plone/timing.rst:138
#: ../mastering-plone/timing.rst:140
msgid "**pg**"
msgstr ""

#: ../mastering-plone/timing.rst:69
msgid "#5 The Anatomy of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:70
#: ../mastering-plone/timing.rst:79
#: ../mastering-plone/timing.rst:82
#: ../mastering-plone/timing.rst:87
#: ../mastering-plone/timing.rst:93
#: ../mastering-plone/timing.rst:113
msgid "90 min"
msgstr ""

#: ../mastering-plone/timing.rst:70
msgid "#6 The Features of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:71
#: ../mastering-plone/timing.rst:73
#: ../mastering-plone/timing.rst:80
#: ../mastering-plone/timing.rst:81
#: ../mastering-plone/timing.rst:116
#: ../mastering-plone/timing.rst:131
#: ../mastering-plone/timing.rst:132
#: ../mastering-plone/timing.rst:134
msgid "60 min"
msgstr ""

#: ../mastering-plone/timing.rst:71
msgid "#7 Configuring and Customizing Plone through the web"
msgstr ""

#: ../mastering-plone/timing.rst:72
#: ../mastering-plone/timing.rst:74
#: ../mastering-plone/timing.rst:75
#: ../mastering-plone/timing.rst:76
#: ../mastering-plone/timing.rst:83
#: ../mastering-plone/timing.rst:84
#: ../mastering-plone/timing.rst:85
#: ../mastering-plone/timing.rst:88
#: ../mastering-plone/timing.rst:91
#: ../mastering-plone/timing.rst:100
#: ../mastering-plone/timing.rst:115
#: ../mastering-plone/timing.rst:125
#: ../mastering-plone/timing.rst:126
#: ../mastering-plone/timing.rst:136
#: ../mastering-plone/timing.rst:137
#: ../mastering-plone/timing.rst:138
#: ../mastering-plone/timing.rst:140
msgid "20 min"
msgstr ""

#: ../mastering-plone/timing.rst:72
msgid "#8 Extending Plone"
msgstr ""

#: ../mastering-plone/timing.rst:73
msgid "#9 Extend Plone with Add-ons"
msgstr ""

#: ../mastering-plone/timing.rst:74
msgid "#10 Theming"
msgstr ""

#: ../mastering-plone/timing.rst:75
msgid "#11 Buildout I"
msgstr ""

#: ../mastering-plone/timing.rst:76
#: ../mastering-plone/timing.rst:128
msgid "#12 Creating your own eggs to customize Plone"
msgstr ""

#: ../mastering-plone/timing.rst:77
#: ../mastering-plone/timing.rst:111
#: ../mastering-plone/timing.rst:129
#: ../mastering-plone/timing.rst:133
#: ../mastering-plone/timing.rst:139
#: ../mastering-plone/timing.rst:141
#: ../mastering-plone/timing.rst:142
msgid "30 min"
msgstr ""

#: ../mastering-plone/timing.rst:77
msgid "#13 Dexterity I: Through the web"
msgstr ""

#: ../mastering-plone/timing.rst:78
#: ../mastering-plone/timing.rst:130
msgid "#14 Views I"
msgstr ""

#: ../mastering-plone/timing.rst:79
#: ../mastering-plone/timing.rst:131
msgid "#15 Zope Page Templates"
msgstr ""

#: ../mastering-plone/timing.rst:80
#: ../mastering-plone/timing.rst:132
msgid "#16 Customizing existing templates"
msgstr ""

#: ../mastering-plone/timing.rst:81
#: ../mastering-plone/timing.rst:133
msgid "#17 Views II: A default view for \"talk\""
msgstr ""

#: ../mastering-plone/timing.rst:82
#: ../mastering-plone/timing.rst:134
msgid "#18 Views III: A Talk list"
msgstr ""

#: ../mastering-plone/timing.rst:83
msgid "#19 Behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:84
msgid "#20 Writing Viewlets"
msgstr ""

#: ../mastering-plone/timing.rst:85
msgid "#21 Programming Plone"
msgstr ""

#: ../mastering-plone/timing.rst:86
msgid "#22 IDE’s and Editors"
msgstr ""

#: ../mastering-plone/timing.rst:87
msgid "#23 Dexterity Types II: Growing up"
msgstr ""

#: ../mastering-plone/timing.rst:88
msgid "#24 Custom search"
msgstr ""

#: ../mastering-plone/timing.rst:89
#: ../mastering-plone/timing.rst:90
msgid "45 min"
msgstr ""

#: ../mastering-plone/timing.rst:89
msgid "#25 Turn talks into events"
msgstr ""

#: ../mastering-plone/timing.rst:90
msgid "#26 User generated content"
msgstr ""

#: ../mastering-plone/timing.rst:91
msgid "#27 Resources"
msgstr ""

#: ../mastering-plone/timing.rst:92
msgid "#28 Using third-party behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:93
msgid "#29 Dexterity Types III: Python"
msgstr ""

#: ../mastering-plone/timing.rst:94
msgid "#30 Creating reusable packages with eggs"
msgstr ""

#: ../mastering-plone/timing.rst:95
msgid "#31 More complex behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:96
msgid "#32 A viewlet for the voteable behavior"
msgstr ""

#: ../mastering-plone/timing.rst:97
msgid "#33 Making our package reusable"
msgstr ""

#: ../mastering-plone/timing.rst:98
msgid "#34 Using starzel.votable_behavior in ploneconf.site"
msgstr ""

#: ../mastering-plone/timing.rst:99
msgid "#35 Buildout II: Deploying your site"
msgstr ""

#: ../mastering-plone/timing.rst:100
msgid "#36 The Future of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:101
msgid "#37 Optional"
msgstr ""

#: ../mastering-plone/timing.rst:106
msgid "Version 1.1"
msgstr ""

#: ../mastering-plone/timing.rst:112
msgid "#4 The Anatomy of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:113
msgid "#5 The Features of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:114
msgid "50 min"
msgstr ""

#: ../mastering-plone/timing.rst:114
msgid "#6 Configuring and Customizing Plone through the web"
msgstr ""

#: ../mastering-plone/timing.rst:115
msgid "#7 Extending Plone"
msgstr ""

#: ../mastering-plone/timing.rst:116
msgid "#8 Extend Plone with Add-ons"
msgstr ""

#: ../mastering-plone/timing.rst:117
msgid "#8 - How to find add-ons"
msgstr ""

#: ../mastering-plone/timing.rst:118
msgid "#8 - Installing Add-ons"
msgstr ""

#: ../mastering-plone/timing.rst:119
msgid "#8 - PloneFormGen"
msgstr ""

#: ../mastering-plone/timing.rst:120
msgid "#8 - Internationalization"
msgstr ""

#: ../mastering-plone/timing.rst:121
msgid "#8 - collective.plonetruegallery"
msgstr ""

#: ../mastering-plone/timing.rst:122
msgid "#8 - plone.app.themeeditor"
msgstr ""

#: ../mastering-plone/timing.rst:123
msgid "#8 - export customizations"
msgstr ""

#: ../mastering-plone/timing.rst:124
msgid "#8 - inspect the package"
msgstr ""

#: ../mastering-plone/timing.rst:125
msgid "#9  Theming"
msgstr ""

#: ../mastering-plone/timing.rst:126
msgid "#10 Buildout I"
msgstr ""

#: ../mastering-plone/timing.rst:127
msgid "05 min"
msgstr ""

#: ../mastering-plone/timing.rst:127
msgid "#11 IDE’s and Editors"
msgstr ""

#: ../mastering-plone/timing.rst:129
msgid "#13 Creating content-types with Dexterity"
msgstr ""

#: ../mastering-plone/timing.rst:135
msgid "#19 Custom search"
msgstr ""

#: ../mastering-plone/timing.rst:136
msgid "#20 Extending Dexterity-Types with Behaviors"
msgstr ""

#: ../mastering-plone/timing.rst:137
msgid "#21 Resources"
msgstr ""

#: ../mastering-plone/timing.rst:138
msgid "#22 Social behavior"
msgstr ""

#: ../mastering-plone/timing.rst:139
msgid "#23 Writing Viewlets"
msgstr ""

#: ../mastering-plone/timing.rst:140
msgid "#24 Deploying your code"
msgstr ""

#: ../mastering-plone/timing.rst:141
msgid "#25 Buildout II: Deploying your site"
msgstr ""

#: ../mastering-plone/timing.rst:142
msgid "#26 The Future of Plone"
msgstr ""

#: ../mastering-plone/timing.rst:143
msgid "#27 Optional"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:4
msgid "User Generated Content"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:15
msgid "How do prospective speakers submit talks? We let them register on the site and grant right to create talks. For this we go back to changing the site through-the-web."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:19
msgid "allow self-registration"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:20
msgid "constrain types on the talk folder"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:21
msgid "grant local roles"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:22
msgid "create a custom workflow for talks"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:28
msgid "Self-registration"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:30
msgid "Go to the Security control panel at http://localhost:8080/Plone/@@security-controlpanel and Enable self-registration"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:31
msgid "Leave \"Enable User Folders\" off unless you want a community site."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:37
msgid "Constrain types"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:39
msgid "On the talk folder select `Restrictions… <http://localhost:8080/Plone/the-event/talks/folder_constraintypes_form>`_ from the *Add new* menu. Only allow to add talks."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:45
#: ../mastering-plone/user_generated_content.rst:118
msgid "Grant local roles"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:47
msgid "Go to *Sharing* and grant the role *Can add* to the group logged-in users. Now every user can add content in this folder (and only this folder)."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:49
msgid "Now all logged-in users can create and submit talks in this folder with the permission of the default workflow."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:55
msgid "A custom workflow for talks"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:57
msgid "We still need to fix a problem: Authenticated users can see all talks, even the ones of other users in the private state. Since we don't want this we will create a modified workflow for talks. The new workflow will only let them see and edit talks they created themselves and not the ones of other users."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:59
msgid "Go to the :menuselection:`ZMI --> portal_workflow`"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:60
msgid "See how talks have the same workflow as most content, namely :guilabel:`(Default)`"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:61
msgid "Go to the tab :guilabel:`Contents`, check the box next to :guilabel:`simple_publication_workflow`, click :guilabel:`copy` and :guilabel:`paste`."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:62
msgid "Rename the new workflow from *copy_of_simple_publication_workflow* to *talks_workflow*."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:63
msgid "Edit the workflow by clicking on it: Change the Title to *Talks Workflow*."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:64
msgid "Click on the tab :guilabel:`States` and click on :guilabel:`private` to edit this state. In the next view select the tab :guilabel:`Permissions`."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:65
msgid "Find the table column for the role :guilabel:`Contributor` and remove the permissions for :guilabel:`Access contents information` and :guilabel:`View`. Note that the :guilabel:`Owner` (i.e. the Creator) still has some permissions."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:66
msgid "Do the same for the state :guilabel:`pending`"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:67
msgid "Go back to :file:`portal_workflow` and set the new workflow :file:`talks_workflow` for talks. Click :file:`Change` and then :file:`Update security settings`."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:71
msgid "The add-on `plone.app.workflowmanager <https://pypi.org/project/plone.app.workflowmanager>`_ provides a much nicer user-interface for this. The problem is you need a big screen for it and it can be pretty confusing as well."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:73
msgid "Done."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:79
msgid "Move the changes to the file system"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:81
msgid "We don't want to do these steps for every new conference by hand so we move the changes into our package."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:84
msgid "Import/Export the Workflow"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:86
msgid "export the GenericSetup step *Workflow Tool* in http://localhost:8080/Plone/portal_setup/manage_exportSteps."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:87
msgid "drop the file :file:`workflows.xml` into :file:`profiles/default` an clean out everything that is not related to talks."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:101
msgid "drop :file:`workflows/talks_workflow/definition.xml` in :file:`profiles/default/workflows/talks_workflow/definition.xml`. The other files are just definitions of the default-workflows and we only want things in our package that changes Plone."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:105
msgid "Enable self-registration"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:107
msgid "To enable self-registration you need to change the global setting that controls this option. Most global setting are stored in the registry. You can modify it by adding following to :file:`profiles/default/registry.xml`:"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:120
msgid "Since the granting of local roles applies only to a certain folder in the site we would not always write code for it but do it by hand. But for testability and repeatability (there is a conference every year!) we should create the initial content structure automatically."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:122
msgid "So let's make sure some initial content is created and configured on installing the package."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:124
msgid "To run arbitrary code during the installation of a package we use a `post_handler <https://docs.plone.org/develop/addons/components/genericsetup.html#custom-installer-code-setuphandlers-py>`_"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:126
msgid "Our package already has such an method registered in :file:`configure.zcml`. It will be automatically run when (re-)installing the add-on."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:141
msgid "This makes sure the method :py:meth:`post_install` in :file:`setuphandlers.py` is executed after the installation. The method already exists doing nothing. You need to extend it to do what we want."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:218
msgid "Once we reinstall our package a folder :file:`talks` is created with the appropriate local roles and constraints."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:220
msgid "We wrote similar code to create the folder *The Event* in :ref:`dexterity2-upgrades-label`. We need it to make sure a sane structure gets created when we create a new site by hand or in tests."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:223
msgid "You would usually create a list of dictionaries containing the type, parent and title plus optionally layout, workflow state etc. to create an initial structure. In some projects it could also make sense to have a separate profile besides ``default`` which might be called ``demo`` or ``content`` that creates an initial structure and maybe another ``testing`` that creates dummy content (talks, speakers etc) for tests."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:229
msgid "Create a profile ``content`` that runs its own post_handler in :file:`setuphandlers.py`."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:234
msgid "Register the profile and the upgrade step in :file:`configure.zcml`"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:247
msgid "Also add a :file:`profiles/content/metadata.xml` so the default profile gets automatically installed when installing the content profile."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:259
msgid "Add the structure you wish to create as a list of dictionaries in :file:`setuphandlers.py`:"
msgstr ""

#: ../mastering-plone/user_generated_content.rst:336
msgid "Add the method :py:meth:`content` to :file:`setuphandlers.py`. We pointed to that when registering the import step. And add some fancy logic to create the content from ``STRUCTURE``."
msgstr ""

#: ../mastering-plone/user_generated_content.rst:395
msgid "A huge benefit of this implementation is that you can add any object-attribute as a new item to :py:data:`item_dict`. :py:meth:`plone.api.content.create` will then set these on the new objects. This way you can also populate fields like :py:attr:`text` (using :py:class:`plone.app.textfield.RichTextValue`) or :py:attr:`image` (using :py:class:`plone.namedfile.file.NamedBlobImage`)."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:4
msgid "Writing Viewlets"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:17
msgid "Display data from a behavior in a viewlet"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:26
msgid "A viewlet for the social behavior"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:30
msgid "A viewlet is not a view but a snippet of HTML and logic that can be put in various places in the site. These places are called ``viewletmanager``."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:33
msgid "Inspect existing viewlets and their managers by going to http://localhost:8080/Plone/@@manage-viewlets."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:34
msgid "We already customized a viewlet (:file:`colophon.pt`). Now we add a new one."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:35
msgid "Viewlets don't save data (portlets do)"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:36
msgid "Viewlets have no user interface (portlets do)"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:41
msgid "Social viewlet"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:45
msgid "Let's add a link to the site that uses the information that we collected using the social behavior."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:47
#: ../mastering-plone/viewlets_2.rst:34
msgid "We register the viewlet in :file:`browser/configure.zcml`."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:62
msgid "``for``, ``manager``, ``layer`` and ``permission`` are constraints that limit the contexts in which the viewlet is loaded and rendered, by filtering out all the contexts that do not match those constraints."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:67
msgid "This registers a viewlet called ``social``. It is visible on all content that implements the interface :py:class:`ISocial` from our behavior. It is also good practice to bind it to a specific ``layer``, so it only shows up if our add-on is actually installed. We will return to this in a later chapter."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:72
msgid "The viewlet class :py:class:`SocialViewlet` is expected in a file :file:`browser/viewlets.py`."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:87
msgid "This class does nothing except rendering the associated template (That we have yet to write)"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:89
msgid "Let's add the missing template :file:`templates/social_viewlet.pt`."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:107
msgid "As you can see this is not a valid HTML document. That is not needed, because we don't want a complete view here, a HTML snippet is enough."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:110
msgid "There is a :samp:`tal:define` statement, querying for :samp:`view/lanyrd_link`. Same as for views, viewlets have access to their class in page templates, as well."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:113
msgid "We have to extend the Social Viewlet now to add the missing attribute:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:120
msgid "In this example, :samp:`ISocial(self.context)` does return the context directly. It is still good to use this idiom for two reasons:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:123
msgid "It makes it clear that we only want to use the ISocial aspect of the object"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:124
msgid "If we decide to use a factory, for example to store our attributes in an annotation, we would `not` get back our context, but the adapter."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:126
msgid "Therefore in this example you could simply write :samp:`return self.context.lanyrd`."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:141
msgid "So far, we"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:143
msgid "register the viewlet to content that has the ISocial Interface."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:144
msgid "adapt the object to its behavior to be able to access the fields of the behavior"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:145
msgid "return the link"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:153
msgid "Register a viewlet 'number_of_talks' in the footer that is only visible to admins (the permission you are looking for is :py:class:`cmf.ManagePortal`). Use only a template (no class) to display the number of talks already submitted."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:156
msgid "Hint: Use Acquisition to get the catalog (You know, you should not do this but there is plenty of code out there that does it...)"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:175
msgid "For the ``for`` and ``layer``-parameters ``*`` is shorthand for :py:class:`zope.interface.Interface` and the same effect as omitting them: The viewlet will be shown for all types of pages and for all Plone sites within your Zope instance."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:177
msgid "Add the template :file:`browser/templates/number_of_talks.pt`:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:187
msgid ":samp:`python:context.portal_catalog` will return the catalog through Acquisition. Be careful if you want to use path expressions: :samp:`content/portal_catalog` calls the catalog (and returns all brains). You need to prevent this by using :samp:`nocall:content/portal_catalog`."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:189
msgid "Relying on Acquisition is a bad idea. It would be much better to use the helper view ``plone_tools`` from :file:`plone/app/layout/globals/tools.py` to get the catalog."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:199
msgid ":samp:`context/@@plone_tools/catalog` traverses to the view ``plone_tools`` and calls its method :py:meth:`catalog`. In python it would look like this:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:209
msgid "It is not a good practice to query the catalog within a template since even simple logic like this should live in Python. But it is very powerful if you are debugging or need a quick and dirty solution."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:212
msgid "In Plone 5 you could even write it like this:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:232
msgid "Register a viewlet 'days_to_conference' in the header. Use a class and a template to display the number of days until the conference."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:235
msgid "You get bonus points if you display it in a nice format (think \"In 2 days\" and \"Last Month\") by using either JavaScript or a Python library."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:240
msgid "In :file:`configure.zcml`:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:254
msgid "In :file:`viewlets.py`:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:273
msgid "Setting the date in python is not very user-friendly. In the chapter :ref:`registry-label` you learn how store global configuration and easily create controlpanels."
msgstr ""

#: ../mastering-plone/viewlets_1.rst:275
msgid "And in :file:`templates/days_to_conference.pt`:"
msgstr ""

#: ../mastering-plone/viewlets_1.rst:283
msgid "Or using the moment pattern in Plone 5:"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:4
msgid "A Viewlet for the Votable Behavior"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:10
msgid "Voting Viewlet"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:14
msgid "Write the viewlet template"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:15
msgid "Add jQuery include statements"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:16
msgid "Saving the vote on the object using annotations"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:21
msgid "JavaScript inclusion"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:27
msgid "Earlier we added the logic that saves votes on the objects. We now create the user interface for it."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:29
msgid "Since we want to use the UI on more than one page (not only the talk view but also the talk listing) we need to put it somewhere."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:31
msgid "To handle the user input we don't use a form but links and ajax."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:32
msgid "The voting itself is a fact handled by another view"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:59
msgid "We extend the file :file:`browser/viewlets.py`"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:72
msgid "This will add a viewlet to a slot below the title and expect a template :file:`voting_viewlet.pt` in a folder :file:`browser/templates`."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:74
msgid "Let's create the file :file:`browser/templates/voting_viewlet.pt` without any logic"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:89
msgid "restart Plone"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:90
msgid "show the viewlet"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:95
msgid "Writing the Viewlet code"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:99
msgid "Now that we have the everything in place, we can add the Logic"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:101
msgid "Update the viewlet to contain the necessary logic in :file:`browser/viewlets`"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:143
msgid "And extend the template in :file:`browser/templates/voting_viewlet.pt`"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:185
msgid "We have many small parts, most of which will be hidden by JavaScript unless needed. By providing all this status information in HTML, we can use standard translation tools to translate."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:188
msgid "Translating strings in JavaScript requires extra work."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:190
msgid "We need some css that we store in :file:`static/starzel_votablebehavior.css`"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:239
msgid "JavaScript code"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:241
msgid "To make it work in the browser, some JavaScript :file:`static/starzel_votablebehavior.js`"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:288
msgid "This js code adheres to crockfort jshint rules, so all variables are declared at the beginning of the method. We show and hide quite a few small HTML elements here."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:294
msgid "Writing 2 simple view helpers"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:298
msgid "Our JavaScript code communicates with our site by calling views that don't exist yet. These Views do not need to render HTML, but should return a valid status. Exceptions set the right status and aren't being shown by JavaScript, so this will suit us fine."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:302
msgid "As you might remember, the :samp:`vote` method might return an exception, if somebody votes twice. We do not catch this exception. The user will never see this exception."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:307
msgid "Catching exceptions contain a gotcha for new developers."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:317
msgid "Zope claims some exceptions for itself. It needs them to work correctly."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:320
msgid "For example, if two requests try to modify something at the same time, one request will throw an exception, a :samp:`ConflictError`."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:322
msgid "Zope catches the exception, waits for a random amount of time, and tries to process the request again, up to three times. If you catch that exception, you are in trouble, so don't do that. Ever."
msgstr ""

#: ../mastering-plone/viewlets_2.rst:325
msgid "As so often, we must extend :file:`browser/configure.zcml`:"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:350
msgid "Then we add our simple views into the file :file:`browser/vote.py`"
msgstr ""

#: ../mastering-plone/viewlets_2.rst:375
msgid "A lot of moving parts have been created. Here is a small overview:"
msgstr ""

#: ../mastering-plone/views_1.rst:4
msgid "Views I"
msgstr ""

#: ../mastering-plone/views_1.rst:17
msgid "Register a view that can be opened in the browser"
msgstr ""

#: ../mastering-plone/views_1.rst:18
msgid "Create and use a template for the view"
msgstr ""

#: ../mastering-plone/views_1.rst:23
msgid "zcml"
msgstr ""

#: ../mastering-plone/views_1.rst:28
msgid "A simple browser view"
msgstr ""

#: ../mastering-plone/views_1.rst:30
msgid "Before writing the talk view itself we step back and talk *a little* about views and templates."
msgstr ""

#: ../mastering-plone/views_1.rst:32
msgid "A view in Plone is usually a :py:class:`BrowserView`. It can hold a lot of cool python code but we will first focus on the template."
msgstr ""

#: ../mastering-plone/views_1.rst:35
msgid "Edit the file ``browser/configure.zcml`` and register a new view called *training*:"
msgstr ""

#: ../mastering-plone/views_1.rst:69
msgid "Add a file ``browser/templates/training.pt``"
msgstr ""

#: ../mastering-plone/views_1.rst:75
msgid "Restart Plone and open http://localhost:8080/Plone/@@training."
msgstr ""

#: ../mastering-plone/views_1.rst:76
msgid "You should now see \"Hello World\"."
msgstr ""

#: ../mastering-plone/views_1.rst:78
msgid "You now have everything in place to learn about page templates."
msgstr ""

#: ../mastering-plone/views_1.rst:82
msgid "The view ``training`` has no python class registered for it but only a template. It acts as if it had an empty python class inheriting from ``Products.Five.browser.BrowserView`` but the way that happens is actually quite a bit of magic..."
msgstr ""

#: ../mastering-plone/views_2.rst:4
msgid "Views II: A Default View for \"Talk\""
msgstr ""

#: ../mastering-plone/views_2.rst:16
msgid "Register a view with a python class"
msgstr ""

#: ../mastering-plone/views_2.rst:17
msgid "Write a template used in the default view for talks"
msgstr ""

#: ../mastering-plone/views_2.rst:22
msgid "View classes"
msgstr ""

#: ../mastering-plone/views_2.rst:23
msgid "BrowserView and DefaultView"
msgstr ""

#: ../mastering-plone/views_2.rst:24
msgid "displaying data from fields"
msgstr ""

#: ../mastering-plone/views_2.rst:30
msgid "View Classes"
msgstr ""

#: ../mastering-plone/views_2.rst:32
msgid "Earlier we wrote a demo view which we also used to experiment with page templates. Now we are going to enhance that view so that it will have some python code, in addition to a template. Let us have a look at the ZCML and the code."
msgstr ""

#: ../mastering-plone/views_2.rst:36
#: ../mastering-plone/views_3.rst:45
msgid "``browser/configure.zcml``"
msgstr ""

#: ../mastering-plone/views_2.rst:56
msgid "We are adding a file called :file:`views.py` in the :file:`browser` folder."
msgstr ""

#: ../mastering-plone/views_2.rst:58
#: ../mastering-plone/views_2.rst:183
msgid ":file:`browser/views.py`"
msgstr ""

#: ../mastering-plone/views_2.rst:70
msgid "In the template :file:`training.pt` we can now use this view as `view` and access all its methods and properties:"
msgstr ""

#: ../mastering-plone/views_2.rst:76
msgid "The logic contained in the template can now be moved to the class:"
msgstr ""

#: ../mastering-plone/views_2.rst:122
msgid "And the template will now be much simpler."
msgstr ""

#: ../mastering-plone/views_2.rst:164
msgid "The default view"
msgstr ""

#: ../mastering-plone/views_2.rst:166
msgid "Now you know everything to create a nice view for talks in :file:`views.py`."
msgstr ""

#: ../mastering-plone/views_2.rst:168
msgid "First we will not write any methods for `view` but access the fields from the talk-schema as `context.<fieldname>`."
msgstr ""

#: ../mastering-plone/views_2.rst:170
msgid "Register a view `talkview` in :file:`browser/configure.zcml`:"
msgstr ""

#: ../mastering-plone/views_2.rst:190
msgid "Add the template :file:`templates/talkview.pt`:"
msgstr ""

#: ../mastering-plone/views_2.rst:214
msgid "After a restart, we can test our view by going to a talk and adding */talkview* to the url."
msgstr ""

#: ../mastering-plone/views_2.rst:218
msgid "Using helper-methods from :py:class:`DefaultView`"
msgstr ""

#: ../mastering-plone/views_2.rst:220
msgid "In the previous section we used :py:class:`BrowserView` as the base-class for :py:class:`TalkView`."
msgstr ""

#: ../mastering-plone/views_2.rst:222
msgid "Dexterity comes with a nice helper-class suited for views of content-types: The :py:class:`DefaultView` base class in :py:mod:`plone.dexterity`. It has some very useful properties available to use in the template:"
msgstr ""

#: ../mastering-plone/views_2.rst:225
msgid ":py:attr:`view.w` is a dictionary of all the display widgets, keyed by field names. This includes widgets from alternative fieldsets."
msgstr ""

#: ../mastering-plone/views_2.rst:226
msgid ":py:attr:`view.widgets` contains a list of widgets in schema order for the default fieldset."
msgstr ""

#: ../mastering-plone/views_2.rst:227
msgid ":py:attr:`view.groups` contains a list of fieldsets in fieldset order."
msgstr ""

#: ../mastering-plone/views_2.rst:228
msgid ":py:attr:`view.fieldsets` contains a dict mapping fieldset name to fieldset"
msgstr ""

#: ../mastering-plone/views_2.rst:229
msgid "On a fieldset (group), you can access a widget list to get widgets in that fieldset"
msgstr ""

#: ../mastering-plone/views_2.rst:231
msgid "You can now change the :py:class:`TalkView` to use it"
msgstr ""

#: ../mastering-plone/views_2.rst:243
msgid "The template :file:`templates/talkview.pt` still works but now you can modify it to use the pattern :samp:`view/w/<fieldname>/render` to render the widgets:"
msgstr ""

#: ../mastering-plone/views_2.rst:267
msgid "After a restart, we can test the modified view by going to a talk and adding */talkview* to the url."
msgstr ""

#: ../mastering-plone/views_2.rst:269
msgid "We should tell Plone that the talkview should be used as the default view for talks instead of the built-in view."
msgstr ""

#: ../mastering-plone/views_2.rst:271
msgid "This is a configuration that you can change during runtime and is stored in the database, as such it is also managed by GenericSetup profiles."
msgstr ""

#: ../mastering-plone/views_2.rst:273
msgid "open :file:`profiles/default/types/talk.xml`:"
msgstr ""

#: ../mastering-plone/views_2.rst:287
msgid "We will have to either reinstall our add-on or run the GenericSetup import step ``typeinfo`` so Plone learns about the change."
msgstr ""

#: ../mastering-plone/views_2.rst:291
msgid "To change it ttw go to the ZMI (http://localhost:8080/Plone/manage), go to ``portal_types`` and select the type for which the new view should be selectable (*talk*)."
msgstr ""

#: ../mastering-plone/views_2.rst:293
msgid "Now add ``talkview`` to the list *Available view methods*. Now the new view is available in the menu *Display*. To make it the default view enter it in ``Default view method``."
msgstr ""

#: ../mastering-plone/views_2.rst:297
msgid "Now you can improve the talkview to show all the info:"
msgstr ""

#: ../mastering-plone/views_2.rst:299
msgid ":file:`templates/talkview.pt`:"
msgstr ""

#: ../mastering-plone/views_2.rst:349
msgid "Add the new choice field \"room\" to the Talk type (TTW) and display it below Audience in the browser view, it should contain the following data:"
msgstr ""

#: ../mastering-plone/views_2.rst:352
msgid "Title: Room"
msgstr ""

#: ../mastering-plone/views_2.rst:353
msgid "Possible values: Room 101, Room 102, Auditorium"
msgstr ""

#: ../mastering-plone/views_2.rst:358
msgid "Go to http://localhost:8080/Plone/dexterity-types/talk/@@fields and add the new field"
msgstr ""

#: ../mastering-plone/views_2.rst:359
msgid "Add the new HTML below the audience part:"
msgstr ""

#: ../mastering-plone/views_2.rst:371
msgid "Behind the scenes"
msgstr ""

#: ../mastering-plone/views_2.rst:399
msgid "Do you remember the term :py:class:`MultiAdapter`?"
msgstr ""

#: ../mastering-plone/views_2.rst:401
msgid "The browser page is just a MultiAdapter. The ZCML statement :samp:`browser:page` registers a :py:class:`MultiAdapter` and adds additional things needed for a browser view."
msgstr ""

#: ../mastering-plone/views_2.rst:404
msgid "An adapter adapts things, a :py:class:`MultiAdapter` adapts multiple things."
msgstr ""

#: ../mastering-plone/views_2.rst:406
msgid "When you enter a URL, Zope tries to find an object for it. At the end, when Zope does not find any more objects but there is still a path item left, or there are no more path items, Zope looks for an adapter that will reply to the request."
msgstr ""

#: ../mastering-plone/views_2.rst:410
msgid "The adapter adapts the request and the object that Zope found with the URL. The adapter class gets instantiated with the objects to be adapted, then it gets called."
msgstr ""

#: ../mastering-plone/views_2.rst:413
msgid "The code above does the same thing that the standard implementation would do. It makes :py:attr:`context` and :py:attr:`request` available as variables on the object."
msgstr ""

#: ../mastering-plone/views_2.rst:416
msgid "I have written down these methods because it is important to understand some important concepts."
msgstr ""

#: ../mastering-plone/views_2.rst:418
msgid "The :py:meth:`__init__` method gets called while Zope is still *trying* to find a view. At that phase, the security has not been resolved. Your code is not security checked."
msgstr ""

#: ../mastering-plone/views_2.rst:421
msgid "For historical reasons, many errors that happen in the :py:meth:`__init__` method can result in a page not found error instead of an exception."
msgstr ""

#: ../mastering-plone/views_2.rst:424
msgid "Use the :py:meth:`__init__` method to do as little as possible, if at all. Instead, you have the guarantee that the :py:meth:`__call__` method is called before anything else (but after the :py:meth:`__init__` method)."
msgstr ""

#: ../mastering-plone/views_2.rst:427
msgid "It has the security checks in place and so on."
msgstr ""

#: ../mastering-plone/views_2.rst:429
msgid "From a practical standpoint, consider the :py:meth:`__call__` method your :py:meth:`__init__` method, the biggest difference is that this method is supposed to return the HTML already."
msgstr ""

#: ../mastering-plone/views_2.rst:432
msgid "Let your base class handle the HTML generation."
msgstr ""

#: ../mastering-plone/views_2.rst:436
msgid "https://docs.plone.org/develop/plone/views/browserviews.html"
msgstr ""

#: ../mastering-plone/views_3.rst:4
msgid "Views III: A Talk List"
msgstr ""

#: ../mastering-plone/views_3.rst:16
msgid "Write a python class to get all talks from the catalog"
msgstr ""

#: ../mastering-plone/views_3.rst:17
msgid "Write a template to display the talks"
msgstr ""

#: ../mastering-plone/views_3.rst:18
msgid "Improve the table"
msgstr ""

#: ../mastering-plone/views_3.rst:22
msgid "BrowserView"
msgstr ""

#: ../mastering-plone/views_3.rst:25
#: ../mastering-plone/views_3.rst:116
msgid "brains and objects"
msgstr ""

#: ../mastering-plone/views_3.rst:26
msgid "Acquisition"
msgstr ""

#: ../mastering-plone/views_3.rst:29
msgid "Now we don't want to provide information about one specific item but on several items. What now? We can't look at several items at the same time as context."
msgstr ""

#: ../mastering-plone/views_3.rst:35
msgid "Using portal_catalog"
msgstr ""

#: ../mastering-plone/views_3.rst:37
msgid "Let's say we want to show a list of all the talks that were submitted for our conference. We can just go to the folder and select a display method that suits us. But none does because we want to show the target audience in our listing."
msgstr ""

#: ../mastering-plone/views_3.rst:39
msgid "So we need to get all the talks. For this we use the python class of the view to query the catalog for the talks."
msgstr ""

#: ../mastering-plone/views_3.rst:41
msgid "The catalog is like a search engine for the content on our site. It holds information about all the objects as well as some of their attributes like title, description, workflow_state, keywords that they were tagged with, author, content_type, its path in the site etc. But it does not hold the content of \"heavy\" fields like images or files, richtext fields and fields that we just defined ourselves."
msgstr ""

#: ../mastering-plone/views_3.rst:43
msgid "It is the fast way to get content that exists in the site and do something with it. From the results of the catalog we can get the objects themselves but often we don't need them, but only the properties that the results already have."
msgstr ""

#: ../mastering-plone/views_3.rst:59
msgid "``browser/views.py``"
msgstr ""

#: ../mastering-plone/views_3.rst:92
msgid "We query the catalog with two parameters. The catalog returns only items for which **both** apply:"
msgstr ""

#: ../mastering-plone/views_3.rst:94
msgid "``context=self.context``"
msgstr ""

#: ../mastering-plone/views_3.rst:95
msgid "``portal_type='talk'``"
msgstr ""

#: ../mastering-plone/views_3.rst:97
msgid "We pass a object as `context` to query only for content in the current path. Otherwise we'd get all talks in the whole site. If we moved some talks to a different part of the site (e.g. a sub-conference for universities with a special talk list) we might not want so see them in our listing. We also query for the `portal_type` so we only find talks."
msgstr ""

#: ../mastering-plone/views_3.rst:101
msgid "We use the method :py:meth:`find` in :py:mod:`plone.api` to query the catalog. It is one of many convenience-methods provided as a wrapper around otherwise more complex api's. If you query the catalog directly you'd have to first get the catalog, and pass it the path for which you want to find items:"
msgstr ""

#: ../mastering-plone/views_3.rst:109
msgid "We iterate over the list of results that the catalog returns us."
msgstr ""

#: ../mastering-plone/views_3.rst:111
msgid "We create a dictionary that holds all the information we want to show in the template. This way we don't have to put any complex logic into the template."
msgstr ""

#: ../mastering-plone/views_3.rst:118
msgid "Objects are normally not loaded into memory but lie dormant in the ZODB Database. Waking objects up can be slow, especially if you're waking up a lot of objects. Fortunately our talks are not especially heavy since they are:"
msgstr ""

#: ../mastering-plone/views_3.rst:120
msgid "dexterity-objects which are lighter than their archetypes brothers"
msgstr ""

#: ../mastering-plone/views_3.rst:121
msgid "relatively few since we don't have thousands of talks at our conference"
msgstr ""

#: ../mastering-plone/views_3.rst:123
msgid "We want to show the target audience but that attribute of the talk content type is not in the catalog. This is why we need to get to the objects themselves."
msgstr ""

#: ../mastering-plone/views_3.rst:125
msgid "We could also add a new index to the catalog that will add 'audience' to the properties of brains, but we should weigh the pros and cons:"
msgstr ""

#: ../mastering-plone/views_3.rst:127
msgid "talks are important and thus most likely always in memory"
msgstr ""

#: ../mastering-plone/views_3.rst:128
msgid "prevent bloating of catalog with indexes"
msgstr ""

#: ../mastering-plone/views_3.rst:132
msgid "The code to add such an index would look like this::"
msgstr ""

#: ../mastering-plone/views_3.rst:141
msgid "We'd have to register this factory function as a named adapter in the :file:`configure.zcml`. Assuming you've put the code above into a file named :file:`indexers.py`"
msgstr ""

#: ../mastering-plone/views_3.rst:147
msgid "We will add some indexers later on."
msgstr ""

#: ../mastering-plone/views_3.rst:149
msgid "Why use the catalog at all? It checks for permissions, and only returns the talks that the current user may see. They might be private or hidden to you since they are part of a top secret conference for core developers (there is no such thing!)."
msgstr ""

#: ../mastering-plone/views_3.rst:151
msgid "Most objects in Plone act like dictionaries, so you can do :py:meth:`context.values()` to get all its contents."
msgstr ""

#: ../mastering-plone/views_3.rst:153
msgid "For historical reasons some attributes of brains and objects are written differently."
msgstr ""

#: ../mastering-plone/views_3.rst:168
msgid "Who can guess what :py:attr:`brain.title` will return since the brain has no such attribute?"
msgstr ""

#: ../mastering-plone/views_3.rst:174
msgid "Answer: Acquisition will get the attribute from the nearest parent. ``brain.__parent__`` is ``<CatalogTool at /Plone/portal_catalog>``. The attribute ``title`` of the ``portal_catalog`` is 'Indexes all content in the site'."
msgstr ""

#: ../mastering-plone/views_3.rst:176
msgid "Acquisition can be harmful. Brains have no attribute 'getLayout' :py:meth:`brain.getLayout()`:"
msgstr ""

#: ../mastering-plone/views_3.rst:189
msgid "The same is true for methods:"
msgstr ""

#: ../mastering-plone/views_3.rst:203
msgid "Querying the catalog"
msgstr ""

#: ../mastering-plone/views_3.rst:205
msgid "The are many `catalog indexes <https://docs.plone.org/develop/plone/searching_and_indexing/indexing.html>`_ to query. Here are some examples:"
msgstr ""

#: ../mastering-plone/views_3.rst:215
msgid "Calling the catalog without parameters returns the whole site:"
msgstr ""

#: ../mastering-plone/views_3.rst:224
msgid "https://docs.plone.org/develop/plone/searching_and_indexing/query.html"
msgstr ""

#: ../mastering-plone/views_3.rst:232
msgid "Since you now know how to query the catalog it is time for some exercise."
msgstr ""

#: ../mastering-plone/views_3.rst:237
msgid "Add a method :py:meth:`get_news` to :py:class:`TalkListView` that returns a list of brains of all News Items that are published and sort them in the order of their publishing-date."
msgstr ""

#: ../mastering-plone/views_3.rst:259
msgid "Add a method that returns all published keynotes as objects."
msgstr ""

#: ../mastering-plone/views_3.rst:286
msgid "The template for the listing"
msgstr ""

#: ../mastering-plone/views_3.rst:288
msgid "Next you create a template in which you use the results of the method 'talks'."
msgstr ""

#: ../mastering-plone/views_3.rst:290
msgid "Try to keep logic mostly in python. This is for two reasons:"
msgstr ""

#: ../mastering-plone/views_3.rst:293
msgid "Readability:"
msgstr ""

#: ../mastering-plone/views_3.rst:293
msgid "It's much easier to read python than complex tal-structures"
msgstr ""

#: ../mastering-plone/views_3.rst:296
msgid "Speed:"
msgstr ""

#: ../mastering-plone/views_3.rst:296
msgid "Python-code is faster than code executed in templates. It's also easy to add caching to methods."
msgstr ""

#: ../mastering-plone/views_3.rst:300
msgid "DRY:"
msgstr ""

#: ../mastering-plone/views_3.rst:299
msgid "In Python you can reuse methods and easily refactor code. Refactoring TAL usually means having to do big changes in the html-structure which results in incomprehensible diffs."
msgstr ""

#: ../mastering-plone/views_3.rst:302
msgid "The MVC-Schema does not directly apply to Plone but look at it like this:"
msgstr ""

#: ../mastering-plone/views_3.rst:305
msgid "Model:"
msgstr ""

#: ../mastering-plone/views_3.rst:305
msgid "the object"
msgstr ""

#: ../mastering-plone/views_3.rst:308
msgid "View:"
msgstr ""

#: ../mastering-plone/views_3.rst:308
msgid "the template"
msgstr ""

#: ../mastering-plone/views_3.rst:311
msgid "Controller:"
msgstr ""

#: ../mastering-plone/views_3.rst:311
msgid "the view"
msgstr ""

#: ../mastering-plone/views_3.rst:313
msgid "The view and the controller are very much mixed in Plone. Especially when you look at some of the older code of Plone you'll see that the policy of keeping logic in python and representation in templates was not always enforced."
msgstr ""

#: ../mastering-plone/views_3.rst:315
msgid "But you should nevertheless do it! You'll end up with more than enough logic in the templates anyway."
msgstr ""

#: ../mastering-plone/views_3.rst:317
msgid "Add this simple table to :file:`templates/talklistview.pt`:"
msgstr ""

#: ../mastering-plone/views_3.rst:366
msgid "Again we use ``class=\"listing\"`` to give the table a nice style."
msgstr ""

#: ../mastering-plone/views_3.rst:368
msgid "There are some some things that need explanation:"
msgstr ""

#: ../mastering-plone/views_3.rst:371
msgid ":samp:`tal:define=\"talks python:view.talks()\"`"
msgstr ""

#: ../mastering-plone/views_3.rst:371
msgid "This defines the variable `talks`. We do thins since we reuse it later and don't want to call the same method twice. Since TAL's path expressions for the lookup of values in dictionaries is the same as for the attributes of objects and methods of classes we can write :samp:`view/talks` as we could :samp:`view/someattribute`. Handy but sometimes irritating since from looking at the page template alone we often have no way of knowing if something is an attribute, a method or the value of a dict."
msgstr ""

#: ../mastering-plone/views_3.rst:374
msgid ":samp:`tal:repeat=\"talk talks\"`"
msgstr ""

#: ../mastering-plone/views_3.rst:374
msgid "This iterates over the list of dictionaries returned by the view. Each :py:obj:`talk` is one of the dictionaries that are returned by this method."
msgstr ""

#: ../mastering-plone/views_3.rst:377
msgid ":samp:`tal:content=\"python:talk['speaker']\"`"
msgstr ""

#: ../mastering-plone/views_3.rst:377
msgid "'speaker' is a key in the dict 'talk'. We could also write :samp:`tal:content=\"talk/speaker\"`"
msgstr ""

#: ../mastering-plone/views_3.rst:380
msgid ":samp:`tal:condition=\"not:talks\"`"
msgstr ""

#: ../mastering-plone/views_3.rst:380
msgid "This is a fallback if no talks are returned. It then returns an empty list (remember :samp:`results = []`?)"
msgstr ""

#: ../mastering-plone/views_3.rst:384
msgid "We could also write :samp:`python:not talks` like we could also write :samp:`tal:repeat=\"talk python:talks\"` for the iteration. For simple cases as these path-statements are sometimes fine. On the other hand: If ``talks`` would be a callable we woul need to use ``nocall:talks``, so maybe it would be better to always use ``python:``."
msgstr ""

#: ../mastering-plone/views_3.rst:390
msgid "Modify the view to only use path-expressions. This is **not** best-practice but there is plenty of code in Plone and in Addons so you have to know how to use them."
msgstr ""

#: ../mastering-plone/views_3.rst:445
msgid "Setting a custom view as default view on an object"
msgstr ""

#: ../mastering-plone/views_3.rst:447
msgid "We don't want to always have to append :samp:`/@@talklistview` to our folder to get the view. There is a very easy way to set the view to the folder using the ZMI."
msgstr ""

#: ../mastering-plone/views_3.rst:449
msgid "If we append :samp:`/manage_propertiesForm` we can set the property \"layout\" to :samp:`talklistview`."
msgstr ""

#: ../mastering-plone/views_3.rst:451
msgid "To make views configurable so that editors can choose them we have to register the view for the content type at hand in its FTI. To enable it for all folders we add a new file :file:`profiles/default/types/Folder.xml`"
msgstr ""

#: ../mastering-plone/views_3.rst:463
msgid "After re-applying the typeinfo profile of our add-on (or simply reinstalling it) the content type \"Folder\" is extended with our additional view method and appears in the display dropdown."
msgstr ""

#: ../mastering-plone/views_3.rst:465
msgid "The :samp:`purge=\"False\"` appends the view to the already existing ones instead of replacing them."
msgstr ""

#: ../mastering-plone/views_3.rst:473
msgid "You created a nice listing, that can be called at any place in the website"
msgstr ""

#: ../mastering-plone/views_3.rst:474
msgid "You wrote your first fully grown BrowserView that combines a template, a class and a method in that class"
msgstr ""

#: ../mastering-plone/views_3.rst:475
msgid "You learned about portal_catalog, brains and how they are related to objects"
msgstr ""

#: ../mastering-plone/views_3.rst:476
msgid "You learned about Acquisition and how it can have unintended effects"
msgstr ""

#: ../mastering-plone/views_3.rst:477
msgid "You extended the FTI of a existing content type to allow the use the new view to all Editor"
msgstr ""

#: ../mastering-plone/zpt.rst:4
msgid "Page Templates"
msgstr ""

#: ../mastering-plone/zpt.rst:17
msgid "Learn to write page templates"
msgstr ""

#: ../mastering-plone/zpt.rst:22
#: ../mastering-plone/zpt.rst:88
msgid "TAL and TALES"
msgstr ""

#: ../mastering-plone/zpt.rst:24
msgid "Chameleon"
msgstr ""

#: ../mastering-plone/zpt.rst:27
msgid "Page Templates are HTML files with some additional information, written in TAL, METAL and TALES."
msgstr ""

#: ../mastering-plone/zpt.rst:29
msgid "Page templates must be valid XML."
msgstr ""

#: ../mastering-plone/zpt.rst:31
msgid "The three languages are:"
msgstr ""

#: ../mastering-plone/zpt.rst:33
msgid "TAL: \"Template Attribute Language\""
msgstr ""

#: ../mastering-plone/zpt.rst:35
msgid "Templating XML/HTML using special attributes"
msgstr ""

#: ../mastering-plone/zpt.rst:37
msgid "Using TAL we include expressions within HTML"
msgstr ""

#: ../mastering-plone/zpt.rst:39
msgid "TALES: \"TAL Expression Syntax\""
msgstr ""

#: ../mastering-plone/zpt.rst:41
msgid "defines the syntax and semantics of these expressions"
msgstr ""

#: ../mastering-plone/zpt.rst:43
msgid "METAL: \"Macro Expansion for TAL\""
msgstr ""

#: ../mastering-plone/zpt.rst:45
msgid "this enables us to combine, re-use and nest templates together"
msgstr ""

#: ../mastering-plone/zpt.rst:47
msgid "TAL and METAL are written like HTML attributes (href, src, title). TALES are written like the values of HTML attributes."
msgstr ""

#: ../mastering-plone/zpt.rst:50
msgid "A typical TAL attribute looks like this:"
msgstr ""

#: ../mastering-plone/zpt.rst:58
msgid "It's used to modify the output:"
msgstr ""

#: ../mastering-plone/zpt.rst:64
#: ../mastering-plone/zpt.rst:117
msgid "results in:"
msgstr ""

#: ../mastering-plone/zpt.rst:70
msgid "Let's try it."
msgstr ""

#: ../mastering-plone/zpt.rst:72
msgid "Open the file :file:`training.pt` and add:"
msgstr ""

#: ../mastering-plone/zpt.rst:90
msgid "Let's add some magic and modify the <p>-tag:"
msgstr ""

#: ../mastering-plone/zpt.rst:96
msgid "This will result in:"
msgstr ""

#: ../mastering-plone/zpt.rst:102
msgid "Without restarting Plone open http://localhost:8080/Plone/@@training."
msgstr ""

#: ../mastering-plone/zpt.rst:104
msgid "The same happens with attributes."
msgstr ""

#: ../mastering-plone/zpt.rst:106
msgid "Replace the <p>-line with:"
msgstr ""

#: ../mastering-plone/zpt.rst:125
msgid "We used three TAL-Attributes here."
msgstr ""

#: ../mastering-plone/zpt.rst:127
msgid "This is the complete list of TAL-attributes:"
msgstr ""

#: ../mastering-plone/zpt.rst:130
msgid "``tal:define``"
msgstr ""

#: ../mastering-plone/zpt.rst:130
msgid "define variables. We defined the variable ``a_fine_url`` to the string \"https://www.ploneconf.org/\""
msgstr ""

#: ../mastering-plone/zpt.rst:133
msgid "``tal:content``"
msgstr ""

#: ../mastering-plone/zpt.rst:133
msgid "replace the content of an element. We replaced the default content above with \"An even better conference\""
msgstr ""

#: ../mastering-plone/zpt.rst:136
msgid "``tal:attributes``"
msgstr ""

#: ../mastering-plone/zpt.rst:136
msgid "dynamically change element attributes. We set the HTML attribute ``href`` to the value of the variable ``a_fine_url``"
msgstr ""

#: ../mastering-plone/zpt.rst:139
#: ../mastering-plone/zpt.rst:193
msgid "``tal:condition``"
msgstr ""

#: ../mastering-plone/zpt.rst:139
msgid "tests whether the expression is true or false, and outputs or omits the element accordingly."
msgstr ""

#: ../mastering-plone/zpt.rst:142
#: ../mastering-plone/zpt.rst:229
msgid "``tal:repeat``"
msgstr ""

#: ../mastering-plone/zpt.rst:142
#: ../mastering-plone/zpt.rst:229
msgid "repeats an iterable element, in our case the list of talks."
msgstr ""

#: ../mastering-plone/zpt.rst:145
msgid "``tal:replace``"
msgstr ""

#: ../mastering-plone/zpt.rst:145
msgid "replace the content of an element, like ``tal:content`` does, but removes the element only leaving the content."
msgstr ""

#: ../mastering-plone/zpt.rst:148
#: ../mastering-plone/zpt.rst:443
msgid "``tal:omit-tag``"
msgstr ""

#: ../mastering-plone/zpt.rst:148
msgid "remove an element, leaving the content of the element."
msgstr ""

#: ../mastering-plone/zpt.rst:152
#: ../mastering-plone/zpt.rst:446
msgid "``tal:on-error``"
msgstr ""

#: ../mastering-plone/zpt.rst:151
#: ../mastering-plone/zpt.rst:446
msgid "handle errors."
msgstr ""

#: ../mastering-plone/zpt.rst:155
msgid "python expressions"
msgstr ""

#: ../mastering-plone/zpt.rst:157
msgid "Till now we only used one TALES expression (the ``string:`` bit). Let's use a different TALES expression now."
msgstr ""

#: ../mastering-plone/zpt.rst:160
msgid "With ``Python:`` we can use Python code."
msgstr ""

#: ../mastering-plone/zpt.rst:162
msgid "A example:"
msgstr ""

#: ../mastering-plone/zpt.rst:171
msgid "And another:"
msgstr ""

#: ../mastering-plone/zpt.rst:183
msgid "With python expressions"
msgstr ""

#: ../mastering-plone/zpt.rst:185
msgid "you can only write single statements"
msgstr ""

#: ../mastering-plone/zpt.rst:186
msgid "you could import things but you should not (example: ``tal:define=\"something modules/Products.PythonScripts/something;``)."
msgstr ""

#: ../mastering-plone/zpt.rst:190
msgid "tal:condition"
msgstr ""

#: ../mastering-plone/zpt.rst:193
msgid "tests whether the expression is true or false."
msgstr ""

#: ../mastering-plone/zpt.rst:195
msgid "If it's true, then the tag is rendered."
msgstr ""

#: ../mastering-plone/zpt.rst:196
msgid "If it's false then the tag **and all its children** are removed and no longer evaluated."
msgstr ""

#: ../mastering-plone/zpt.rst:197
msgid "We can reverse the logic by perpending a ``not:`` to the expression."
msgstr ""

#: ../mastering-plone/zpt.rst:199
msgid "Let's add another TAL Attribute to our above example::"
msgstr ""

#: ../mastering-plone/zpt.rst:203
msgid "We could also test for the number of talks::"
msgstr ""

#: ../mastering-plone/zpt.rst:207
msgid "or if a certain talk is in the list of talks::"
msgstr ""

#: ../mastering-plone/zpt.rst:213
msgid "tal:repeat"
msgstr ""

#: ../mastering-plone/zpt.rst:215
msgid "Let's try another attribute:"
msgstr ""

#: ../mastering-plone/zpt.rst:231
msgid "We change the markup a little to construct a list in which there is an ``<li>`` for every talk:"
msgstr ""

#: ../mastering-plone/zpt.rst:251
msgid "path expressions"
msgstr ""

#: ../mastering-plone/zpt.rst:253
msgid "Regarding TALES so far we used ``string:`` or ``python:`` or only variables. The next and most common expression are path expressions."
msgstr ""

#: ../mastering-plone/zpt.rst:256
msgid "Optionally you can start a path expression with ``path:``"
msgstr ""

#: ../mastering-plone/zpt.rst:258
msgid "Every path expression starts with a variable name. It can either be an object like :py:obj:`context`, :py:obj:`view` or :py:obj:`template` or a variable defined by you like :py:data:`talk`."
msgstr ""

#: ../mastering-plone/zpt.rst:261
msgid "After the variable we add a slash ``/`` and the name of a sub-object, attribute or callable. The ``/`` is used to end the name of an object and the start of the property name."
msgstr ""

#: ../mastering-plone/zpt.rst:264
msgid "Properties themselves may be objects that in turn have properties."
msgstr ""

#: ../mastering-plone/zpt.rst:270
msgid "We can chain several of those to get to the information we want."
msgstr ""

#: ../mastering-plone/zpt.rst:276
msgid "This would return the value of the form dictionary of the HTTPRequest object. Useful for form handling."
msgstr ""

#: ../mastering-plone/zpt.rst:278
msgid "The ``|`` (\"or\") character is used to find an alternative value to a path if the first path evaluates to ``nothing`` or does not exist."
msgstr ""

#: ../mastering-plone/zpt.rst:284
msgid "This returns the id of the context if it has no title."
msgstr ""

#: ../mastering-plone/zpt.rst:290
msgid "This returns nothing if there is no 'average_rating' for a talk."
msgstr ""

#: ../mastering-plone/zpt.rst:292
msgid "What will not work is ``tal:content=\"python:talk['average_rating'] or ''\"``."
msgstr ""

#: ../mastering-plone/zpt.rst:294
msgid "Who knows what this would yield?"
msgstr ""

#: ../mastering-plone/zpt.rst:298
msgid "We'll get ``KeyError: 'average_rating'``. It is very bad practice to use ``|`` too often since it will swallow errors like a typo in ``tal:content=\"talk/averange_ratting | nothing\"`` and you might wonder why there are no ratings later on..."
msgstr ""

#: ../mastering-plone/zpt.rst:301
msgid "You can't and should not use it to prevent errors like a try/except block."
msgstr ""

#: ../mastering-plone/zpt.rst:303
msgid "There are several **built-in variables**  that can be used in paths:"
msgstr ""

#: ../mastering-plone/zpt.rst:305
msgid "The most frequently used one is ``nothing`` which is the equivalent to None"
msgstr ""

#: ../mastering-plone/zpt.rst:313
msgid "A dict of all the available variables at the current state is ``econtext``"
msgstr ""

#: ../mastering-plone/zpt.rst:325
msgid "Useful for debugging :-)"
msgstr ""

#: ../mastering-plone/zpt.rst:329
msgid "In Plone 4 that used to be ``CONTEXTS``"
msgstr ""

#: ../mastering-plone/zpt.rst:343
msgid "Pure TAL blocks"
msgstr ""

#: ../mastering-plone/zpt.rst:345
msgid "We can use TAL attributes without HTML Tags."
msgstr ""

#: ../mastering-plone/zpt.rst:347
msgid "This is useful when we don't need to add any tags to the markup."
msgstr ""

#: ../mastering-plone/zpt.rst:349
msgid "Syntax:"
msgstr ""

#: ../mastering-plone/zpt.rst:371
msgid "handling complex data in templates"
msgstr ""

#: ../mastering-plone/zpt.rst:373
msgid "Let's move on to a little more complex data. And to another TAL attribute:"
msgstr ""

#: ../mastering-plone/zpt.rst:376
msgid "tal:replace"
msgstr ""

#: ../mastering-plone/zpt.rst:376
msgid "replace the content of an element and removes the element only leaving the content."
msgstr ""

#: ../mastering-plone/zpt.rst:387
msgid "this results in:"
msgstr ""

#: ../mastering-plone/zpt.rst:395
msgid "``tal:replace`` drops its own base tag in favor of the result of the TALES expression. Thus the original ``<img... >`` is replaced."
msgstr ""

#: ../mastering-plone/zpt.rst:398
msgid "But the result is escaped by default."
msgstr ""

#: ../mastering-plone/zpt.rst:400
msgid "To prevent escaping we use ``structure``"
msgstr ""

#: ../mastering-plone/zpt.rst:409
msgid "Now let's emulate a typical Plone structure by creating a dictionary."
msgstr ""

#: ../mastering-plone/zpt.rst:437
msgid "We emulate a list of talks and display information about them in a table. We'll get back to the list of talks later when we use the real talk objects that we created with dexterity."
msgstr ""

#: ../mastering-plone/zpt.rst:440
msgid "To complete the list here are the TAL attributes we have not yet used:"
msgstr ""

#: ../mastering-plone/zpt.rst:443
msgid "Omit the element tag, leaving only the inner content."
msgstr ""

#: ../mastering-plone/zpt.rst:448
msgid "When an element has multiple TAL attributes, they are executed in this order:"
msgstr ""

#: ../mastering-plone/zpt.rst:450
msgid "define"
msgstr ""

#: ../mastering-plone/zpt.rst:452
msgid "repeat"
msgstr ""

#: ../mastering-plone/zpt.rst:453
msgid "content or replace"
msgstr ""

#: ../mastering-plone/zpt.rst:454
msgid "attributes"
msgstr ""

#: ../mastering-plone/zpt.rst:455
msgid "omit-tag"
msgstr ""

#: ../mastering-plone/zpt.rst:459
msgid "Plone 5"
msgstr ""

#: ../mastering-plone/zpt.rst:461
msgid "Plone 5 uses a new rendering engine called `Chameleon <https://chameleon.readthedocs.io/en/latest/>`_."
msgstr ""

#: ../mastering-plone/zpt.rst:463
msgid "Using the integration layer `five.pt <https://pypi.org/project/five.pt>`_ it is fully compatible with the normal TAL syntax but offers some additional features:"
msgstr ""

#: ../mastering-plone/zpt.rst:466
msgid "You can use ``${...}`` as short-hand for text insertion in pure html effectively making ``tal:content`` and ``tal:attributes`` obsolete."
msgstr ""

#: ../mastering-plone/zpt.rst:468
msgid "Here are some examples:"
msgstr ""

#: ../mastering-plone/zpt.rst:470
msgid "Plone 4 and Plone 5:"
msgstr ""

#: ../mastering-plone/zpt.rst:481
msgid "Plone 5 (and Plone 4 with five.pt) :"
msgstr ""

#: ../mastering-plone/zpt.rst:491
msgid "You can also add pure python into the templates:"
msgstr ""

#: ../mastering-plone/zpt.rst:512
msgid "Modify the following template and one by one solve the following problems: :"
msgstr ""

#: ../mastering-plone/zpt.rst:545
msgid "Display the subjects as comma-separated."
msgstr ""

#: ../mastering-plone/zpt.rst:581
msgid "Turn the title in a link to the URL of the talk if there is one."
msgstr ""

#: ../mastering-plone/zpt.rst:621
msgid "If there is no URL, turn it into a link to a google search for that talk's title:"
msgstr ""

#: ../mastering-plone/zpt.rst:662
msgid "4. Add alternating the CSS classes 'odd' and 'even' to the <tr>. (:samp:`repeat.{<name of item in loop>}.odd` is True if the ordinal index of the current iteration is an odd number)."
msgstr ""

#: ../mastering-plone/zpt.rst:665
msgid "Use some CSS to test your solution:"
msgstr ""

#: ../mastering-plone/zpt.rst:715
msgid "Only use python expressions."
msgstr ""

#: ../mastering-plone/zpt.rst:753
msgid "Use the new syntax of Plone 5"
msgstr ""

#: ../mastering-plone/zpt.rst:793
msgid "Sort the talks alphabetically by title"
msgstr ""

#: ../mastering-plone/zpt.rst:835
msgid "Do not use this trick in your projects! This level of python-logic belongs in a class, not in a template."
msgstr ""

#: ../mastering-plone/zpt.rst:839
msgid "METAL and macros"
msgstr ""

#: ../mastering-plone/zpt.rst:841
msgid "Why is our output so ugly?"
msgstr ""

#: ../mastering-plone/zpt.rst:843
msgid "How do we get our HTML to render in Plone the UI?"
msgstr ""

#: ../mastering-plone/zpt.rst:845
msgid "We use METAL (Macro Extension to TAL) to define slots that we can fill and macros that we can reuse."
msgstr ""

#: ../mastering-plone/zpt.rst:847
msgid "We add to the ``<html>`` tag::"
msgstr ""

#: ../mastering-plone/zpt.rst:851
msgid "And then wrap the code we want to put in the content area of Plone in:"
msgstr ""

#: ../mastering-plone/zpt.rst:859
msgid "This will put our code in a section defined in the main_template called \"content-core\"."
msgstr ""

#: ../mastering-plone/zpt.rst:861
msgid "The template should now look like below when we exclude the last exercise."
msgstr ""

#: ../mastering-plone/zpt.rst:863
msgid "Here also added the css-class `listing` to the table. It is one of many css-classes used by Plone that you can reuse in your projects:"
msgstr ""

#: ../mastering-plone/zpt.rst:915
msgid "macros in browser views"
msgstr ""

#: ../mastering-plone/zpt.rst:917
msgid "Define a macro in a new file :file:`macros.pt`"
msgstr ""

#: ../mastering-plone/zpt.rst:925
msgid "Register it as a simple BrowserView in zcml:"
msgstr ""

#: ../mastering-plone/zpt.rst:936
msgid "Reuse the macro in the template :file:`training.pt`:"
msgstr ""

#: ../mastering-plone/zpt.rst:944
msgid "Which is the same as:"
msgstr ""

#: ../mastering-plone/zpt.rst:952
msgid "Restart your Plone instance from the command line, and then open http://localhost:8080/Plone/@@training to see this macro being used in our @@training browser view template."
msgstr ""

#: ../mastering-plone/zpt.rst:958
msgid "Accessing Plone from the template"
msgstr ""

#: ../mastering-plone/zpt.rst:960
msgid "In our template you have access to:"
msgstr ""

#: ../mastering-plone/zpt.rst:962
msgid "the **context** object on which your view is called on"
msgstr ""

#: ../mastering-plone/zpt.rst:963
msgid "the **view** itself (and all python methods we'll put in the view later on)"
msgstr ""

#: ../mastering-plone/zpt.rst:964
msgid "the **request**"
msgstr ""

#: ../mastering-plone/zpt.rst:966
msgid "With these three we can do almost anything!"
msgstr ""

#: ../mastering-plone/zpt.rst:968
msgid "In templates we can also access other browser views. Some of those exist to provide easy access to methods we often need::"
msgstr ""

#: ../mastering-plone/zpt.rst:976
msgid "``@@plone_context_state``"
msgstr ""

#: ../mastering-plone/zpt.rst:976
msgid "The BrowserView :py:class:`plone.app.layout.globals.context.ContextState` holds useful methods having to do with the current context object such as :py:meth:`is_default_page`"
msgstr ""

#: ../mastering-plone/zpt.rst:979
msgid "``@@plone_portal_state``"
msgstr ""

#: ../mastering-plone/zpt.rst:979
msgid "The BrowserView :py:class:`plone.app.layout.globals.portal.PortalState` holds methods for the portal like :py:meth:`portal_url`"
msgstr ""

#: ../mastering-plone/zpt.rst:982
msgid "``@@plone_tools``"
msgstr ""

#: ../mastering-plone/zpt.rst:982
msgid "The BrowserView :py:class:`plone.app.layout.globals.tools.Tools` gives access to the most important tools like ``plone_tools/catalog``"
msgstr ""

#: ../mastering-plone/zpt.rst:984
msgid "These are very widely used and there are many more."
msgstr ""

#: ../mastering-plone/zpt.rst:990
msgid "What we missed"
msgstr ""

#: ../mastering-plone/zpt.rst:992
msgid "There are some things we did not cover so far:"
msgstr ""

#: ../mastering-plone/zpt.rst:995
msgid "``tal:condition=\"exists:expression\"``"
msgstr ""

#: ../mastering-plone/zpt.rst:995
msgid "checks if an object or an attribute exists (seldom used)"
msgstr ""

#: ../mastering-plone/zpt.rst:998
msgid "``tal:condition=\"nocall:context\"``"
msgstr ""

#: ../mastering-plone/zpt.rst:998
msgid "to explicitly not call a callable."
msgstr ""

#: ../mastering-plone/zpt.rst:1000
msgid "If we refer to content objects, without using the nocall: modifier these objects are unnecessarily rendered in memory as the expression is evaluated."
msgstr ""

#: ../mastering-plone/zpt.rst:1003
msgid "``i18n:translate`` and ``i18n:domain``"
msgstr ""

#: ../mastering-plone/zpt.rst:1003
msgid "the strings we put in templates can be translated automatically."
msgstr ""

#: ../mastering-plone/zpt.rst:1005
msgid "There is a lot more about TAL, TALES and METAL that we have not covered. You'll only learn it if you keep reading, writing and customizing templates."
msgstr ""

#: ../mastering-plone/zpt.rst:1010
msgid "https://docs.plone.org/adapt-and-extend/theming/templates_css/template_basics.html"
msgstr ""

#: ../mastering-plone/zpt.rst:1011
msgid "Using Zope Page Templates: https://zope.readthedocs.io/en/latest/zope2book/ZPT.html"
msgstr ""

#: ../mastering-plone/zpt.rst:1012
msgid "Zope Page Templates Reference: https://zope.readthedocs.io/en/latest/zope2book/AppendixC.html"
msgstr ""

#: ../mastering-plone/zpt.rst:1013
msgid "https://chameleon.readthedocs.io/en/latest/"
msgstr ""

#: ../mastering-plone/zpt_2.rst:4
msgid "Customizing Existing Templates"
msgstr ""

#: ../mastering-plone/zpt_2.rst:16
msgid "Customize existing templates"
msgstr ""

#: ../mastering-plone/zpt_2.rst:20
msgid "packages (omelette)"
msgstr ""

#: ../mastering-plone/zpt_2.rst:21
msgid "z3c.jbot"
msgstr ""

#: ../mastering-plone/zpt_2.rst:22
msgid "date-formatting and the moment pattern"
msgstr ""

#: ../mastering-plone/zpt_2.rst:23
msgid "listings"
msgstr ""

#: ../mastering-plone/zpt_2.rst:24
msgid "skins"
msgstr ""

#: ../mastering-plone/zpt_2.rst:26
msgid "To dive deeper into real Plone data we now look at some existing templates and customize them."
msgstr ""

#: ../mastering-plone/zpt_2.rst:32
msgid "The view for News Items"
msgstr ""

#: ../mastering-plone/zpt_2.rst:34
msgid "We want to show the date a News Item is published. This way people can see at a glance if they are looking at current or old news."
msgstr ""

#: ../mastering-plone/zpt_2.rst:37
msgid "To do this you will first customize the template that is used to render News Items."
msgstr ""

#: ../mastering-plone/zpt_2.rst:39
msgid "We use :py:mod:`z3c.jbot` for overriding templates. The package already has the necessary configuration in :file:`browser/configure.zcml`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:42
msgid "Find the file :file:`newsitem.pt` in :file:`packages/plone/app/contenttypes/browser/templates/` (in vagrant this directory is in :file:`/home/vagrant/packages`, otherwise it is in your buildout directory)."
msgstr ""

#: ../mastering-plone/zpt_2.rst:45
#: ../mastering-plone/zpt_2.rst:166
msgid "The file looks like this:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:73
msgid "Like almost all Plone templates, it uses `metal:use-macro=\"context/main_template/macros/master\"` to use the main_template"
msgstr ""

#: ../mastering-plone/zpt_2.rst:74
msgid "This template fills the same slot `content-core` as the template you created in the last chapter. This means the heading and description are displayed by the `main_template`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:75
msgid "The image and image caption that is provided by the behavior is not part of the template. Instead a Viewlet is used to display it."
msgstr ""

#: ../mastering-plone/zpt_2.rst:77
msgid "Copy that file into the folder :file:`browser/overrides/` of your package. If you use vagrant you'd have to use"
msgstr ""

#: ../mastering-plone/zpt_2.rst:83
msgid "Rename the new file from :file:`newsitem.pt` to :file:`plone.app.contenttypes.browser.templates.newsitem.pt`. :py:mod:`z3c.jbot` allows you to override templates by putting a file inside a special directory with a *canonical name* (i.e. the path of the file separated by `.` plus the original filename)."
msgstr ""

#: ../mastering-plone/zpt_2.rst:84
msgid "Restart Plone"
msgstr ""

#: ../mastering-plone/zpt_2.rst:86
msgid "Now Plone will use the new file to override the original one."
msgstr ""

#: ../mastering-plone/zpt_2.rst:88
msgid "Edit the new file :file:`plone.app.contenttypes.browser.templates.newsitem.pt` and insert the following before the ``<div id=\"parent-fieldname-text\"``...:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:96
msgid "Since we use Plone 5 and Chameleon we could also write:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:104
msgid "Open an existing news item in the browser"
msgstr ""

#: ../mastering-plone/zpt_2.rst:106
msgid "This will show something like: ``2015-02-21T12:01:31+01:00``. Not very user-friendly. Let's extend the code and use one of many helpers Plone offers."
msgstr ""

#: ../mastering-plone/zpt_2.rst:116
msgid "This will render ``Feb 21, 2015``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:118
msgid "``plone_view`` is the BrowserView :py:class:`Products.CMFPlone.browser.ploneview.Plone` and it is defined in the ``main_template`` (:file:`Products/CMFPlone/browser/templates/main_template.pt`) of Plone 5 like this ``plone_view context/@@plone;`` and thus always available."
msgstr ""

#: ../mastering-plone/zpt_2.rst:119
msgid "The method :py:meth:`toLocalizedTime` runs a date object through Plone's ``translation_service`` and returns the Date in the current locales format, thus transforming ``2015-02-21T12:01:31+01:00`` to ``Feb 21, 2015``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:121
msgid "The same in a slightly different style:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:131
msgid "Here we first get the Plone view and then the method :py:meth:`toLocalizedTime` and we use ``nocall`` to prevent the method :py:meth:`toLocalizedTime` from being called, since we want to make it available for later use."
msgstr ""

#: ../mastering-plone/zpt_2.rst:134
msgid "We could also leave the formatting to the frontend. Plone 5 comes with the `moment pattern <http://plone.github.io/mockup/dev/#pattern/moment>`_ that uses the library `moment.js <http://plone.github.io/mockup/dev/#pattern/moment>`_ to format dates in the browser with JavaScript."
msgstr ""

#: ../mastering-plone/zpt_2.rst:138
msgid "Try the relative calendar format:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:147
msgid "Now we should see the date in a user-friendly format like ``Today at 12:01 PM``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:149
msgid "Experiment with other formats such as ``calendar`` and ``LT``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:155
msgid "The Summary View"
msgstr ""

#: ../mastering-plone/zpt_2.rst:157
msgid "We use the view \"Summary View\" to list news releases. They should also have the date."
msgstr ""

#: ../mastering-plone/zpt_2.rst:160
msgid "The template associated with that view is :file:`listing_summary.pt`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:162
msgid "Let's look for the template folder_summary_view.pt::"
msgstr ""

#: ../mastering-plone/zpt_2.rst:236
msgid "Note the following:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:238
msgid "Unlike :file:`newsitem.pt` the file does not display data from a context but obviously pre-defined variables like `item`, `item_link`, `item_type` or `item_description`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:239
msgid "It reuses multiple macros of a view  `context/@@listing_view`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:240
msgid "The variables are most likely defined in the macro `entries` of that view."
msgstr ""

#: ../mastering-plone/zpt_2.rst:242
msgid "Copy it to :file:`browser/overrides/` and rename it to :file:`plone.app.contenttypes.browser.templates.listing_summary.pt`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:244
msgid "Add the following after line 28:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:252
msgid "After you restart the instance and look at the new folder again you'll see the dates. :py:mod:`z3c.jbot` needs a restart to pick up the new file. When you only change a existing override you don't have to restart."
msgstr ""

#: ../mastering-plone/zpt_2.rst:255
msgid "The addition renders the date of the respective objects that the template iterates over (hence ``item`` instead of ``context`` since ``context`` would be either a collection aggregating the news items or a folder containing a news item)."
msgstr ""

#: ../mastering-plone/zpt_2.rst:258
msgid "The date is only displayed if the variable ``item_type`` is ``News Item``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:260
msgid "Let's take a closer look at that template. How does it know that ``item_type`` is the name of the content type?"
msgstr ""

#: ../mastering-plone/zpt_2.rst:262
msgid "The first step to uncovering that secret is line 14 of :file:`listing_summary.pt`:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:268
msgid "``use-macro`` tells Plone to reuse the macro ``entries`` from the view ``listing_view``. That view is defined in :file:`packages/plone/app/contenttypes/browser/configure.zcml`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:271
msgid "It uses the template :file:`plone/app/contenttypes/browser/templates/listing.pt`. That makes overriding that much easier."
msgstr ""

#: ../mastering-plone/zpt_2.rst:274
msgid "That template :file:`listing.pt` defines the slot ``entries`` like this:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:308
msgid "Here the ``item_type`` is defined as ``item_type item/PortalType``. Let's dig a little deeper and find out what ``item`` and  ``PortalType`` are."
msgstr ""

#: ../mastering-plone/zpt_2.rst:311
msgid "``tal:repeat=\"item batch\"`` tells the template to iterate over an iterable ``batch`` which is defined as ``batch view/batch``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:313
msgid "``view`` is always the BrowserView for which the template is registered. In our case this is either :py:class:`plone.app.contenttypes.browser.collection.CollectionView` if you called that view on a collection, or :py:class:`plone.app.contenttypes.browser.folder.FolderView` for folders."
msgstr ""

#: ../mastering-plone/zpt_2.rst:317
msgid "You might remember that both are defined in :file:`configure.zcml`"
msgstr ""

#: ../mastering-plone/zpt_2.rst:319
msgid "Luckily the first is a class that inherits from the second:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:325
msgid ":py:meth:`batch` is a method in :py:class:`FolderView` that turns :py:obj:`results` into batches. :py:obj:`results` exists in both classes. This means, in case the item we are looking at is a collection, the method :py:meth:`results` of :py:class:`CollectionView`, will be used; and in case it's a folder, the one in :py:class:`FolderView`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:329
msgid "`batch` is a list of items."
msgstr ""

#: ../mastering-plone/zpt_2.rst:331
msgid "The way it is created is actually pretty complicated and makes use of a couple of packages to create a filtered (through :py:mod:`plone.app.querystring`) list of optimized representations (through :py:mod:`plone.app.contentlisting`) of items."
msgstr ""

#: ../mastering-plone/zpt_2.rst:334
msgid "For now it is enough to know that `item` represents one of the items in the list of News Items."
msgstr ""

#: ../mastering-plone/zpt_2.rst:336
msgid "The template :file:`listing_summary.pt` is extraordinary in its heavy use of nested macros."
msgstr ""

#: ../mastering-plone/zpt_2.rst:338
msgid "Most of the templates you will write are much simpler and easier to read."
msgstr ""

#: ../mastering-plone/zpt_2.rst:340
msgid "It can be hard to understand templates as complicated as these, but there is help to be found if you know Python: use :py:mod:`pdb` to debug templates line by line."
msgstr ""

#: ../mastering-plone/zpt_2.rst:342
msgid "Add the following to line 29 just before our additions::"
msgstr ""

#: ../mastering-plone/zpt_2.rst:346
msgid "When you reload the page and look at the terminal you see you have the pdb console and can inspect the template at its current state by looking at the variable `econtext`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:349
msgid "You can now simply look up what `item ` and `PortalType` are:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:369
msgid "As discovered above, `item` is a instance of :py:class:`plone.app.contentlisting.catalog.CatalogContentListingObject`."
msgstr ""

#: ../mastering-plone/zpt_2.rst:371
msgid "It has several methods and properties:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:385
msgid "`PortalType` is a method that returns the name of the items content-type."
msgstr ""

#: ../mastering-plone/zpt_2.rst:396
msgid "Finding the right template"
msgstr ""

#: ../mastering-plone/zpt_2.rst:398
msgid "We changed the display of the listing of news items at http://localhost:8080/Plone/news."
msgstr ""

#: ../mastering-plone/zpt_2.rst:400
msgid "How do we know which template to customize?"
msgstr ""

#: ../mastering-plone/zpt_2.rst:402
msgid "If you don't know which template is used by the page you're looking at, you can:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:404
msgid "make an educated guess"
msgstr ""

#: ../mastering-plone/zpt_2.rst:405
msgid "use :py:mod:`plone.app.debugtoolbar`"
msgstr ""

#: ../mastering-plone/zpt_2.rst:406
msgid "or start a debug session"
msgstr ""

#: ../mastering-plone/zpt_2.rst:408
msgid "We could check the HTML with Firebug and look for a structure in the content area that looks unique."
msgstr ""

#: ../mastering-plone/zpt_2.rst:410
msgid "We could also look for the CSS class of the body"
msgstr ""

#: ../mastering-plone/zpt_2.rst:416
msgid "The class ``template-summary_view`` tells us that the name of the view (but not necessarily the name of the template) is ``summary_view``. So we could search all :file:`*.zcml`-Files for ``name=\"summary_view\"`` or search all templates called :file:`summary_view.pt` and probably find the view and also the corresponding template. But only probably because it would not tell us if the template is already being overridden."
msgstr ""

#: ../mastering-plone/zpt_2.rst:418
msgid "A foolproof way to verify your guess is to modify the template and reload the page. If your modification shows up you obviously found the correct file."
msgstr ""

#: ../mastering-plone/zpt_2.rst:420
msgid "The safest method is using :py:mod:`plone.app.debugtoolbar`. We already have it in our buildout and only need to install it. It adds a \"Debug\" dropdown menu on top of the page."
msgstr ""

#: ../mastering-plone/zpt_2.rst:424
msgid "The section \"Published\" shows the complete path to the template that is used to render the page you are seeing."
msgstr ""

#: ../mastering-plone/zpt_2.rst:426
msgid "Install it now and find information about the current template in the section **Published**."
msgstr ""

#: ../mastering-plone/zpt_2.rst:428
msgid "The debug session to find the template is a little more complicated. Since we have :py:mod:`Products.PDBDebugMode` in our buildout we can call the Browser View ``pdb`` on our page by appending ``/pdb`` to the url. We cannot put a `pdb` in the templates since we do not know (yet) which template to put the `pdb` in."
msgstr ""

#: ../mastering-plone/zpt_2.rst:430
msgid "The object that the URL points to is by default :py:obj:`self.context`. But the first problem is that the URL we're seeing is not the URL of the collection we want to modify. This is because the collection is the default page of the folder ``news``."
msgstr ""

#: ../mastering-plone/zpt_2.rst:451
msgid "Now we see that we already customized the template."
msgstr ""

#: ../mastering-plone/zpt_2.rst:453
msgid "Here is a small method that could be used in a view or viewlet to display that path:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:468
msgid "skin templates"
msgstr ""

#: ../mastering-plone/zpt_2.rst:472
msgid "Why don't we always only use templates? Because we might want to do something more complicated than get an attribute from the context and render its value in some HTML tag."
msgstr ""

#: ../mastering-plone/zpt_2.rst:475
msgid "There is a deprecated technology called 'skin templates' that allows you to simply add some page template (e.g. 'old_style_template.pt') to a certain folder in the ZMI or your egg and you can access it in the browser by opening a URL like http://localhost:8080/Plone/old_style_template and it will be rendered."
msgstr ""

#: ../mastering-plone/zpt_2.rst:479
msgid "But we don't use it and you too should not, even though these skin templates are still all over Plone."
msgstr ""

#: ../mastering-plone/zpt_2.rst:481
msgid "Since we use :py:mod:`plone.app.contenttypes` we do not encounter many skin templates when dealing with content any more. But more often than not you'll have to customize an old site that still uses skin templates."
msgstr ""

#: ../mastering-plone/zpt_2.rst:484
msgid "Skin templates and Python scripts in ``portal_skins`` are deprecated because:"
msgstr ""

#: ../mastering-plone/zpt_2.rst:486
msgid "they use restricted Python"
msgstr ""

#: ../mastering-plone/zpt_2.rst:487
msgid "they have no nice way to attach Python code to them"
msgstr ""

#: ../mastering-plone/zpt_2.rst:488
msgid "they are always callable for everything (they can't easily be bound to an interface)"
msgstr ""

#: ../mastering-plone/zpt_2.rst:494
msgid "Overriding templates with :py:mod:`z3c.jbot` is easy."
msgstr ""

#: ../mastering-plone/zpt_2.rst:495
msgid "Understanding templates can be hard."
msgstr ""

#: ../mastering-plone/zpt_2.rst:496
msgid "Use plone.app.debugtoolbar and pdb; they are there to help you."
msgstr ""

#: ../mastering-plone/zpt_2.rst:497
msgid "Skin templates are deprecated; you will probably only encounter them when you work on Plone 4 or older add-ons and client code."
msgstr ""

