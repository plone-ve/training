# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-05 05:00-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../embed.rst:4
msgid "Using starzel.votable_behavior in ploneconf.site"
msgstr ""

#: ../embed.rst:6
msgid "In this part you will:"
msgstr ""

#: ../embed.rst:8
msgid "Integrate your own third party package into your site."
msgstr ""

#: ../embed.rst:10
msgid "Topics covered:"
msgstr ""

#: ../embed.rst:12
msgid "Permissions"
msgstr ""

#: ../embed.rst:13
msgid "Workflows"
msgstr ""

#: ../embed.rst:0
msgid "Get the code!"
msgstr ""

#: ../embed.rst:18
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout directory:"
msgstr ""

#: ../embed.rst:27
msgid "We want to use the votable behavior, so that our reviewers can vote."
msgstr ""

#: ../embed.rst:28
msgid "To show how to use events, we are going to auto-publish talks that have reached a certain rating."
msgstr ""

#: ../embed.rst:29
msgid "We are not going to let everybody vote everything."
msgstr ""

#: ../embed.rst:31
msgid "First, we must add our package as a dependency to ploneconf.site."
msgstr ""

#: ../embed.rst:35
msgid "We do this in two locations. The egg description :file:`setup.py` needs :samp:`starzel.votable_behavior` as a dependency. Else no source code will be available."
msgstr ""

#: ../embed.rst:38
msgid "The persistent configuration needs to be installed when we install our site. This is configured in GenericSetup."
msgstr ""

#: ../embed.rst:40
msgid "We start by editing :file:`setup.py`"
msgstr ""

#: ../embed.rst:58
msgid "Next up we modify :file:`profiles/default/metadata.xml`"
msgstr ""

#: ../embed.rst:73
#: ../embed.rst:99
msgid "... only:: not presentation"
msgstr ""

#: ../embed.rst:75
msgid "What a weird name. profile- is a prefix you will always need nowadays. Then comes the egg name, and the part after the colon is the name of the profile. The name of the profile is defined in zcml. So far I've stumbled over only one package where the profile directory name was different than the GenericSetup Profile name."
msgstr ""

#: ../embed.rst:77
msgid "Now the package is there, but nothing is votable. That is because no content type declares to use this behavior. We can add this behavior via the control panel, export the settings and store it in our egg. Let's just add it by hand now."
msgstr ""

#: ../embed.rst:79
msgid "To add the behavior to talks, we do this in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../embed.rst:83
msgid "After changing the ``metadata.xml`` you have to restart your site since unlike other GenericSetup XML files that file is cached."
msgstr ""

#: ../embed.rst:85
msgid "Managing dependencies in metadata.xml is good practice. We can't rely on remembering what we'd have to do by hand. In Plone 4 we should also have added ``<dependency>profile-plone.app.contenttypes:plone-content</dependency>`` like the `documentation for plone.app.contenttypes <http://docs.plone.org/external/plone.app.contenttypes/docs/README.html#installation-as-a-dependency-from-another-product>`_ recommends."
msgstr ""

#: ../embed.rst:87
msgid "Read more: http://docs.plone.org/develop/addons/components/genericsetup.html#dependencies"
msgstr ""

#: ../embed.rst:101
msgid "Now you can reinstall your Plone site."
msgstr ""

#: ../embed.rst:103
msgid "Everybody can now vote on talks. That's not what we wanted. We only want reviewers to vote on pending Talks. This means the permission has to change depending on the workflow state. Luckily, workflows can be configured to do just that. Since Talks already have their own workflow we also won't interfere with other content."
msgstr ""

#: ../embed.rst:105
msgid "First, we have to tell the workflow that it will be managing more permissions. Next, for each state we have to configure which role has the two new permissions."
msgstr ""

#: ../embed.rst:107
msgid "That is a very verbose configuration, maybe you want to do it in the web interface and export the settings. On the other hand, it is easy to make a simple mistake in both ways. I will just present the xml way here."
msgstr ""

#: ../embed.rst:109
msgid "The config for the Workflow is in :file:`profiles/default/workfows/talks_workflow.xml`"
msgstr ""

#: ../embed.rst:167
msgid "We have to reinstall our product again."
msgstr ""

#: ../embed.rst:169
msgid "But this time, this is not enough. Permissions get updated on workflow changes. As long as a workflow change didn't happen, the talks have the same permissions as ever."
msgstr ""

#: ../embed.rst:171
msgid "Luckily, there is a button for that in the ZMI Workflow view :guilabel:`Update security settings`."
msgstr ""

#: ../embed.rst:173
msgid "After clicking on this, only managers and Reviewers can see the Voting functionality."
msgstr ""

#: ../embed.rst:175
msgid "Lastly, we add our silly function to auto-approve talks."
msgstr ""

#: ../embed.rst:177
msgid "You quickly end up writing many event handlers, so we put everything into a directory for eventhandlers."
msgstr ""

#: ../embed.rst:179
msgid "For the events we need an :file:`events` directory."
msgstr ""

#: ../embed.rst:181
msgid "Create the :file:`events` directory and add an empty :file:`events/__init__.py` file."
msgstr ""

#: ../embed.rst:183
msgid "Next, register the events directory in :file:`configure.zcml`"
msgstr ""

#: ../embed.rst:190
msgid "Now write the ZCML configuration for the events into :file:`events/configure.zcml`"
msgstr ""

#: ../embed.rst:209
msgid "This looks like a MultiAdapter. We want to get notified when an IVotable object gets modified. Our method will receive the votable object and the event itself."
msgstr ""

#: ../embed.rst:211
msgid "And finally, our event handler in :file:`events/votable.py`"
msgstr ""

#: ../embed.rst:229
msgid "We are using a lot of plone api here. Plone API makes the code a breeze. Also, there is nothing really interesting. We will only do something if the workflow state is pending and the average vote is above 0.5. As you can see, the :samp:`transition` Method does not want the target state, but the transition to move the state to the target state."
msgstr ""

#: ../embed.rst:233
msgid "There is nothing special going on."
msgstr ""

