# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-22 16:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../embed.rst:2
msgid "Using starzel.votable_behavior in ploneconf.site"
msgstr ""

#: ../embed.rst:6
msgid "We want to use the votable behavior, so that our reviewers can vote."
msgstr ""

#: ../embed.rst:7
msgid "To show how to use events, we are going to auto publish talks that have reached a certain rating."
msgstr ""

#: ../embed.rst:8
msgid "We are not going to let everybody vote everything."
msgstr ""

#: ../embed.rst:10
msgid "First, we must add our package as a dependency to ploneconf.site."
msgstr ""

#: ../embed.rst:14
msgid "We do this in two locations. The egg description :file:`setup.py` needs :samp:`starzel.votable_behavior` as a dependency. Else no source code will be available."
msgstr ""

#: ../embed.rst:17
msgid "The persistent configuration needs to be installed when we install our site. This is configured in GenericSetup."
msgstr ""

#: ../embed.rst:19
msgid "We start with by editing :file:`setup.py`"
msgstr ""

#: ../embed.rst:37
msgid "Next up we modify :file:`profiles/default/metadata.xml`"
msgstr ""

#: ../embed.rst:54
msgid "What a weird name. profile- is a prefix you will always need nowadays. Then comes the egg name, and the part after the colon is the name of the profile. The name of the profile is defined in zcml. So far I've stumbled only over one package where the profile directory name was different to the GenericSetup Profile name."
msgstr ""

#: ../embed.rst:56
msgid "Now the package is there, but nothing is votable. That is because no content type declares to use this behavior. We can add this behavior via the control panel, export the settings and store it in our egg. Let's just add it by hand now."
msgstr ""

#: ../embed.rst:58
msgid "We have to add the behavior to talks, we do this in :file:`profiles/default/types/talk.xml`"
msgstr ""

#: ../embed.rst:62
msgid "Managing dependencies in metadata.xml is good practice. We can't rely on remembering what we'd have to do by hand. For example, do you remember that we had to add to select ``Dexterity-based Plone Default Types`` when creating a new Plone site?"
msgstr ""

#: ../embed.rst:64
msgid "We should instead also add ``<dependency>profile-plone.app.contenttypes:plone-content</dependency>`` like the `documentation for plone.app.contenttypes <http://docs.plone.org/4/en/external/plone.app.contenttypes/docs/README.html#installation-as-a-dependency-from-another-product>`_ recommends."
msgstr ""

#: ../embed.rst:78
msgid "Now we can reinstall our Plone site."
msgstr ""

#: ../embed.rst:80
msgid "Everybody can vote now on talks. That is not what we wanted. Actually, we want reviewers only to vote on pending Talks. This means, depending on the workflow state, the permission has to change. Luckily, workflows can be configured to do just that. Talks already have their own workflow. So we won't interfere with other packages."
msgstr ""

#: ../embed.rst:83
msgid "First, we have to tell the workflow that he will be managing more permissions. Next up, we have to configure for each state, which role has the two new permissions now."
msgstr ""

#: ../embed.rst:85
msgid "That is a very verbose configuration, maybe you want to do it in the web interface and export the settings. On the other hand, it is easy to make a simple mistake in both ways. I will just present xml way here."
msgstr ""

#: ../embed.rst:87
msgid "The config for the Workflow is in :file:`profiles/default/workfows/talks_workflow.xml`"
msgstr ""

#: ../embed.rst:145
msgid "We have to reinstall our product again."
msgstr ""

#: ../embed.rst:147
msgid "But this time, this is not enough. Permissions get updated on workflow changes. As long as a workflow change didn't happen, the talks have the same permissions as ever."
msgstr ""

#: ../embed.rst:149
msgid "Luckily, there is a button for that in the ZMI Workflow view :guilabel:`Update security settings`."
msgstr ""

#: ../embed.rst:151
msgid "After clicking on this, only managers and Reviewers can see the Voting functionality."
msgstr ""

#: ../embed.rst:153
msgid "Lastly, we add our silly function to auto-approve talks."
msgstr ""

#: ../embed.rst:155
msgid "You quickly end up writing many event handlers, so we put everything into a directory for eventhandlers."
msgstr ""

#: ../embed.rst:157
msgid "For the events we need a :file:`events` directory."
msgstr ""

#: ../embed.rst:159
msgid "Create the :file:`events` directory and add an empty :file:`events/__init__.py` file."
msgstr ""

#: ../embed.rst:161
msgid "Next, register the events directory in :file:`configure.zcml`"
msgstr ""

#: ../embed.rst:168
msgid "then, we write the ZCML configuration for the events into :file:`events/configure.zcml`"
msgstr ""

#: ../embed.rst:187
msgid "This looks like a MultiAdapter. We want to get notified, when an IVotable object gets modified. Our method will receive the votable object, and the event itself."
msgstr ""

#: ../embed.rst:189
msgid "And finally, our event handler in :file:`events/votable.py`"
msgstr ""

#: ../embed.rst:207
msgid "We are using a lot of plone api here. Plone API makes the code a breeze. Also, there is nothing really interesting. We will only do something, if the workflow state is pending and the average vote is above 0.5. As you can see, the :samp:`transition` Method does not want the target state, but the transition to move the state to the target state."
msgstr ""

#: ../embed.rst:211
msgid "There is nothing special going on."
msgstr ""

