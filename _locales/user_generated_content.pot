# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-05 05:00-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../user_generated_content.rst:4
msgid "User Generated Content"
msgstr ""

#: ../user_generated_content.rst:0
msgid "Get the code!"
msgstr ""

#: ../user_generated_content.rst:8
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout directory:"
msgstr ""

#: ../user_generated_content.rst:15
msgid "How do prospective speakers submit talks? We let them register on the site and grant right to create talks. For this we go back to changing the site through-the-web."
msgstr ""

#: ../user_generated_content.rst:17
msgid "In this chapter we:"
msgstr ""

#: ../user_generated_content.rst:19
msgid "allow self-registration"
msgstr ""

#: ../user_generated_content.rst:20
msgid "constrain types on the talk folder"
msgstr ""

#: ../user_generated_content.rst:21
msgid "grant local roles"
msgstr ""

#: ../user_generated_content.rst:22
msgid "create a custom workflow for talks"
msgstr ""

#: ../user_generated_content.rst:28
msgid "Self-registration"
msgstr ""

#: ../user_generated_content.rst:30
msgid "Go to the Security controlpanel at http://localhost:8080/Plone/@@security-controlpanel and Enable self-registration"
msgstr ""

#: ../user_generated_content.rst:31
msgid "Leave \"Enable User Folders\" off unless you want a community site."
msgstr ""

#: ../user_generated_content.rst:37
msgid "Constrain types"
msgstr ""

#: ../user_generated_content.rst:39
msgid "On the talk folder select `Restrictionsâ€¦ <http://localhost:8080/Plone/the-event/talks/folder_constraintypes_form>`_ from the *Add new* menu. Only allow to add talks."
msgstr ""

#: ../user_generated_content.rst:45
#: ../user_generated_content.rst:108
msgid "Grant local roles"
msgstr ""

#: ../user_generated_content.rst:47
msgid "Go to *Sharing* and grant the role *Can add* to the group logged-in users. Now every user can add content in this folder (and only this folder)."
msgstr ""

#: ../user_generated_content.rst:49
msgid "Now all logged-in users can create and submit talks in this folder with the permission of the default workflow."
msgstr ""

#: ../user_generated_content.rst:55
msgid "A custom workflow for talks"
msgstr ""

#: ../user_generated_content.rst:57
msgid "We still need to fix a problem: Authenticated users can see all talks, even the ones of other users in the private state. Since we don't want this we will create a modified workflow for talks. The new workflow will only let them see and edit talks they created themselves and not the ones of other users."
msgstr ""

#: ../user_generated_content.rst:59
msgid "Go to the ZMI > portal_workflow"
msgstr ""

#: ../user_generated_content.rst:60
msgid "See how talks have the same workflow as most content ``(Default)``"
msgstr ""

#: ../user_generated_content.rst:61
msgid "Go to the tab *Contents*, check the box next to ``simple_publication_workflow``, click ``copy`` and ``paste``."
msgstr ""

#: ../user_generated_content.rst:62
msgid "Rename the new workflow from *copy_of_simple_publication_workflow* to *talks_workflow*."
msgstr ""

#: ../user_generated_content.rst:63
msgid "Edit the workflow by clicking on it: Change the Title to *Talks Workflow*."
msgstr ""

#: ../user_generated_content.rst:64
msgid "Click on the tab *States* and click on *private* to edit this state. In the next view select the tab *Permissions*."
msgstr ""

#: ../user_generated_content.rst:65
msgid "Find the table column for the role *Contributor* and remove the permissions for ``Access contents information`` and ``View``. Note that the *Owner* (i.e. the Creator) still has some permissions."
msgstr ""

#: ../user_generated_content.rst:66
msgid "Do the same for the state *pending*"
msgstr ""

#: ../user_generated_content.rst:67
msgid "Go back to *portal_workflow* and set the new workflow ``talks_workflow`` for talks. Click *Change* and then *Update security settings*."
msgstr ""

#: ../user_generated_content.rst:71
msgid "The addon `plone.app.workflowmanager <https://pypi.python.org/pypi/plone.app.workflowmanager>`_ provides a much nicer user-interface for this. The problem is you need a big screen for it and it can be pretty confusing as well."
msgstr ""

#: ../user_generated_content.rst:73
msgid "Done."
msgstr ""

#: ../user_generated_content.rst:79
msgid "Move the changes to the file system"
msgstr ""

#: ../user_generated_content.rst:81
msgid "We don't want to do these steps for every new conference by hand so we move the changes into our package."
msgstr ""

#: ../user_generated_content.rst:84
msgid "Import/Export the Workflow"
msgstr ""

#: ../user_generated_content.rst:86
msgid "export the GenericSetup step *Workflow Tool* in http://localhost:8080/Plone/portal_setup/manage_exportSteps."
msgstr ""

#: ../user_generated_content.rst:87
msgid "drop the file ``workflows.xml`` into ``profiles/default``."
msgstr ""

#: ../user_generated_content.rst:88
msgid "drop ``workflows/talks_workflow/definition.xml`` in ``profiles/default/workflows/talks_workflow/definition.xml``. The others are just definitions of the default-workflows and we only want things in our package that changes Plone."
msgstr ""

#: ../user_generated_content.rst:92
msgid "Enable self-registration"
msgstr ""

#: ../user_generated_content.rst:94
msgid "To enable self-registration add the following to ``profiles/default/registry.xml``:"
msgstr ""

#: ../user_generated_content.rst:104
msgid "Before Plone 5 this had to be done in python in a setuphandler (see below) since there was not yet an exportable setting for this."
msgstr ""

#: ../user_generated_content.rst:110
msgid "Since the granting of local roles applies only to a certain folder in the site we would not always write code for it but do it by hand. But for testability and repeatability (there is a conference every year!) we should create the initial content structure automatically."
msgstr ""

#: ../user_generated_content.rst:112
msgid "So let's make sure some initial content is created and configured on installing the package."
msgstr ""

#: ../user_generated_content.rst:114
msgid "To run arbitrary code during the installation of a package we use a special import step, a `setuphandler <http://docs.plone.org/develop/addons/components/genericsetup.html#custom-installer-code-setuphandlers-py>`_"
msgstr ""

#: ../user_generated_content.rst:116
msgid "Our package already has such an import step registered in ``configure.zcml``. It will be automatically run when (re-)installing the addon."
msgstr ""

#: ../user_generated_content.rst:130
msgid "All GenericSetup import steps, including this one, are run for **every add-on product** when they are installed. To make sure that it is only run during installation of your package the code checks for a marker text file ``ploneconfsite_marker.txt``."
msgstr ""

#: ../user_generated_content.rst:132
msgid "This step makes sure the method ``post_install`` in ``setuphandlers.py`` is executed on installation."
msgstr ""

#: ../user_generated_content.rst:185
msgid "Once we reinstall our package a folder 'talks' is created with the appropriate local roles and constraints."
msgstr ""

#: ../user_generated_content.rst:187
msgid "Remember that we wrote similar code to create the folder *The Event* in :ref:`dexterity2-upgrades-label`. We should probably add it also to setuphandlers to make sure a sane structure gets created when we create a new site by hand or in tests."
msgstr ""

#: ../user_generated_content.rst:189
msgid "You'd usualy create a list of dictionaries containing the type, parent and title plus optionally layout, workflow state etc. to create an initial structure. In some projects it could also make sense to have a separate profile besides ``default`` which might be called ``content`` that creates an initial structure and maybe another ``testing`` that creates dummy content (talks, speakers etc) for tests."
msgstr ""

#: ../user_generated_content.rst:193
msgid "You can also export and later import content using the GenericSetup step *Content* (``Products.CMFCore.exportimport.content.exportSiteStructure``) although you cannot set all types of properties (workflow state, layout) and the syntax is a little special."
msgstr ""

#: ../user_generated_content.rst:197
msgid "Excercise 1"
msgstr ""

#: ../user_generated_content.rst:199
msgid "Create a profile ``content`` that runs its own method in ``setuphandlers.py``. Note that you need a different marker text file to make sure your code is only run when installing the profile ``content``."
msgstr ""

#: ../user_generated_content.rst:201
msgid "Solution"
msgstr ""

#: ../user_generated_content.rst:204
msgid "Register the profile and the upgrade step in ``configure.zcml``"
msgstr ""

#: ../user_generated_content.rst:224
msgid "Create the profile folder ``profiles/content`` and drop a marker file ``ploneconfsite_content_marker.txt`` in it."
msgstr ""

#: ../user_generated_content.rst:226
msgid "Also add a ``profiles/content/metadata.xml`` so the default profile gets automatically installed when installing the content profile."
msgstr ""

#: ../user_generated_content.rst:238
msgid "Add the stucture you wish to create as a list of dictionaries in ``setuphandlers.py``:"
msgstr ""

#: ../user_generated_content.rst:315
msgid "Add the method ``content`` to ``setuphandlers.py``. We pointed to that when registering the import step. And add some fancy logic to create the content from ``STRUCTURE``."
msgstr ""

