# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-22 16:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../views_3.rst:2
msgid "Views III: A Talk list"
msgstr ""

#: ../views_3.rst:0
msgid "Get the code!"
msgstr ""

#: ../views_3.rst:6
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../views_3.rst:13
msgid "Now we don't want to provide information about one specific item but on several items. What now? We can't look at several items at the same time as context."
msgstr ""

#: ../views_3.rst:17
msgid "Using portal_catalog"
msgstr ""

#: ../views_3.rst:19
msgid "Let's say we want to show a list of all the talks that were submitted for our conference. We can just go to the folder and select a display-method that suits us. But none does because we want to show the target-audience in our listing."
msgstr ""

#: ../views_3.rst:21
msgid "So we need to get all the talks. For this we use the python-class of the view to query the catalog for the talks."
msgstr ""

#: ../views_3.rst:23
msgid "The catalog is like a search-engine for the content on our site. It holds information about all the objects as well as some of their attributes like title, description, workflow_state, keywords that they were tagged with, author, content_type, it's path in the site etc. But it does not hold the content of \"heavy\" fields like images or files, richtext-fields and field that we just defined ourselves."
msgstr ""

#: ../views_3.rst:25
msgid "It is the fast way to get content that exists in the site and do something with it. From the results of the catalog we can get the objects themselves but often we don't need them, but only the properties that the results already have."
msgstr ""

#: ../views_3.rst:27
msgid "``browser/configure.zcml``"
msgstr ""

#: ../views_3.rst:41
msgid "``browser/views.py``"
msgstr ""

#: ../views_3.rst:85
msgid "We query the catalog for two things:"
msgstr ""

#: ../views_3.rst:87
msgid "``portal_type = \"talk\"``"
msgstr ""

#: ../views_3.rst:88
msgid "``path = \"/\".join(self.context.getPhysicalPath())``"
msgstr ""

#: ../views_3.rst:90
msgid "We get the path of the current context to query only for objects in the current path. Otherwise we'd get all talks in the whole site. If we moved some talks to a different part of the site (e.g. a sub-conference for universities with a special talk-list) we might not want so see them in our listing."
msgstr ""

#: ../views_3.rst:92
msgid "We iterate over the list of results that the catalog returns us."
msgstr ""

#: ../views_3.rst:94
msgid "We create a dictionary that holds all the information we want to show in the template. This way we don't have to put any complex logic into the template."
msgstr ""

#: ../views_3.rst:97
msgid "brains and objects"
msgstr ""

#: ../views_3.rst:99
msgid "Objects are normally not loaded into memory but lie dormant in the Database ZODB. Waking objects up can be slow, especially if you're waking up a lot of objects. Fortunately our talks are not especially heavy since they are:"
msgstr ""

#: ../views_3.rst:101
msgid "dexterity-objects which are lighter than their archetypes-brothers"
msgstr ""

#: ../views_3.rst:102
msgid "relatively few since we don't have thousands of talks at our conference"
msgstr ""

#: ../views_3.rst:104
msgid "We want to show the target-audience but that attributes of the talks is not in the catalog. This is why we need to get to the objects themselves."
msgstr ""

#: ../views_3.rst:106
msgid "We could also add a new index to the catalog that will add 'audience' to the properties of the brains, we have to weight pros and cons:"
msgstr ""

#: ../views_3.rst:108
msgid "talks are important and thus most likely always in memory"
msgstr ""

#: ../views_3.rst:109
msgid "prevent bloating of catalog with indexes"
msgstr ""

#: ../views_3.rst:113
msgid "The code to add such an index would look like this::"
msgstr ""

#: ../views_3.rst:122
msgid "We'd have to register this factory function as a named adapter in the ``configure.zcml``. Assuming you've put the code above into a file named indexers.py"
msgstr ""

#: ../views_3.rst:128
msgid "We will add some indexers later on."
msgstr ""

#: ../views_3.rst:130
msgid "Why use the catalog at all? It checks for permissions, and only returns the talks that the current user may see. They might be private or hidden to you since they are part of a top-secret conference for core-developers (there is no such thing!)."
msgstr ""

#: ../views_3.rst:132
msgid "Most objects in plone act like dictionaries, so you can do ``context.values()`` to get all it's contents."
msgstr ""

#: ../views_3.rst:134
msgid "For historical reasons some attributes of brains and objects are written differently::"
msgstr ""

#: ../views_3.rst:147
msgid "Who can guess what ``brain.title`` will return since the brain has no such attribute?"
msgstr ""

#: ../views_3.rst:153
msgid "Answer: Acquisition will get the attribute from the nearest parent. ``brain.__parent__`` is ``<CatalogTool at /Plone/portal_catalog>``. The attribute ``title`` of the ``portal_catalog`` is 'Indexes all content in the site'."
msgstr ""

#: ../views_3.rst:155
msgid "Acquisition can be harmful. Brains have no attribute 'getLayout' ``brain.getLayout()``::"
msgstr ""

#: ../views_3.rst:166
msgid "The same is true for methods::"
msgstr ""

#: ../views_3.rst:176
msgid "Querying the catalog"
msgstr ""

#: ../views_3.rst:178
msgid "There are many `catalog indexes <http://docs.plone.org/4/en/develop/plone/searching_and_indexing/indexing.html>`_ to query. Here are some examples::"
msgstr ""

#: ../views_3.rst:186
msgid "Calling the catalog without parameters return the whole site::"
msgstr ""

#: ../views_3.rst:193
msgid "http://docs.plone.org/4/en/develop/plone/searching_and_indexing/query.html"
msgstr ""

#: ../views_3.rst:197
msgid "Exercises"
msgstr ""

#: ../views_3.rst:199
msgid "Since you now know how to query the catalog it is time for some exercise."
msgstr ""

#: ../views_3.rst:202
msgid "Exercise 1"
msgstr ""

#: ../views_3.rst:204
msgid "Add a method ``get_news`` to ``TalkListView`` that returns a list of brains of all News Items that are published and sort them in the order of their publishing-date."
msgstr ""

#: ../views_3.rst:206
#: ../views_3.rst:228
#: ../views_3.rst:377
msgid "Solution"
msgstr ""

#: ../views_3.rst:224
msgid "Exercise 2"
msgstr ""

#: ../views_3.rst:226
msgid "Add a method that returns all published keynotes as objects."
msgstr ""

#: ../views_3.rst:251
msgid "The template for the listing"
msgstr ""

#: ../views_3.rst:253
msgid "Next you create a template in which you use the results of the method 'talks'."
msgstr ""

#: ../views_3.rst:255
msgid "Try to keep logic mostly in python. This is for two reasons:"
msgstr ""

#: ../views_3.rst:258
msgid "Readability:"
msgstr ""

#: ../views_3.rst:258
msgid "It's much easier to read python than complex tal-structures"
msgstr ""

#: ../views_3.rst:261
msgid "Speed:"
msgstr ""

#: ../views_3.rst:261
msgid "Python-code is faster than code executed in templates. It's also easy to add caching to methods."
msgstr ""

#: ../views_3.rst:265
msgid "DRY:"
msgstr ""

#: ../views_3.rst:264
msgid "In Python you can reuse methods and easily re-factor code. Refactoring TAL usually means having to do big changes in the html-structure which results in incomprehensible diffs."
msgstr ""

#: ../views_3.rst:267
msgid "The MVC-Schema does not directly apply to Plone but look at it like this:"
msgstr ""

#: ../views_3.rst:270
msgid "Model:"
msgstr ""

#: ../views_3.rst:270
msgid "the object"
msgstr ""

#: ../views_3.rst:273
msgid "View:"
msgstr ""

#: ../views_3.rst:273
msgid "the template"
msgstr ""

#: ../views_3.rst:276
msgid "Controller:"
msgstr ""

#: ../views_3.rst:276
msgid "the view"
msgstr ""

#: ../views_3.rst:278
msgid "The view and the controller are very much mixed in Plone. Especially when you look at some of the older code of Plone you'll see that the policy of keeping logic in python and representation in templates was not always enforced."
msgstr ""

#: ../views_3.rst:280
msgid "But you should nevertheless do it! You'll end up with more than enough logic in the templates anyway."
msgstr ""

#: ../views_3.rst:282
msgid "Add this simple table to ``templates/talklistview.pt``:"
msgstr ""

#: ../views_3.rst:316
msgid "Afterwards you transform it into a listing:"
msgstr ""

#: ../views_3.rst:360
msgid "There are some some things that need explanation:"
msgstr ""

#: ../views_3.rst:363
msgid "``tal:repeat=\"talk view/talks\"``"
msgstr ""

#: ../views_3.rst:363
msgid "This iterates over the list of dictionaries returned by the view. ``view/talks`` calls the method ``talks`` of our view and each ``talk`` is in turn one of the dictionaries that are returned by this method. Since TAL's path-expressions for the lookup of values in dictionaries is the same as the attributes of objects we can write ``talk/somekey`` as we could ``view/somemethod``. Handy but sometimes irritating since from looking at the page-template alone we have often no way of knowing if something is an attribute, a method or the value of a dict. It would be a good practice to write ``tal:repeat=\"talk python:view.talks()\"``."
msgstr ""

#: ../views_3.rst:366
msgid "``tal:content=\"talk/speaker\"``"
msgstr ""

#: ../views_3.rst:366
msgid "'speaker' is a key in the dict 'talk'. We could also write ``tal:content=\"python:talk['speaker']\"``"
msgstr ""

#: ../views_3.rst:370
msgid "``tal:condition=\"not:view/talks\"``"
msgstr ""

#: ../views_3.rst:369
msgid "This is a fallback if no talks are returned. It then return an empty list (remember ``results = []``?)"
msgstr ""

#: ../views_3.rst:373
msgid "Exercise"
msgstr ""

#: ../views_3.rst:375
msgid "Modify the view to only python-expressions."
msgstr ""

#: ../views_3.rst:422
msgid "To follow the mantra \"don't repeat yourself\" we define ``talks`` instead of calling the method twice."
msgstr ""

#: ../views_3.rst:426
msgid "Setting a custom view as default-view on an object"
msgstr ""

#: ../views_3.rst:428
msgid "We don't want to always have to append /@@talklistview to our folder to get the view. There is a very easy way to set the view to the folder using the ZMI."
msgstr ""

#: ../views_3.rst:430
msgid "If we append ``/manage_propertiesForm`` we can set the property \"layout\" to ``talklistview``."
msgstr ""

#: ../views_3.rst:432
msgid "To make views configurable so that editors can choose them we have to register the view for the content-type at hand in it's FTI. To enable if for all folders we add a new file ``profiles/default/types/Folder.xml``"
msgstr ""

#: ../views_3.rst:445
msgid "After reapplying the typeinfo-profile of out addon (or simply reinstalling it) the content-type \"Folder\" is extended with our additional view-method and appears in the display-dropdown."
msgstr ""

#: ../views_3.rst:447
msgid "The ``purge=\"False\"`` appends the view to the already existing ones instead of replacing them."
msgstr ""

#: ../views_3.rst:451
msgid "Adding some javascript (collective.js.datatables)"
msgstr ""

#: ../views_3.rst:453
msgid "Here we use one of many nice feature build into Plone. The class=\"listing\" gives the table a nice style and makes the table sortable with some javascript."
msgstr ""

#: ../views_3.rst:455
msgid "But we could improve that table further by using a nice javascript-library called \"datatables\". It might even become part of the Plone-core at some point."
msgstr ""

#: ../views_3.rst:457
msgid "Like for many js-libraries there is already a package that doe the plone-integration for us: ``collective.js.datatables``. Like all python-packages you can find it on pypi: https://pypi.python.org/pypi/collective.js.datatables"
msgstr ""

#: ../views_3.rst:459
msgid "We already added the addon to our buildout, you just have to activate it in our template."
msgstr ""

#: ../views_3.rst:527
msgid "We don't need the css-class ``listing`` anymore since it might clash with datatables (it does not but still...)."
msgstr ""

#: ../views_3.rst:529
msgid "The documentation of datatables is beyond our training."
msgstr ""

#: ../views_3.rst:531
msgid "We use METAL again but this time to fill a different slot. The \"javascript_head_slot\" is part of the html's ``<head>``-area in Plone and can be extended this way. We could also just put the code inline but having nicely ordered html is a good practice."
msgstr ""

#: ../views_3.rst:533
msgid "Let's test it: http://localhost:8080/Plone/talklistview"
msgstr ""

#: ../views_3.rst:537
msgid "We add the ``jquery.datatables.js`` file directly to the HEAD slot of the HTML without using Plone JavaScript registry (portal_javascript). By using the registry you could enable merging of js files and advanced caching. A GenericSetup profile is included in the collective.js.datatables package."
msgstr ""

#: ../views_3.rst:540
msgid "Summary"
msgstr ""

#: ../views_3.rst:542
msgid "We created a nice listing, that can be called at any place in the website."
msgstr ""

