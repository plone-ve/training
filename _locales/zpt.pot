# SOME DESCRIPTIVE TITLE.
# Copyright (C) The text and illustrations in this website are licensed by the Plone Foundation under a Creative Commons Attribution 4.0 International license.
# This file is distributed under the same license as the Mastering Plone package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mastering Plone 1.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-22 16:14-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../zpt.rst:2
msgid "Zope Page Templates"
msgstr ""

#: ../zpt.rst:0
msgid "Get the code!"
msgstr ""

#: ../zpt.rst:6
msgid "Get the code for this chapter (:doc:`More info <sneak>`) using this command in the buildout-directory:"
msgstr ""

#: ../zpt.rst:13
msgid "Page Templates are HTML-files with some additional Information, written in TAL, METAL and TALES."
msgstr ""

#: ../zpt.rst:15
msgid "Page templates must be valid xml."
msgstr ""

#: ../zpt.rst:17
msgid "The three languages are:"
msgstr ""

#: ../zpt.rst:19
msgid "TAL: \"Template Attribute Language\""
msgstr ""

#: ../zpt.rst:21
msgid "Templating XML/HTML using special Attributes"
msgstr ""

#: ../zpt.rst:23
msgid "Using TAL we include expressions into html"
msgstr ""

#: ../zpt.rst:25
msgid "TALES: \"TAL Expression Syntax\""
msgstr ""

#: ../zpt.rst:27
msgid "defines the syntax and semantics of these expressions"
msgstr ""

#: ../zpt.rst:29
msgid "METAL: \"Macro Expansion for TAL\""
msgstr ""

#: ../zpt.rst:31
msgid "this enables us to combine, re-use and nest templates together"
msgstr ""

#: ../zpt.rst:33
msgid "TAL and METAL are written like html-attributes (url, src, title). TALES are written like the values of html-attributes. A typical TAL-Statement looks like this:"
msgstr ""

#: ../zpt.rst:41
msgid "It's used to modify the output:"
msgstr ""

#: ../zpt.rst:47
#: ../zpt.rst:96
msgid "results in:"
msgstr ""

#: ../zpt.rst:53
msgid "Let's try it. Open the file ``demoview.pt`` and add:"
msgstr ""

#: ../zpt.rst:69
msgid "TAL and TALES"
msgstr ""

#: ../zpt.rst:71
msgid "Let's add some magic and modify the <p>-tag:"
msgstr ""

#: ../zpt.rst:77
msgid "This will result in:"
msgstr ""

#: ../zpt.rst:83
msgid "Without restarting Plone open http://localhost:8080/Plone/@@demoview."
msgstr ""

#: ../zpt.rst:85
msgid "The same happens with attributes. Replace the <p>-line with:"
msgstr ""

#: ../zpt.rst:104
msgid "We used three TAL-Attributes here. This is the complete list of TAL-attributes:"
msgstr ""

#: ../zpt.rst:107
msgid "``tal:define``"
msgstr ""

#: ../zpt.rst:107
msgid "define variables. We definded the variable url to the string \"http://www.ploneconf.org\""
msgstr ""

#: ../zpt.rst:110
msgid "``tal:content``"
msgstr ""

#: ../zpt.rst:110
msgid "replace the content of an element. We replaced the default-content about some with \"A even better conference\""
msgstr ""

#: ../zpt.rst:113
msgid "``tal:attributes``"
msgstr ""

#: ../zpt.rst:113
msgid "dynamically change element attributes. We set the html-attribute ``href`` to the variable ``a_fine_url``"
msgstr ""

#: ../zpt.rst:116
#: ../zpt.rst:165
msgid "``tal:condition``"
msgstr ""

#: ../zpt.rst:116
#: ../zpt.rst:165
msgid "tests, if the expression is true or false."
msgstr ""

#: ../zpt.rst:119
#: ../zpt.rst:201
msgid "``tal:repeat``"
msgstr ""

#: ../zpt.rst:119
#: ../zpt.rst:201
msgid "repeats an iterable element, in our case the list of talks."
msgstr ""

#: ../zpt.rst:122
msgid "``tal:replace``"
msgstr ""

#: ../zpt.rst:122
msgid "replace the content of an element like ``tal:content`` but removes the element only leaving the content."
msgstr ""

#: ../zpt.rst:125
#: ../zpt.rst:381
msgid "``tal:omit-tag``"
msgstr ""

#: ../zpt.rst:125
msgid "remove an element, leaving the content of the element."
msgstr ""

#: ../zpt.rst:129
#: ../zpt.rst:384
msgid "``tal:on-error``"
msgstr ""

#: ../zpt.rst:128
#: ../zpt.rst:384
msgid "handle errors."
msgstr ""

#: ../zpt.rst:132
msgid "python-expressions"
msgstr ""

#: ../zpt.rst:134
msgid "So far we only used one TALES expression (the ``string:``-bit). Let's use a different TALES-expression now. With ``python:`` we can use python-code. A simple example:"
msgstr ""

#: ../zpt.rst:143
msgid "And another:"
msgstr ""

#: ../zpt.rst:155
msgid "With python-expressions"
msgstr ""

#: ../zpt.rst:157
msgid "you can only write single statements"
msgstr ""

#: ../zpt.rst:158
msgid "you could import things but you should not (example: ``tal:define=\"something modules/Products.PythonScripts/something;``)."
msgstr ""

#: ../zpt.rst:162
msgid "tal:condition"
msgstr ""

#: ../zpt.rst:167
msgid "If it's true, then the tag is rendered."
msgstr ""

#: ../zpt.rst:168
msgid "If it's false then the tag **and all its children** are removed and no longer evaluated."
msgstr ""

#: ../zpt.rst:169
msgid "We can reverse the logic by perpending a ``not:`` to the expression."
msgstr ""

#: ../zpt.rst:171
msgid "Let's add another TAL-Attribute to our above example::"
msgstr ""

#: ../zpt.rst:175
msgid "We could also test for the number of talks::"
msgstr ""

#: ../zpt.rst:179
msgid "or if a certain talk is in the list of talks::"
msgstr ""

#: ../zpt.rst:185
msgid "tal:repeat"
msgstr ""

#: ../zpt.rst:187
msgid "Let's try another statement:"
msgstr ""

#: ../zpt.rst:203
msgid "We change the markup a little to construct a list in which there is an ``<li>`` for every talk:"
msgstr ""

#: ../zpt.rst:222
msgid "path-expressions"
msgstr ""

#: ../zpt.rst:224
msgid "Regarding TALES so far we used ``string:`` or ``python:`` or only variables. The next and most common expression are path-expressions. Optionally you can start a path-expression with ``path:``"
msgstr ""

#: ../zpt.rst:226
msgid "Every path expression starts with a variable name. It can either be an object like ``context``, ``view`` or ``template`` or a variable defined earlier like ``talk``."
msgstr ""

#: ../zpt.rst:228
msgid "After the variable we add a slash ``/`` and the name of a sub-object, attribute or callable. The '/' is used to end the name of an object and the start of the property name. Properties themselves may be objects that in turn have properties."
msgstr ""

#: ../zpt.rst:234
msgid "We can chain several of those to get to the information we want."
msgstr ""

#: ../zpt.rst:240
msgid "This would return the value of the form-dictionary of the HTTPRequest-object. Useful for form-handling."
msgstr ""

#: ../zpt.rst:242
msgid "The ``|`` (\"or\") character is used to find an alternative value to a path if the first path evaluates to ``nothing`` or does not exist."
msgstr ""

#: ../zpt.rst:248
msgid "This returns the id of the context if it has no title."
msgstr ""

#: ../zpt.rst:254
msgid "This returns nothing if there is no 'average_rating' for a talk. What will not work is ``tal:content=\"python:talk['average_rating'] or ''\"``. Who knows what this would yield?"
msgstr ""

#: ../zpt.rst:258
msgid "We'll get ``KeyError: 'average_rating'``. It is very bad practice to use ``|`` too often since it will swallow errors like a typo in ``tal:content=\"talk/averange_ratting |Â nothing\"`` and you might wonder why there are no ratings later on..."
msgstr ""

#: ../zpt.rst:260
msgid "You can't and should not use it to prevent errors like a try/except-block."
msgstr ""

#: ../zpt.rst:262
msgid "There are several **built in variables**  that can be used in paths:"
msgstr ""

#: ../zpt.rst:264
msgid "The most frequently used one is ``nothing`` which is the equivalent to None"
msgstr ""

#: ../zpt.rst:272
msgid "A dict of all the available variables is ``CONTEXTS``"
msgstr ""

#: ../zpt.rst:283
msgid "Useful for debugging :-)"
msgstr ""

#: ../zpt.rst:287
msgid "Pure TAL-blocks"
msgstr ""

#: ../zpt.rst:289
msgid "We can use TAL-attributes without HTML-Tags. This is useful when we don't need to add any tags to the markup"
msgstr ""

#: ../zpt.rst:291
msgid "Syntax:"
msgstr ""

#: ../zpt.rst:297
msgid "Examples:"
msgstr ""

#: ../zpt.rst:313
msgid "handling complex data in templates"
msgstr ""

#: ../zpt.rst:315
msgid "Let's move on to a little more complex data. And to another TAL-attribute:"
msgstr ""

#: ../zpt.rst:318
msgid "tal:replace"
msgstr ""

#: ../zpt.rst:318
msgid "replace the content of an element and removes the element only leaving the content."
msgstr ""

#: ../zpt.rst:320
msgid "Example:"
msgstr ""

#: ../zpt.rst:329
msgid "this results in:"
msgstr ""

#: ../zpt.rst:337
msgid "``tal:replace`` drops it's own base-tag in favor of the result of the TALES-expression. Thus the original ``<img... >`` is replaced. But the result is escaped by default."
msgstr ""

#: ../zpt.rst:339
msgid "To prevent escaping we use ``structure``"
msgstr ""

#: ../zpt.rst:348
msgid "Now let's emulate a typical Plone structure by creating a dictionary."
msgstr ""

#: ../zpt.rst:376
msgid "We emulate a list of talks and display information about them in a table. We'll get back to the list of talks later when we use the real talk-objects that we created with dexterity."
msgstr ""

#: ../zpt.rst:378
msgid "To complete the list here are the TAL-Attributes we have not yet used:"
msgstr ""

#: ../zpt.rst:381
msgid "Omit the element tags, leaving only the inner content."
msgstr ""

#: ../zpt.rst:386
msgid "When an element has multiple statements, they are executed in this order:"
msgstr ""

#: ../zpt.rst:388
msgid "define"
msgstr ""

#: ../zpt.rst:389
msgid "condition"
msgstr ""

#: ../zpt.rst:390
msgid "repeat"
msgstr ""

#: ../zpt.rst:391
msgid "content or replace"
msgstr ""

#: ../zpt.rst:392
msgid "attributes"
msgstr ""

#: ../zpt.rst:393
msgid "omit-tag"
msgstr ""

#: ../zpt.rst:398
msgid "METAL and macros"
msgstr ""

#: ../zpt.rst:400
msgid "Why is our output so ugly? How do we get our html to render in Plone the UI?"
msgstr ""

#: ../zpt.rst:402
msgid "We use METAL (Macro Extension to TAL) to define slots that we can fill and macros that we can reuse."
msgstr ""

#: ../zpt.rst:404
msgid "We add to the ``<html>``-tag::"
msgstr ""

#: ../zpt.rst:408
msgid "And then wrap the code we want to put in the content-area of Plone in:"
msgstr ""

#: ../zpt.rst:416
msgid "This will put our code in a section defined in the main_template called \"content-core\"."
msgstr ""

#: ../zpt.rst:418
msgid "The template should now look like this:"
msgstr ""

#: ../zpt.rst:461
msgid "Since the demoview only used content from the template, not from the context that it is called on it makes little sense to have the edit-bar. We hide it by setting the respective variable on the current request with python to 1: ``request.set('disable_border', 1)``."
msgstr ""

#: ../zpt.rst:463
msgid "The easiest way to do this is to define a dummy-variable. Dummy because it is never used except to allow us to execute some code."
msgstr ""

#: ../zpt.rst:472
msgid "macros in browser-views"
msgstr ""

#: ../zpt.rst:474
msgid "Define a macro in a new file ``macros.pt``"
msgstr ""

#: ../zpt.rst:482
msgid "Register it as a BrowserView (this time without a python-class) in zcml:"
msgstr ""

#: ../zpt.rst:493
msgid "Reuse the macro it in the template ``demoview.pt``:"
msgstr ""

#: ../zpt.rst:503
msgid "Accessing Plone from the template"
msgstr ""

#: ../zpt.rst:505
msgid "In our template we have access to the context object on which the view is called on, the browser-view itself (i.e. all python-methods we'll put in the view later on), the request and response objects and with these we can get almost anything."
msgstr ""

#: ../zpt.rst:507
msgid "In templates we can also access other browser-views. Some of those exist to provide easy access to methods we often need::"
msgstr ""

#: ../zpt.rst:515
msgid "``@@plone_context_state``"
msgstr ""

#: ../zpt.rst:515
msgid "The BrowserView ``plone.app.layout.globals.context.ContextState`` holds useful methods having to do with the current context object such as ``is_default_page``"
msgstr ""

#: ../zpt.rst:518
msgid "``@@plone_portal_state``"
msgstr ""

#: ../zpt.rst:518
msgid "The BrowserView ``plone.app.layout.globals.portal.PortalState`` holds methods for the portal like ``portal_url``"
msgstr ""

#: ../zpt.rst:521
msgid "``@@plone_tools``"
msgstr ""

#: ../zpt.rst:521
msgid "The BrowserView ``plone.app.layout.globals.tools.Tools`` gives access to the most important tools like ``plone_tools/catalog``"
msgstr ""

#: ../zpt.rst:523
msgid "These are very widely used and there are many more."
msgstr ""

#: ../zpt.rst:527
msgid "What we missed"
msgstr ""

#: ../zpt.rst:529
msgid "There are some things we did not cover so far:"
msgstr ""

#: ../zpt.rst:532
msgid "``tal:condition=\"exists:expression\"``"
msgstr ""

#: ../zpt.rst:532
msgid "checks if an object or an attribute exists (seldom used)"
msgstr ""

#: ../zpt.rst:535
msgid "``tal:condition=\"nocall:context\"``"
msgstr ""

#: ../zpt.rst:535
msgid "to explicitly not call a callable."
msgstr ""

#: ../zpt.rst:537
msgid "If we refer to content objects, without using the nocall: modifier these objects are unnecessarily rendered in memory as the expression is evaluated."
msgstr ""

#: ../zpt.rst:540
msgid "``i18n:translate`` and ``i18n:domain``"
msgstr ""

#: ../zpt.rst:540
msgid "the strings we put in templates can be translated automatically."
msgstr ""

#: ../zpt.rst:542
msgid "There is a lot more about TAL, TALES and METAL that we have not covered. You'll only learn it if you keep reading, writing and customizing templates."
msgstr ""

#: ../zpt.rst:546
msgid "http://docs.plone.org/4/en/adapt-and-extend/theming/templates_css/template_basics.html"
msgstr ""

#: ../zpt.rst:547
msgid "Using Zope Page Templates: http://docs.zope.org/zope2/zope2book/ZPT.html"
msgstr ""

#: ../zpt.rst:548
msgid "Zope Page Templates Reference: http://docs.zope.org/zope2/zope2book/AppendixC.html"
msgstr ""

#: ../zpt.rst:551
msgid "Chameleon"
msgstr ""

#: ../zpt.rst:553
msgid "Chameleon is the successor of TAL and will be shipped in Plone 5."
msgstr ""

#: ../zpt.rst:555
msgid "Plip for Chameleon: https://dev.plone.org/ticket/12198"
msgstr ""

#: ../zpt.rst:556
msgid "Homepage: http://www.pagetemplates.org/"
msgstr ""

#: ../zpt.rst:557
msgid "Integration-layer for Plone: `five.pt <https://pypi.python.org/pypi/five.pt>`_"
msgstr ""

#: ../zpt.rst:559
msgid "In Plone 4 we still use the default ZPT."
msgstr ""

